#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
–í–∫–ª—é—á–∞–µ—Ç: Linear Regression, Ridge, Random Forest, XGBoost, Prophet
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')

# Scikit-learn –º–æ–¥–µ–ª–∏
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

# XGBoost
try:
    import xgboost as xgb
    XGBOOST_AVAILABLE = True
except ImportError:
    XGBOOST_AVAILABLE = False
    print("‚ö†Ô∏è  XGBoost –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install xgboost")

# Prophet
try:
    from prophet import Prophet
    PROPHET_AVAILABLE = True
except ImportError:
    PROPHET_AVAILABLE = False
    print("‚ö†Ô∏è  Prophet –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install prophet")

import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

class ModelComparison:
    def __init__(self, csv_file=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
        self.csv_file = csv_file
        self.df = None
        self.aggregated_df = None
        self.models = {}
        self.results = {}
        self.forecast_results = {}
        
    def load_and_clean_data(self, csv_file=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if csv_file:
            self.csv_file = csv_file
            
        if not self.csv_file:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            
        print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.csv_file}...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        separators = [',', ';', '\t', '|']
        for sep in separators:
            try:
                self.df = pd.read_csv(self.csv_file, sep=sep)
                if len(self.df.columns) > 1:
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}': {len(self.df)} –∑–∞–ø–∏—Å–µ–π, {len(self.df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
                    break
            except:
                continue
        
        if self.df is None or len(self.df.columns) <= 1:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º")
            return None
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüßπ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•:")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        for col in ['year', 'month']:
            if col in self.df.columns:
                self.df[col] = pd.to_numeric(self.df[col], errors='coerce')
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        initial_count = len(self.df)
        self.df = self.df.dropna(subset=['year', 'month'])
        print(f"  –£–¥–∞–ª–µ–Ω–æ {initial_count - len(self.df)} –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –û—á–∏—Å—Ç–∫–∞ revenue_total
        if 'revenue_total' in self.df.columns:
            self.df['revenue_total'] = self.df['revenue_total'].astype(str).str.replace(',', '').str.replace(' ', '')
            self.df['revenue_total'] = pd.to_numeric(self.df['revenue_total'], errors='coerce')
            self.df['revenue_total'] = self.df['revenue_total'].fillna(0)
        
        print(f"  –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(self.df)} –∑–∞–ø–∏—Å–µ–π")
        return self.df
    
    def prepare_aggregated_data(self, train_end_year=2025, train_end_month=9):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        print(f"\nüìö –ü–û–î–ì–û–¢–û–í–ö–ê –ê–ì–†–ï–ì–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
        print(f"  –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: –¥–æ {train_end_year}.{train_end_month:02d}")
        
        # –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ —Å–µ–Ω—Ç—è–±—Ä—è 2025)
        train_mask = (
            (self.df['year'] < train_end_year) | 
            ((self.df['year'] == train_end_year) & (self.df['month'] <= train_end_month))
        )
        train_df = self.df[train_mask].copy()
        
        print(f"  –û–±—É—á–∞—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(train_df)}")
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –º–µ—Å—è—Ü–∞–º
        if 'region_to' in train_df.columns and 'revenue_total' in train_df.columns:
            self.aggregated_df = train_df.groupby(['year', 'month', 'region_to'])['revenue_total'].agg([
                'sum', 'mean', 'count', 'std'
            ]).reset_index()
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            self.aggregated_df.columns = ['year', 'month', 'region_to', 'total_revenue', 'avg_revenue', 'count', 'std_revenue']
            
            print(f"  –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ {len(self.aggregated_df)} –∑–∞–ø–∏—Å–µ–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            train_revenue = self.aggregated_df['total_revenue'].sum()
            print(f"  –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {train_revenue:,.0f} ‚ÇΩ")
            
            return self.aggregated_df
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏")
            return None
    
    def prepare_features_for_sklearn(self, data):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è scikit-learn –º–æ–¥–µ–ª–µ–π"""
        data = data.copy()
        data = data.sort_values(['year', 'month'])
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å
        data['time_index'] = (data['year'] - data['year'].min()) * 12 + (data['month'] - 1)
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        data['month_sin'] = np.sin(2 * np.pi * data['month'] / 12)
        data['month_cos'] = np.cos(2 * np.pi * data['month'] / 12)
        
        # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        data['quarter'] = ((data['month'] - 1) // 3) + 1
        for q in range(1, 5):
            data[f'q{q}'] = (data['quarter'] == q).astype(int)
        
        # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        data['holiday_period'] = (
            (data['month'] == 12) |  # –î–µ–∫–∞–±—Ä—å
            (data['month'] == 1) |   # –Ø–Ω–≤–∞—Ä—å
            (data['month'] == 2) |   # –§–µ–≤—Ä–∞–ª—å
            (data['month'] == 3) |   # –ú–∞—Ä—Ç
            (data['month'] == 5)     # –ú–∞–π
        ).astype(int)
        
        # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        data['time_squared'] = data['time_index'] ** 2
        data['time_cubed'] = data['time_index'] ** 3
        
        return data
    
    def prepare_features_for_prophet(self, data):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Prophet"""
        prophet_data = data.copy()
        prophet_data = prophet_data.sort_values(['year', 'month'])
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É
        prophet_data['ds'] = pd.to_datetime(prophet_data[['year', 'month']].assign(day=1))
        prophet_data['y'] = prophet_data['total_revenue']
        
        return prophet_data[['ds', 'y']]
    
    def train_sklearn_models(self, region_data):
        """–û–±—É—á–µ–Ω–∏–µ scikit-learn –º–æ–¥–µ–ª–µ–π"""
        print(f"  üîß –û–±—É—á–µ–Ω–∏–µ scikit-learn –º–æ–¥–µ–ª–µ–π...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        data = self.prepare_features_for_sklearn(region_data)
        
        # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        features = ['time_index', 'month_sin', 'month_cos', 'q1', 'q2', 'q3', 'q4', 'holiday_period', 'time_squared', 'time_cubed']
        X = data[features].fillna(0)
        y = data['total_revenue']
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        
        models = {
            'Linear Regression': LinearRegression(),
            'Ridge': Ridge(alpha=1.0),
            'Lasso': Lasso(alpha=0.1),
            'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42)
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º XGBoost –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if XGBOOST_AVAILABLE:
            models['XGBoost'] = xgb.XGBRegressor(n_estimators=100, random_state=42)
        
        results = {}
        
        for name, model in models.items():
            try:
                # –û–±—É—á–µ–Ω–∏–µ
                if name == 'XGBoost':
                    model.fit(X, y)  # XGBoost –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                    y_pred = model.predict(X)
                else:
                    model.fit(X_scaled, y)
                    y_pred = model.predict(X_scaled)
                
                # –ú–µ—Ç—Ä–∏–∫–∏
                r2 = r2_score(y, y_pred)
                mae = mean_absolute_error(y, y_pred)
                rmse = np.sqrt(mean_squared_error(y, y_pred))
                
                results[name] = {
                    'model': model,
                    'scaler': scaler if name != 'XGBoost' else None,
                    'features': features,
                    'r2': r2,
                    'mae': mae,
                    'rmse': rmse,
                    'predictions': y_pred
                }
                
                print(f"    {name}: R¬≤={r2:.3f}, MAE={mae:,.0f}, RMSE={rmse:,.0f}")
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ {name}: {str(e)}")
                continue
        
        return results
    
    def train_prophet_model(self, region_data):
        """–û–±—É—á–µ–Ω–∏–µ Prophet –º–æ–¥–µ–ª–∏"""
        if not PROPHET_AVAILABLE:
            print("  ‚ö†Ô∏è  Prophet –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        print(f"  üîß –û–±—É—á–µ–Ω–∏–µ Prophet –º–æ–¥–µ–ª–∏...")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Prophet
            prophet_data = self.prepare_features_for_prophet(region_data)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            model = Prophet(
                yearly_seasonality=True,
                weekly_seasonality=False,
                daily_seasonality=False,
                seasonality_mode='multiplicative'
            )
            
            model.fit(prophet_data)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            future = model.make_future_dataframe(periods=0)
            forecast = model.predict(future)
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            y_true = prophet_data['y'].values
            y_pred = forecast['yhat'].values
            
            r2 = r2_score(y_true, y_pred)
            mae = mean_absolute_error(y_true, y_pred)
            rmse = np.sqrt(mean_squared_error(y_true, y_pred))
            
            print(f"    Prophet: R¬≤={r2:.3f}, MAE={mae:,.0f}, RMSE={rmse:,.0f}")
            
            return {
                'model': model,
                'r2': r2,
                'mae': mae,
                'rmse': rmse,
                'predictions': y_pred
            }
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ Prophet: {str(e)}")
            return None
    
    def train_all_models(self):
        """–û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        print(f"\nü§ñ –û–ë–£–ß–ï–ù–ò–ï –í–°–ï–• –ú–û–î–ï–õ–ï–ô:")
        
        if self.aggregated_df is None:
            print("‚ùå –ù–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            return None
        
        for region in self.aggregated_df['region_to'].unique():
            region_data = self.aggregated_df[self.aggregated_df['region_to'] == region].copy()
            
            if len(region_data) > 6:  # –ú–∏–Ω–∏–º—É–º 6 –º–µ—Å—è—Ü–µ–≤ –¥–∞–Ω–Ω—ã—Ö
                print(f"\n  üåç –†–µ–≥–∏–æ–Ω: {region}")
                
                # Scikit-learn –º–æ–¥–µ–ª–∏
                sklearn_results = self.train_sklearn_models(region_data)
                
                # Prophet –º–æ–¥–µ–ª—å
                prophet_result = self.train_prophet_model(region_data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self.models[region] = {
                    'sklearn': sklearn_results,
                    'prophet': prophet_result
                }
    
    def create_forecasts(self, forecast_periods=4):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤—Å–µ–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
        print(f"\nüîÆ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ì–ù–û–ó–û–í –ù–ê {forecast_periods} –ü–ï–†–ò–û–î–ê:")
        
        if not self.models:
            print("‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            return None
        
        forecast_results = {}
        
        for region, region_models in self.models.items():
            print(f"\n  üåç –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {region}:")
            
            region_forecasts = {}
            
            # –ü—Ä–æ–≥–Ω–æ–∑—ã scikit-learn –º–æ–¥–µ–ª–µ–π
            if 'sklearn' in region_models:
                for model_name, model_info in region_models['sklearn'].items():
                    try:
                        # –°–æ–∑–¥–∞–µ–º –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã
                        last_data = self.aggregated_df[self.aggregated_df['region_to'] == region].sort_values(['year', 'month']).iloc[-1]
                        last_year = last_data['year']
                        last_month = last_data['month']
                        
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
                        forecast_data = []
                        for i in range(1, forecast_periods + 1):
                            month = last_month + i
                            year = last_year
                            while month > 12:
                                month -= 12
                                year += 1
                            
                            period_data = {
                                'year': year,
                                'month': month,
                                'time_index': (year - self.aggregated_df['year'].min()) * 12 + (month - 1),
                                'month_sin': np.sin(2 * np.pi * month / 12),
                                'month_cos': np.cos(2 * np.pi * month / 12),
                                'quarter': ((month - 1) // 3) + 1,
                                'holiday_period': 1 if month in [12, 1, 2, 3, 5] else 0
                            }
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                            for q in range(1, 5):
                                period_data[f'q{q}'] = 1 if period_data['quarter'] == q else 0
                            
                            # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                            period_data['time_squared'] = period_data['time_index'] ** 2
                            period_data['time_cubed'] = period_data['time_index'] ** 3
                            
                            forecast_data.append(period_data)
                        
                        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                        forecast_df = pd.DataFrame(forecast_data)
                        features = model_info['features']
                        X_forecast = forecast_df[features].fillna(0)
                        
                        # –ü—Ä–æ–≥–Ω–æ–∑
                        if model_name == 'XGBoost':
                            forecast_values = model_info['model'].predict(X_forecast)
                        else:
                            X_forecast_scaled = model_info['scaler'].transform(X_forecast)
                            forecast_values = model_info['model'].predict(X_forecast_scaled)
                        
                        # –£–±–∏—Ä–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        forecast_values = np.maximum(forecast_values, 0)
                        
                        region_forecasts[model_name] = {
                            'values': forecast_values,
                            'periods': forecast_df[['year', 'month']].to_dict('records')
                        }
                        
                        total_forecast = np.sum(forecast_values)
                        print(f"    {model_name}: {total_forecast:,.0f} ‚ÇΩ")
                        
                    except Exception as e:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ {model_name}: {str(e)}")
                        continue
            
            # –ü—Ä–æ–≥–Ω–æ–∑ Prophet
            if 'prophet' in region_models and region_models['prophet'] is not None:
                try:
                    prophet_model = region_models['prophet']['model']
                    
                    # –°–æ–∑–¥–∞–µ–º –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è Prophet
                    last_data = self.aggregated_df[self.aggregated_df['region_to'] == region].sort_values(['year', 'month']).iloc[-1]
                    last_date = pd.to_datetime(f"{last_data['year']}-{last_data['month']:02d}-01")
                    
                    future_dates = pd.date_range(start=last_date + pd.DateOffset(months=1), periods=forecast_periods, freq='MS')
                    future_df = pd.DataFrame({'ds': future_dates})
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑
                    forecast = prophet_model.predict(future_df)
                    forecast_values = np.maximum(forecast['yhat'].values, 0)
                    
                    region_forecasts['Prophet'] = {
                        'values': forecast_values,
                        'periods': [{'year': d.year, 'month': d.month} for d in future_dates]
                    }
                    
                    total_forecast = np.sum(forecast_values)
                    print(f"    Prophet: {total_forecast:,.0f} ‚ÇΩ")
                    
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ Prophet: {str(e)}")
                    continue
            
            forecast_results[region] = region_forecasts
        
        self.forecast_results = forecast_results
        return forecast_results
    
    def compare_models(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π"""
        print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –ú–û–î–ï–õ–ï–ô:")
        
        if not self.models:
            print("‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return None
        
        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        all_metrics = []
        
        for region, region_models in self.models.items():
            # Scikit-learn –º–æ–¥–µ–ª–∏
            if 'sklearn' in region_models:
                for model_name, model_info in region_models['sklearn'].items():
                    all_metrics.append({
                        'region': region,
                        'model': model_name,
                        'r2': model_info['r2'],
                        'mae': model_info['mae'],
                        'rmse': model_info['rmse']
                    })
            
            # Prophet –º–æ–¥–µ–ª—å
            if 'prophet' in region_models and region_models['prophet'] is not None:
                prophet_info = region_models['prophet']
                all_metrics.append({
                    'region': region,
                    'model': 'Prophet',
                    'r2': prophet_info['r2'],
                    'mae': prophet_info['mae'],
                    'rmse': prophet_info['rmse']
                })
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        metrics_df = pd.DataFrame(all_metrics)
        
        if len(metrics_df) == 0:
            print("‚ùå –ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return None
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–æ–¥–µ–ª—è–º
        print(f"\n  üìà –°–†–ï–î–ù–ò–ï –ú–ï–¢–†–ò–ö–ò –ü–û –ú–û–î–ï–õ–Ø–ú:")
        model_summary = metrics_df.groupby('model').agg({
            'r2': ['mean', 'std'],
            'mae': ['mean', 'std'],
            'rmse': ['mean', 'std']
        }).round(3)
        
        for model in metrics_df['model'].unique():
            model_data = metrics_df[metrics_df['model'] == model]
            avg_r2 = model_data['r2'].mean()
            avg_mae = model_data['mae'].mean()
            avg_rmse = model_data['rmse'].mean()
            
            print(f"    {model}:")
            print(f"      R¬≤: {avg_r2:.3f} ¬± {model_data['r2'].std():.3f}")
            print(f"      MAE: {avg_mae:,.0f} ¬± {model_data['mae'].std():,.0f}")
            print(f"      RMSE: {avg_rmse:,.0f} ¬± {model_data['rmse'].std():,.0f}")
        
        # –õ—É—á—à–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        print(f"\n  üèÜ –õ–£–ß–®–ò–ï –ú–û–î–ï–õ–ò –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
        for region in metrics_df['region'].unique():
            region_data = metrics_df[metrics_df['region'] == region]
            best_model = region_data.loc[region_data['r2'].idxmax()]
            print(f"    {region}: {best_model['model']} (R¬≤={best_model['r2']:.3f})")
        
        return metrics_df
    
    def save_comparison_results(self, output_file='Model_Comparison_Results.csv'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not self.forecast_results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return None
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
        all_forecasts = []
        
        for region, region_forecasts in self.forecast_results.items():
            for model_name, model_forecast in region_forecasts.items():
                for i, (period, value) in enumerate(zip(model_forecast['periods'], model_forecast['values'])):
                    all_forecasts.append({
                        'region': region,
                        'model': model_name,
                        'year': period['year'],
                        'month': period['month'],
                        'forecast_revenue': value
                    })
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        results_df = pd.DataFrame(all_forecasts)
        results_df.to_csv(output_file, index=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}")
        
        return results_df

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
    print("üî¨ –°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    print("–ú–æ–¥–µ–ª–∏: Linear Regression, Ridge, Lasso, Random Forest, XGBoost, Prophet")
    print("="*60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    comparator = ModelComparison('Marketing Budjet Emulation - raw2.csv')
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    comparator.load_and_clean_data()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    comparator.prepare_aggregated_data()
    
    # –û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    comparator.train_all_models()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    comparator.create_forecasts()
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    comparator.compare_models()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    comparator.save_comparison_results()
    
    print(f"\nüéâ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()

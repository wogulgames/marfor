#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ revenue_total —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –∞–≤–≥—É—Å—Ç–∞ 2025 –≥–æ–¥–∞
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

class RevenueOnlyForecaster:
    def __init__(self, csv_file=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤—â–∏–∫–∞ —Ç–æ–ª—å–∫–æ revenue_total"""
        self.csv_file = csv_file
        self.df = None
        self.train_df = None
        self.test_df = None
        self.model = None
        self.scaler = None
        self.model_metrics = {}
        self.is_model_validated = False
        
    def load_and_analyze_data(self, csv_file=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        if csv_file:
            self.csv_file = csv_file
            
        if not self.csv_file:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            
        print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.csv_file}...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        separators = [',', ';', '\t', '|']
        for sep in separators:
            try:
                self.df = pd.read_csv(self.csv_file, sep=sep)
                if len(self.df.columns) > 1:
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}': {len(self.df)} –∑–∞–ø–∏—Å–µ–π, {len(self.df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
                    break
            except:
                continue
        
        if self.df is None or len(self.df.columns) <= 1:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º")
            return None
        
        return self.df
    
    def clean_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüßπ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•:")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        for col in ['year', 'month']:
            if col in self.df.columns:
                self.df[col] = pd.to_numeric(self.df[col], errors='coerce')
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        initial_count = len(self.df)
        self.df = self.df.dropna(subset=['year', 'month'])
        print(f"  –£–¥–∞–ª–µ–Ω–æ {initial_count - len(self.df)} –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –û—á–∏—Å—Ç–∫–∞ revenue_total
        if 'revenue_total' in self.df.columns:
            self.df['revenue_total'] = self.df['revenue_total'].astype(str).str.replace(',', '').str.replace(' ', '')
            self.df['revenue_total'] = pd.to_numeric(self.df['revenue_total'], errors='coerce')
            self.df['revenue_total'] = self.df['revenue_total'].fillna(0)
        
        print(f"  –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(self.df)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        print(f"\nüìÖ –í–†–ï–ú–ï–ù–ù–û–ô –î–ò–ê–ü–ê–ó–û–ù:")
        print(f"  –° {self.df['year'].min()}.{self.df['month'].min():02d} –ø–æ {self.df['year'].max()}.{self.df['month'].max():02d}")
        
        # –ê–Ω–∞–ª–∏–∑ revenue_total
        if 'revenue_total' in self.df.columns:
            print(f"\nüìà –ê–ù–ê–õ–ò–ó REVENUE_TOTAL:")
            revenue_stats = self.df['revenue_total'].describe()
            print(f"  –°—Ä–µ–¥–Ω–µ–µ: {revenue_stats['mean']:,.0f} ‚ÇΩ")
            print(f"  –ú–µ–¥–∏–∞–Ω–∞: {revenue_stats['50%']:,.0f} ‚ÇΩ")
            print(f"  –ú–∞–∫—Å–∏–º—É–º: {revenue_stats['max']:,.0f} ‚ÇΩ")
            print(f"  –ù–µ–Ω—É–ª–µ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {(self.df['revenue_total'] > 0).sum()}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
            period_stats = self.df.groupby(['year', 'month'])['revenue_total'].agg(['count', 'sum', 'mean']).round(0)
            print(f"  –í—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {len(period_stats)}")
            print(f"  –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {period_stats['sum'].mean():,.0f} ‚ÇΩ")
    
    def split_data_properly(self, train_end_year=2024, train_end_month=12, 
                           test_start_year=2025, test_start_month=1, test_end_month=8):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏"""
        print(f"\n‚úÇÔ∏è –ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ê–ó–î–ï–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•:")
        print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: –¥–æ {train_end_year}.{train_end_month:02d}")
        print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {test_start_year}.{test_start_month:02d} - {test_start_year}.{test_end_month:02d}")
        print(f"  ‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ —Å {test_start_year}.{test_end_month+1:02d} - —ç—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        
        # –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞ (–¥–æ –¥–µ–∫–∞–±—Ä—è 2024)
        train_mask = (
            (self.df['year'] < train_end_year) | 
            ((self.df['year'] == train_end_year) & (self.df['month'] <= train_end_month))
        )
        self.train_df = self.df[train_mask].copy()
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞ (—è–Ω–≤–∞—Ä—å-–∞–≤–≥—É—Å—Ç 2025) - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_mask = (
            (self.df['year'] == test_start_year) & 
            (self.df['month'] >= test_start_month) & 
            (self.df['month'] <= test_end_month)
        )
        self.test_df = self.df[test_mask].copy()
        
        print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(self.train_df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(self.test_df)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        if 'revenue_total' in self.train_df.columns:
            train_revenue = self.train_df['revenue_total'].sum()
            test_revenue = self.test_df['revenue_total'].sum()
            
            print(f"\nüí∞ –ê–ù–ê–õ–ò–ó REVENUE_TOTAL –ü–û –í–´–ë–û–†–ö–ê–ú:")
            print(f"  –í—ã—Ä—É—á–∫–∞ –≤ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ: {train_revenue:,.0f} ‚ÇΩ")
            print(f"  –í—ã—Ä—É—á–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: {test_revenue:,.0f} ‚ÇΩ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if len(self.train_df) < 100:
                print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ ({len(self.train_df)} –∑–∞–ø–∏—Å–µ–π)")
            if len(self.test_df) < 50:
                print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ ({len(self.test_df)} –∑–∞–ø–∏—Å–µ–π)")
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
            print(f"\nüìÖ –í–†–ï–ú–ï–ù–ù–û–ï –ü–û–ö–†–´–¢–ò–ï:")
            if len(self.train_df) > 0:
                train_start = f"{self.train_df['year'].min()}.{self.train_df['month'].min():02d}"
                train_end = f"{self.train_df['year'].max()}.{self.train_df['month'].max():02d}"
                print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {train_start} - {train_end}")
            
            if len(self.test_df) > 0:
                test_start = f"{self.test_df['year'].min()}.{self.test_df['month'].min():02d}"
                test_end = f"{self.test_df['year'].max()}.{self.test_df['month'].max():02d}"
                print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {test_start} - {test_end}")
    
    def prepare_time_features(self, df):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        df = df.copy()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å
        df['time_index'] = (df['year'] - df['year'].min()) * 12 + (df['month'] - 1)
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if 'month' in df.columns:
            df['month_sin'] = np.sin(2 * np.pi * df['month'] / 12)
            df['month_cos'] = np.cos(2 * np.pi * df['month'] / 12)
            
            # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ dummy –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            df['quarter'] = ((df['month'] - 1) // 3) + 1
            for q in range(1, 5):
                df[f'q{q}'] = (df['quarter'] == q).astype(int)
        
        # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        if 'month' in df.columns:
            df['holiday_period'] = (
                (df['month'] == 12) |  # –î–µ–∫–∞–±—Ä—å
                (df['month'] == 1) |   # –Ø–Ω–≤–∞—Ä—å
                (df['month'] == 2) |   # –§–µ–≤—Ä–∞–ª—å
                (df['month'] == 3) |   # –ú–∞—Ä—Ç
                (df['month'] == 5)     # –ú–∞–π
            ).astype(int)
        
        return df
    
    def check_assumptions(self, X, y, model_name="Model"):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏"""
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–ü–û–õ–û–ñ–ï–ù–ò–ô –õ–ò–ù–ï–ô–ù–û–ô –†–ï–ì–†–ï–°–°–ò–ò –¥–ª—è {model_name}:")
        
        # 1. –õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
        print(f"  1. –õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å:")
        for feature in X.columns:
            if len(X[feature].unique()) > 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏—è
                corr = X[feature].corr(y)
                print(f"    {feature}: –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è = {corr:.3f}")
        
        # 2. –ù–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        print(f"  2. –ù–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        for feature in X.columns:
            if len(X[feature].unique()) > 1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏
                skewness = X[feature].skew()
                print(f"    {feature}: –∞—Å–∏–º–º–µ—Ç—Ä–∏—è = {skewness:.3f} {'(–Ω–æ—Ä–º–∞–ª—å–Ω–æ)' if abs(skewness) < 0.5 else '(–Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)'}")
        
        # 3. –ú—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç—å (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏)
        print(f"  3. –ú—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç—å:")
        corr_matrix = X.corr()
        high_corr_pairs = []
        for i in range(len(corr_matrix.columns)):
            for j in range(i+1, len(corr_matrix.columns)):
                corr_val = abs(corr_matrix.iloc[i, j])
                if corr_val > 0.7:  # –í—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
                    high_corr_pairs.append((corr_matrix.columns[i], corr_matrix.columns[j], corr_val))
        
        if high_corr_pairs:
            print(f"    ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –≤—ã—Å–æ–∫–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:")
            for feat1, feat2, corr in high_corr_pairs:
                print(f"      {feat1} - {feat2}: {corr:.3f}")
        else:
            print(f"    ‚úÖ –ú—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    def train_and_validate_models(self):
        """–û–±—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è revenue_total"""
        print(f"\nü§ñ –û–ë–£–ß–ï–ù–ò–ï –ò –í–ê–õ–ò–î–ê–¶–ò–Ø –ú–û–î–ï–õ–ï–ô –î–õ–Ø REVENUE_TOTAL:")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        train_data = self.prepare_time_features(self.train_df)
        train_data = train_data[train_data['revenue_total'] > 0].copy()
        
        if len(train_data) < 30:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ({len(train_data)} –∑–∞–ø–∏—Å–µ–π)")
            return None
        
        print(f"  –î–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(train_data)} –∑–∞–ø–∏—Å–µ–π")
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (—É–±–∏—Ä–∞–µ–º –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω—ã–µ)
        features = ['time_index', 'month_sin', 'month_cos', 'q1', 'q2', 'q3', 'q4', 'holiday_period']
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º X –∏ y
        X_train = train_data[features].fillna(0)
        y_train = train_data['revenue_total']
        
        print(f"  –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {features}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è
        self.check_assumptions(X_train, y_train, "–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        self.scaler = StandardScaler()
        X_train_scaled = self.scaler.fit_transform(X_train)
        
        # –û–±—É—á–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        models = {
            'Linear': LinearRegression(),
            'Ridge': Ridge(alpha=1.0),
            'Lasso': Lasso(alpha=0.1),
            'RandomForest': RandomForestRegressor(n_estimators=100, random_state=42, max_depth=10)
        }
        
        best_model = None
        best_score = -np.inf
        best_model_name = None
        
        for model_name, model in models.items():
            try:
                print(f"\n  üîß –û–±—É—á–µ–Ω–∏–µ {model_name}:")
                
                # –û–±—É—á–µ–Ω–∏–µ
                model.fit(X_train_scaled, y_train)
                
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ
                y_pred_train = model.predict(X_train_scaled)
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ
                train_r2 = r2_score(y_train, y_pred_train)
                train_mae = mean_absolute_error(y_train, y_pred_train)
                train_rmse = np.sqrt(mean_squared_error(y_train, y_pred_train))
                
                print(f"    Train R¬≤: {train_r2:.3f}")
                print(f"    Train MAE: {train_mae:,.0f}")
                print(f"    Train RMSE: {train_rmse:,.0f}")
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
                if len(self.test_df) > 0:
                    test_data = self.prepare_time_features(self.test_df)
                    test_data = test_data[test_data['revenue_total'] > 0].copy()
                    
                    if len(test_data) > 0:
                        X_test = test_data[features].fillna(0)
                        y_test = test_data['revenue_total']
                        X_test_scaled = self.scaler.transform(X_test)
                        
                        y_pred_test = model.predict(X_test_scaled)
                        
                        test_r2 = r2_score(y_test, y_pred_test)
                        test_mae = mean_absolute_error(y_test, y_pred_test)
                        test_rmse = np.sqrt(mean_squared_error(y_test, y_pred_test))
                        
                        print(f"    Test R¬≤: {test_r2:.3f}")
                        print(f"    Test MAE: {test_mae:,.0f}")
                        print(f"    Test RMSE: {test_rmse:,.0f}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
                        overfitting = train_r2 - test_r2
                        if overfitting > 0.1:
                            print(f"    ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ (—Ä–∞–∑–Ω–∏—Ü–∞ R¬≤: {overfitting:.3f})")
                        elif overfitting < -0.1:
                            print(f"    ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ–µ –Ω–µ–¥–æ–æ–±—É—á–µ–Ω–∏–µ (—Ä–∞–∑–Ω–∏—Ü–∞ R¬≤: {overfitting:.3f})")
                        else:
                            print(f"    ‚úÖ –ú–æ–¥–µ–ª—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        self.model_metrics[model_name] = {
                            'train_r2': train_r2,
                            'test_r2': test_r2,
                            'train_mae': train_mae,
                            'test_mae': test_mae,
                            'train_rmse': train_rmse,
                            'test_rmse': test_rmse,
                            'overfitting': overfitting
                        }
                        
                        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å —Å –ª—É—á—à–∏–º R¬≤ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
                        if test_r2 > best_score:
                            best_score = test_r2
                            best_model = model
                            best_model_name = model_name
                    else:
                        print(f"    ‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                else:
                    print(f"    ‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏")
                    
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ {model_name}: {e}")
                continue
        
        if best_model is not None:
            self.model = best_model
            print(f"\n  üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model_name} (Test R¬≤ = {best_score:.3f})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ª–∏–Ω–µ–π–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            if hasattr(best_model, 'coef_'):
                print(f"\n  üìä –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ –ú–û–î–ï–õ–ò:")
                for feature, coef in zip(features, best_model.coef_):
                    print(f"    {feature}: {coef:.2f}")
                print(f"    Intercept: {best_model.intercept_:.2f}")
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
            self.evaluate_model_quality(best_model_name, best_score)
            
            return {
                'model_name': best_model_name,
                'features': features,
                'test_r2': best_score,
                'train_size': len(train_data),
                'model_metrics': self.model_metrics
            }
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –Ω–∏ –æ–¥–Ω—É –º–æ–¥–µ–ª—å")
            return None
    
    def evaluate_model_quality(self, model_name, test_r2):
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"""
        print(f"\nüìä –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ú–û–î–ï–õ–ò:")
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
        if test_r2 > 0.7:
            quality = "–û–¢–õ–ò–ß–ù–û–ï"
            recommendation = "‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"
        elif test_r2 > 0.5:
            quality = "–•–û–†–û–®–ï–ï"
            recommendation = "‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"
        elif test_r2 > 0.3:
            quality = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–ï"
            recommendation = "‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é"
        elif test_r2 > 0.1:
            quality = "–°–õ–ê–ë–û–ï"
            recommendation = "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"
        else:
            quality = "–û–ß–ï–ù–¨ –°–õ–ê–ë–û–ï"
            recommendation = "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ–ø—Ä–∏–≥–æ–¥–Ω–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"
        
        print(f"  –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏: {quality} (R¬≤ = {test_r2:.3f})")
        print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if model_name in self.model_metrics:
            metrics = self.model_metrics[model_name]
            overfitting = metrics['overfitting']
            
            if abs(overfitting) > 0.2:
                print(f"  ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ–º/–Ω–µ–¥–æ–æ–±—É—á–µ–Ω–∏–µ–º: {overfitting:.3f}")
            
            if metrics['test_mae'] > metrics['train_mae'] * 2:
                print(f"  ‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if test_r2 > 0.3:
            self.is_model_validated = True
            print(f"  ‚úÖ –ú–æ–¥–µ–ª—å –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        else:
            self.is_model_validated = False
            print(f"  ‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    
    def get_validation_summary(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print(f"\nüìã –°–í–û–î–ö–ê –ü–û –í–ê–õ–ò–î–ê–¶–ò–ò:")
        print(f"  –ú–æ–¥–µ–ª—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞: {'‚úÖ –î–ê' if self.is_model_validated else '‚ùå –ù–ï–¢'}")
        
        if self.model_metrics:
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π:")
            for model_name, metrics in self.model_metrics.items():
                print(f"    {model_name}: Train R¬≤={metrics['train_r2']:.3f}, Test R¬≤={metrics['test_r2']:.3f}")
        
        return self.is_model_validated

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ –ü–†–û–ì–†–ê–ú–ú–ê –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –¢–û–õ–¨–ö–û REVENUE_TOTAL")
    print("="*60)
    print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –∞–≤–≥—É—Å—Ç–∞ 2025 –≥–æ–¥–∞")
    print("="*60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    forecaster = RevenueOnlyForecaster('Marketing Budjet Emulation - raw2.csv')
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    forecaster.load_and_analyze_data()
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    forecaster.clean_data()
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    forecaster.split_data_properly()
    
    # –û–±—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    forecaster.train_and_validate_models()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    is_validated = forecaster.get_validation_summary()
    
    if is_validated:
        print(f"\nüéâ –ú–û–î–ï–õ–¨ –ì–û–¢–û–í–ê –î–õ–Ø –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø REVENUE_TOTAL!")
        print(f"   –ú–æ–∂–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–≥–Ω–æ–∑–∞")
    else:
        print(f"\n‚ö†Ô∏è  –ú–û–î–ï–õ–¨ –ù–ï –ì–û–¢–û–í–ê –î–õ–Ø –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø!")
        print(f"   –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥")
    
    print(f"\nüìä –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()

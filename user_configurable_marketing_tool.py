#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã, –ø–æ–ª—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')

# Scikit-learn –º–æ–¥–µ–ª–∏
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

# Prophet
try:
    from prophet import Prophet
    PROPHET_AVAILABLE = True
except ImportError:
    PROPHET_AVAILABLE = False

import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import json
from typing import Dict, List, Tuple, Optional, Any

class UserConfigurableMarketingTool:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        self.df = None
        self.config = {}
        self.channel_dependencies = {}
        self.models = {}
        self.forecasts = {}
        self.simulation_results = {}
        self.budget_impact_models = {}
        
    def setup_configuration_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üîß –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
        print("=" * 50)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π
        if self.df is None:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é load_data()")
            return
        
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö:")
        for i, col in enumerate(self.df.columns):
            print(f"  {i+1}. {col}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
        print(f"\n‚è∞ –ù–ê–°–¢–†–û–ô–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –ü–û–õ–ï–ô:")
        year_field = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –≥–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'year'): ").strip() or 'year'
        month_field = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –º–µ—Å—è—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'month'): ").strip() or 'month'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π
        print(f"\nüìè –ù–ê–°–¢–†–û–ô–ö–ê –ò–ó–ú–ï–†–ï–ù–ò–ô (dimensions):")
        dimensions = {}
        while True:
            dim_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–∏–ª–∏ 'done' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip()
            if dim_name.lower() == 'done':
                break
            if dim_name in self.df.columns:
                dimensions[dim_name] = dim_name
                print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: {dim_name}")
            else:
                print(f"  ‚ùå –ü–æ–ª–µ '{dim_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç—Ä–∏–∫
        print(f"\nüìà –ù–ê–°–¢–†–û–ô–ö–ê –ú–ï–¢–†–ò–ö:")
        metrics = {}
        while True:
            metric_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–∏–ª–∏ 'done' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip()
            if metric_name.lower() == 'done':
                break
            if metric_name in self.df.columns:
                metrics[metric_name] = metric_name
                print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞: {metric_name}")
            else:
                print(f"  ‚ùå –ü–æ–ª–µ '{metric_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        print(f"\nüì∫ –ù–ê–°–¢–†–û–ô–ö–ê –ö–ê–ù–ê–õ–û–í:")
        channels = {}
        while True:
            channel_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–∏–ª–∏ 'done' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip()
            if channel_name.lower() == 'done':
                break
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–∞
            is_paid = input(f"–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª '{channel_name}' –ø–ª–∞—Ç–Ω—ã–º? (y/n): ").strip().lower() == 'y'
            
            # –ü–æ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞
            filter_field = input(f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ '{channel_name}': ").strip()
            if filter_field not in self.df.columns:
                print(f"  ‚ùå –ü–æ–ª–µ '{filter_field}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö")
                continue
            
            # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª–µ '{filter_field}':")
            unique_values = self.df[filter_field].unique()[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            for i, val in enumerate(unique_values):
                print(f"  {i+1}. {val}")
            
            filter_values_input = input(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{channel_name}' (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").strip()
            filter_values = [v.strip() for v in filter_values_input.split(',')]
            
            # –ü–æ–ª–µ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            budget_field = None
            if is_paid:
                budget_field = input(f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{channel_name}': ").strip()
                if budget_field not in self.df.columns:
                    print(f"  ‚ùå –ü–æ–ª–µ '{budget_field}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö")
                    budget_field = None
            
            channels[channel_name] = {
                'is_paid': is_paid,
                'filter_field': filter_field,
                'filter_values': filter_values,
                'budget_field': budget_field
            }
            
            print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: {channel_name} ({'–ø–ª–∞—Ç–Ω—ã–π' if is_paid else '–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π'})")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print(f"\nüîó –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:")
        dependencies = {}
        
        if any(ch['is_paid'] for ch in channels.values()):
            enable_dependencies = input("–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏? (y/n): ").strip().lower() == 'y'
            if enable_dependencies:
                dependencies['enabled'] = True
                cross_influence = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫—Ä–æ—Å—Å-–∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è (0.0-1.0, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.1): ").strip()
                dependencies['cross_channel_influence'] = float(cross_influence) if cross_influence else 0.1
            else:
                dependencies['enabled'] = False
        else:
            dependencies['enabled'] = False
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = {
            "time_fields": {
                "year": year_field,
                "month": month_field
            },
            "dimensions": dimensions,
            "metrics": metrics,
            "channels": channels,
            "dependencies": dependencies
        }
        
        print(f"\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
        self._print_config_summary()
    
    def setup_configuration_from_dict(self, config_dict: Dict):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        print("üîß –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ò–ó –°–õ–û–í–ê–†–Ø:")
        
        self.config = config_dict
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        self._print_config_summary()
    
    def setup_default_configuration(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        print("üîß –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ:")
        
        self.config = {
            "time_fields": {
                "year": "year",
                "month": "month"
            },
            "dimensions": {
                "region": "region_to",
                "subdivision": "subdivision", 
                "category": "category"
            },
            "metrics": {
                "revenue": "revenue_total",
                "traffic": "traffic_total",
                "transactions": "transacitons_total",
                "ads_cost": "ads_cost",
                "first_traffic": "first_traffic",
                "repeat_traffic": "repeat_traffic",
                "first_transactions": "first_transactions",
                "repeat_transactions": "repeat_transactions"
            },
            "channels": {
                "paid_apps": {
                    "is_paid": True,
                    "filter_field": "subdivision",
                    "filter_values": ["paid_apps"],
                    "budget_field": "ads_cost"
                },
                "paid_web": {
                    "is_paid": True,
                    "filter_field": "subdivision",
                    "filter_values": ["paid_web"],
                    "budget_field": "ads_cost"
                },
                "organic_apps": {
                    "is_paid": False,
                    "filter_field": "subdivision",
                    "filter_values": ["organic_apps"],
                    "budget_field": None
                },
                "organic_web": {
                    "is_paid": False,
                    "filter_field": "subdivision",
                    "filter_values": ["organic_web"],
                    "budget_field": None
                },
                "brand": {
                    "is_paid": False,
                    "filter_field": "subdivision",
                    "filter_values": ["brand"],
                    "budget_field": None
                }
            },
            "dependencies": {
                "enabled": True,
                "cross_channel_influence": 0.1
            }
        }
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        self._print_config_summary()
    
    def _print_config_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print(f"\nüìã –°–í–û–î–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
        print(f"  –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {list(self.config['time_fields'].values())}")
        print(f"  –ò–∑–º–µ—Ä–µ–Ω–∏—è: {list(self.config['dimensions'].values())}")
        print(f"  –ú–µ—Ç—Ä–∏–∫–∏: {list(self.config['metrics'].values())}")
        print(f"  –ö–∞–Ω–∞–ª—ã: {list(self.config['channels'].keys())}")
        print(f"  –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {'–í–∫–ª—é—á–µ–Ω—ã' if self.config['dependencies']['enabled'] else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        print(f"\n  üì∫ –î–ï–¢–ê–õ–ò –ö–ê–ù–ê–õ–û–í:")
        for channel_name, channel_config in self.config['channels'].items():
            channel_type = "–ø–ª–∞—Ç–Ω—ã–π" if channel_config['is_paid'] else "–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π"
            budget_field = channel_config.get('budget_field', '–Ω–µ—Ç')
            print(f"    {channel_name}: {channel_type}, –±—é–¥–∂–µ—Ç: {budget_field}")
    
    def load_data(self, csv_file: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüìÅ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó {csv_file}:")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        separators = [',', ';', '\t', '|']
        for sep in separators:
            try:
                self.df = pd.read_csv(csv_file, sep=sep)
                if len(self.df.columns) > 1:
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}': {len(self.df)} –∑–∞–ø–∏—Å–µ–π, {len(self.df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
                    break
            except:
                continue
        
        if self.df is None or len(self.df.columns) <= 1:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º")
            return False
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self._clean_data()
        return True
    
    def _clean_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüßπ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•:")
        
        initial_count = len(self.df)
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π (–µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
        if self.config:
            for field in self.config['time_fields'].values():
                if field in self.df.columns:
                    self.df[field] = pd.to_numeric(self.df[field], errors='coerce')
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            time_cols = list(self.config['time_fields'].values())
            self.df = self.df.dropna(subset=time_cols)
            
            # –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫
            for metric in self.config['metrics'].values():
                if metric in self.df.columns:
                    self.df[metric] = self.df[metric].astype(str).str.replace(',', '').str.replace(' ', '')
                    self.df[metric] = pd.to_numeric(self.df[metric], errors='coerce')
                    self.df[metric] = self.df[metric].fillna(0)
        
        print(f"  –£–¥–∞–ª–µ–Ω–æ {initial_count - len(self.df)} –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        print(f"  –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(self.df)} –∑–∞–ø–∏—Å–µ–π")
    
    def identify_channels(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print(f"\nüîç –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–û–í:")
        
        if not self.config or 'channels' not in self.config:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ channel_type
        self.df['channel_type'] = 'other'
        
        for channel_name, channel_config in self.config['channels'].items():
            filter_field = channel_config['filter_field']
            filter_values = channel_config['filter_values']
            
            if filter_field in self.df.columns:
                mask = self.df[filter_field].isin(filter_values)
                self.df.loc[mask, 'channel_type'] = channel_name
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
        channel_counts = self.df['channel_type'].value_counts()
        print(f"  üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤:")
        for channel, count in channel_counts.items():
            percentage = (count / len(self.df)) * 100
            print(f"    {channel}: {count} –∑–∞–ø–∏—Å–µ–π ({percentage:.1f}%)")
    
    def analyze_channel_dependencies(self):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏"""
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ú–ï–ñ–î–£ –ö–ê–ù–ê–õ–ê–ú–ò:")
        
        if not self.config['dependencies']['enabled']:
            print("  ‚ö†Ô∏è  –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        paid_channels = [name for name, config in self.config['channels'].items() if config['is_paid']]
        
        if not paid_channels:
            print("  ‚ö†Ô∏è  –ù–µ—Ç –ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return
        
        print(f"  üìä –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ë–Æ–î–ñ–ï–¢–ê –ù–ê –¢–†–ê–§–ò–ö:")
        
        for channel_name in paid_channels:
            channel_config = self.config['channels'][channel_name]
            budget_field = channel_config.get('budget_field')
            
            if not budget_field or budget_field not in self.df.columns:
                print(f"    ‚ö†Ô∏è  –ü–æ–ª–µ –±—é–¥–∂–µ—Ç–∞ '{budget_field}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
            channel_data = self.df[self.df['channel_type'] == channel_name]
            
            if len(channel_data) < 10:
                print(f"    ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}")
                continue
            
            print(f"    üìä –ö–∞–Ω–∞–ª {channel_name}:")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ —Ç—Ä–∞—Ñ–∏–∫
            traffic_fields = ['first_traffic', 'repeat_traffic', 'traffic_total']
            
            for traffic_field in traffic_fields:
                if traffic_field in channel_data.columns:
                    correlation = channel_data[budget_field].corr(channel_data[traffic_field])
                    print(f"      {traffic_field}: –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å {budget_field} = {correlation:.3f}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                    if channel_name not in self.channel_dependencies:
                        self.channel_dependencies[channel_name] = {}
                    
                    self.channel_dependencies[channel_name][traffic_field] = {
                        'budget_correlation': correlation,
                        'data_points': len(channel_data)
                    }
        
        # –ê–Ω–∞–ª–∏–∑ –∫—Ä–æ—Å—Å-–∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è
        self._analyze_cross_channel_influence()
    
    def _analyze_cross_channel_influence(self):
        """–ê–Ω–∞–ª–∏–∑ –∫—Ä–æ—Å—Å-–∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è"""
        print(f"\n  üìä –ö–†–û–°–°-–ö–ê–ù–ê–õ–¨–ù–û–ï –í–õ–ò–Ø–ù–ò–ï:")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–Ω—ã–µ –∏ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
        paid_channels = [name for name, config in self.config['channels'].items() if config['is_paid']]
        organic_channels = [name for name, config in self.config['channels'].items() if not config['is_paid']]
        
        if not paid_channels or not organic_channels:
            print("    ‚ö†Ô∏è  –ù—É–∂–Ω—ã –∏ –ø–ª–∞—Ç–Ω—ã–µ, –∏ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ—Å—Å-–∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è")
            return
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        time_fields = list(self.config['time_fields'].values())
        
        # –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        paid_data = self.df[self.df['channel_type'].isin(paid_channels)]
        if len(paid_data) > 10:
            paid_agg = paid_data.groupby(time_fields).agg({
                metric: 'sum' for metric in self.config['metrics'].values() 
                if metric in paid_data.columns
            }).reset_index()
            
            # –î–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
            organic_data = self.df[self.df['channel_type'].isin(organic_channels)]
            if len(organic_data) > 10:
                organic_agg = organic_data.groupby(time_fields).agg({
                    metric: 'sum' for metric in self.config['metrics'].values() 
                    if metric in organic_data.columns
                }).reset_index()
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                merged_data = pd.merge(paid_agg, organic_agg, on=time_fields, suffixes=('_paid', '_organic'))
                
                if len(merged_data) > 5:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                    for paid_channel in paid_channels:
                        paid_config = self.config['channels'][paid_channel]
                        budget_field = paid_config.get('budget_field')
                        
                        if budget_field and f"{budget_field}_paid" in merged_data.columns:
                            print(f"    üìä –í–ª–∏—è–Ω–∏–µ {budget_field} (–ø–ª–∞—Ç–Ω—ã–µ) –Ω–∞ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã:")
                            
                            for metric in ['first_traffic', 'repeat_traffic', 'traffic_total']:
                                if f"{metric}_organic" in merged_data.columns:
                                    correlation = merged_data[f"{budget_field}_paid"].corr(merged_data[f"{metric}_organic"])
                                    print(f"      {metric}: –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è = {correlation:.3f}")
    
    def build_channel_models(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        print(f"\nü§ñ –ü–û–°–¢–†–û–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô –î–õ–Ø –ö–ê–ù–ê–õ–û–í:")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        train_data = self._prepare_training_data()
        
        # –°—Ç—Ä–æ–∏–º –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        for channel_name, channel_config in self.config['channels'].items():
            print(f"\n  üìä –ö–∞–Ω–∞–ª: {channel_name}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–Ω–∞–ª—É
            channel_data = train_data[train_data['channel_type'] == channel_name].copy()
            
            if len(channel_data) == 0:
                print(f"    ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}")
                continue
            
            print(f"    üìà –î–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(channel_data)} –∑–∞–ø–∏—Å–µ–π")
            
            # –°—Ç—Ä–æ–∏–º –º–æ–¥–µ–ª–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∫–∞–Ω–∞–ª–∞
            channel_models = {}
            
            for metric_name, metric_field in self.config['metrics'].items():
                if metric_field in channel_data.columns:
                    print(f"    üîß –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {metric_name} ({metric_field})")
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
                    features = self._prepare_features(channel_data)
                    target = channel_data[metric_field]
                    
                    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
                    model = self._train_model(features, target, metric_name)
                    
                    if model:
                        channel_models[metric_name] = model
                        print(f"      ‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞: R¬≤ = {model['r2']:.3f}")
            
            self.models[channel_name] = channel_models
        
        # –°—Ç—Ä–æ–∏–º –º–æ–¥–µ–ª–∏ –≤–ª–∏—è–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
        self._build_budget_impact_models()
    
    def _prepare_training_data(self) -> pd.DataFrame:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –∞–≤–≥—É—Å—Ç–∞ 2025 –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        time_fields = list(self.config['time_fields'].values())
        if 'year' in time_fields and 'month' in time_fields:
            train_mask = (
                (self.df['year'] < 2025) | 
                ((self.df['year'] == 2025) & (self.df['month'] <= 8))
            )
            return self.df[train_mask].copy()
        else:
            # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            return self.df.copy()
    
    def _prepare_features(self, data: pd.DataFrame) -> pd.DataFrame:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏"""
        features_df = data.copy()
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        time_fields = list(self.config['time_fields'].values())
        if 'year' in features_df.columns and 'month' in features_df.columns:
            features_df['time_index'] = (features_df['year'] - features_df['year'].min()) * 12 + (features_df['month'] - 1)
            features_df['month_sin'] = np.sin(2 * np.pi * features_df['month'] / 12)
            features_df['month_cos'] = np.cos(2 * np.pi * features_df['month'] / 12)
            
            # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            features_df['quarter'] = ((features_df['month'] - 1) // 3) + 1
            for q in range(1, 5):
                features_df[f'q{q}'] = (features_df['quarter'] == q).astype(int)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        for dim_name, dim_field in self.config['dimensions'].items():
            if dim_field in features_df.columns:
                le = LabelEncoder()
                features_df[f'{dim_name}_encoded'] = le.fit_transform(features_df[dim_field].astype(str))
        
        return features_df
    
    def _train_model(self, features: pd.DataFrame, target: pd.Series, metric_name: str) -> Optional[Dict]:
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            numeric_features = features.select_dtypes(include=[np.number]).columns.tolist()
            X = features[numeric_features].fillna(0)
            y = target.fillna(0)
            
            if len(X) == 0 or len(y) == 0:
                return None
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            scaler = StandardScaler()
            X_scaled = scaler.fit_transform(X)
            
            # –û–±—É—á–µ–Ω–∏–µ Random Forest
            model = RandomForestRegressor(n_estimators=100, random_state=42)
            model.fit(X_scaled, y)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            y_pred = model.predict(X_scaled)
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            r2 = r2_score(y, y_pred)
            mae = mean_absolute_error(y, y_pred)
            
            return {
                'model': model,
                'scaler': scaler,
                'features': numeric_features,
                'r2': r2,
                'mae': mae
            }
            
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
            return None
    
    def _build_budget_impact_models(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –≤–ª–∏—è–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ –Ω–∞ —Ç—Ä–∞—Ñ–∏–∫"""
        print(f"\nüí∞ –ü–û–°–¢–†–û–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô –í–õ–ò–Ø–ù–ò–Ø –ë–Æ–î–ñ–ï–¢–ê:")
        
        # –°—Ç—Ä–æ–∏–º –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        paid_channels = [name for name, config in self.config['channels'].items() if config['is_paid']]
        
        for channel_name in paid_channels:
            channel_config = self.config['channels'][channel_name]
            budget_field = channel_config.get('budget_field')
            
            if not budget_field or budget_field not in self.df.columns:
                continue
            
            channel_data = self.df[self.df['channel_type'] == channel_name].copy()
            
            if len(channel_data) > 20:
                print(f"  üìä –ö–∞–Ω–∞–ª {channel_name}: {len(channel_data)} –∑–∞–ø–∏—Å–µ–π")
                
                # –ú–æ–¥–µ–ª—å –≤–ª–∏—è–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ –Ω–∞ —Ç—Ä–∞—Ñ–∏–∫
                traffic_fields = ['first_traffic', 'repeat_traffic', 'traffic_total']
                
                for traffic_field in traffic_fields:
                    if traffic_field in channel_data.columns:
                        X = channel_data[[budget_field]].fillna(0)
                        y = channel_data[traffic_field].fillna(0)
                        
                        if len(X) > 10:
                            model = LinearRegression()
                            model.fit(X, y)
                            y_pred = model.predict(X)
                            r2 = r2_score(y, y_pred)
                            
                            model_key = f'{channel_name}_{budget_field}_to_{traffic_field}'
                            self.budget_impact_models[model_key] = {
                                'model': model,
                                'r2': r2,
                                'coefficient': model.coef_[0],
                                'intercept': model.intercept_,
                                'channel': channel_name,
                                'budget_field': budget_field,
                                'traffic_field': traffic_field
                            }
                            
                            print(f"    ‚úÖ {budget_field} -> {traffic_field}: R¬≤ = {r2:.3f}, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç = {model.coef_[0]:.6f}")
    
    def create_forecast(self, forecast_periods: int = 16):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        print(f"\nüîÆ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ì–ù–û–ó–ê –ù–ê {forecast_periods} –ü–ï–†–ò–û–î–û–í:")
        
        if not self.models:
            print("‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        for channel_name, channel_models in self.models.items():
            print(f"\n  üìä –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel_name}")
            
            channel_forecast = {}
            
            for metric_name, model_info in channel_models.items():
                print(f"    üîÆ –ü—Ä–æ–≥–Ω–æ–∑ {metric_name}")
                
                # –°–æ–∑–¥–∞–µ–º –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã
                future_data = self._create_future_periods(forecast_periods)
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                future_features = self._prepare_features(future_data)
                
                # –ü—Ä–æ–≥–Ω–æ–∑
                forecast_values = self._make_prediction(model_info, future_features)
                
                channel_forecast[metric_name] = {
                    'values': forecast_values,
                    'periods': future_data[['year', 'month']].to_dict('records')
                }
                
                total_forecast = np.sum(forecast_values)
                print(f"      –û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑: {total_forecast:,.0f}")
            
            self.forecasts[channel_name] = channel_forecast
    
    def _create_future_periods(self, periods: int) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—É–¥—É—â–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"""
        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–µ–Ω—Ç—è–±—Ä—è 2025
        start_year, start_month = 2025, 9
        
        periods_data = []
        current_year, current_month = start_year, start_month
        
        for i in range(periods):
            periods_data.append({
                'year': current_year,
                'month': current_month
            })
            
            current_month += 1
            if current_month > 12:
                current_month = 1
                current_year += 1
        
        return pd.DataFrame(periods_data)
    
    def _make_prediction(self, model_info: Dict, features: pd.DataFrame) -> np.ndarray:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            model_features = model_info['features']
            X = features[model_features].fillna(0)
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            X_scaled = model_info['scaler'].transform(X)
            
            # –ü—Ä–æ–≥–Ω–æ–∑
            predictions = model_info['model'].predict(X_scaled)
            
            # –£–±–∏—Ä–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            return np.maximum(predictions, 0)
            
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ: {str(e)}")
            return np.zeros(len(features))
    
    def simulate_budget_scenarios(self, budget_scenarios: List[Dict]):
        """–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –±—é–¥–∂–µ—Ç–∞"""
        print(f"\nüéØ –ú–û–î–ï–õ–ò–†–û–í–ê–ù–ò–ï –°–¶–ï–ù–ê–†–ò–ï–í –ë–Æ–î–ñ–ï–¢–ê:")
        
        if not self.forecasts:
            print("‚ùå –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        for i, scenario in enumerate(budget_scenarios):
            print(f"\n  üìä –°—Ü–µ–Ω–∞—Ä–∏–π {i+1}: {scenario.get('name', f'–°—Ü–µ–Ω–∞—Ä–∏–π {i+1}')}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
            modified_forecast = self._apply_budget_changes(scenario)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            impact_analysis = self._analyze_budget_impact(scenario, modified_forecast)
            
            self.simulation_results[f"scenario_{i+1}"] = {
                'scenario': scenario,
                'modified_forecast': modified_forecast,
                'impact_analysis': impact_analysis
            }
            
            print(f"    üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞: {scenario.get('budget_change', 0):+.1f}%")
            print(f"    üìà –í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—ã—Ä—É—á–∫—É: {impact_analysis.get('revenue_impact', 0):+.1f}%")
    
    def _apply_budget_changes(self, scenario: Dict) -> Dict:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—é–¥–∂–µ—Ç–∞ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É"""
        modified_forecast = {}
        
        for channel_name, channel_forecast in self.forecasts.items():
            modified_channel = {}
            
            for metric_name, metric_forecast in channel_forecast.items():
                values = metric_forecast['values'].copy()
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –ø–æ–ª—è–º –±—é–¥–∂–µ—Ç–∞
                channel_config = self.config['channels'][channel_name]
                budget_field = channel_config.get('budget_field')
                
                if budget_field and metric_name == budget_field and 'budget_change' in scenario:
                    change_factor = 1 + scenario['budget_change'] / 100
                    values = values * change_factor
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ç—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª–∏ –≤–ª–∏—è–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
                if 'budget_change' in scenario:
                    model_key = f'{channel_name}_{budget_field}_to_{metric_name}'
                    if model_key in self.budget_impact_models:
                        model_info = self.budget_impact_models[model_key]
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
                        budget_change = scenario['budget_change'] / 100
                        traffic_change = budget_change * model_info['coefficient']
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É
                        values = values * (1 + traffic_change)
                        
                        print(f"      {metric_name}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ {traffic_change*100:+.1f}% (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {model_info['coefficient']:.6f})")
                
                modified_channel[metric_name] = {
                    'values': values,
                    'periods': metric_forecast['periods']
                }
            
            modified_forecast[channel_name] = modified_channel
        
        return modified_forecast
    
    def _analyze_budget_impact(self, scenario: Dict, modified_forecast: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—é–¥–∂–µ—Ç–∞"""
        impact_analysis = {}
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –±–∞–∑–æ–≤—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º
        for channel_name in self.forecasts.keys():
            if channel_name in modified_forecast:
                for metric_name in self.forecasts[channel_name].keys():
                    if metric_name in modified_forecast[channel_name]:
                        original = np.sum(self.forecasts[channel_name][metric_name]['values'])
                        modified = np.sum(modified_forecast[channel_name][metric_name]['values'])
                        
                        if original > 0:
                            change_pct = (modified - original) / original * 100
                            impact_analysis[f"{channel_name}_{metric_name}"] = change_pct
        
        # –û–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—ã—Ä—É—á–∫—É
        total_original_revenue = 0
        total_modified_revenue = 0
        
        for channel_name in self.forecasts.keys():
            if 'revenue' in self.forecasts[channel_name]:
                total_original_revenue += np.sum(self.forecasts[channel_name]['revenue']['values'])
            if channel_name in modified_forecast and 'revenue' in modified_forecast[channel_name]:
                total_modified_revenue += np.sum(modified_forecast[channel_name]['revenue']['values'])
        
        if total_original_revenue > 0:
            impact_analysis['revenue_impact'] = (total_modified_revenue - total_original_revenue) / total_original_revenue * 100
        
        return impact_analysis
    
    def generate_report(self, output_file: str = 'User_Configurable_Marketing_Report.txt'):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print(f"\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê:")
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("–û–¢–ß–ï–¢ –ü–û –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Æ –ú–ê–†–ö–ï–¢–ò–ù–ì–ê (–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–´–ô)\n")
            f.write("=" * 70 + "\n\n")
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            f.write("–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:\n")
            f.write(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {list(self.config['time_fields'].values())}\n")
            f.write(f"–ò–∑–º–µ—Ä–µ–Ω–∏—è: {list(self.config['dimensions'].values())}\n")
            f.write(f"–ú–µ—Ç—Ä–∏–∫–∏: {list(self.config['metrics'].values())}\n")
            f.write(f"–ö–∞–Ω–∞–ª—ã: {list(self.config['channels'].keys())}\n\n")
            
            # –î–µ—Ç–∞–ª–∏ –∫–∞–Ω–∞–ª–æ–≤
            f.write("–î–ï–¢–ê–õ–ò –ö–ê–ù–ê–õ–û–í:\n")
            for channel_name, channel_config in self.config['channels'].items():
                channel_type = "–ø–ª–∞—Ç–Ω—ã–π" if channel_config['is_paid'] else "–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π"
                budget_field = channel_config.get('budget_field', '–Ω–µ—Ç')
                f.write(f"{channel_name}: {channel_type}, –±—é–¥–∂–µ—Ç: {budget_field}\n")
            f.write("\n")
            
            # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if self.channel_dependencies:
                f.write("–ó–ê–í–ò–°–ò–ú–û–°–¢–ò –ú–ï–ñ–î–£ –ö–ê–ù–ê–õ–ê–ú–ò:\n")
                for channel, deps in self.channel_dependencies.items():
                    f.write(f"\n–ö–∞–Ω–∞–ª {channel}:\n")
                    if isinstance(deps, dict):
                        for metric, metric_deps in deps.items():
                            if isinstance(metric_deps, dict) and 'budget_correlation' in metric_deps:
                                f.write(f"  {metric}: –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –±—é–¥–∂–µ—Ç–æ–º = {metric_deps['budget_correlation']:.3f}\n")
                f.write("\n")
            
            # –ú–æ–¥–µ–ª–∏ –≤–ª–∏—è–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
            if self.budget_impact_models:
                f.write("–ú–û–î–ï–õ–ò –í–õ–ò–Ø–ù–ò–Ø –ë–Æ–î–ñ–ï–¢–ê:\n")
                for model_name, model_info in self.budget_impact_models.items():
                    f.write(f"{model_name}: R¬≤ = {model_info['r2']:.3f}, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç = {model_info['coefficient']:.6f}\n")
                f.write("\n")
            
            # –ü—Ä–æ–≥–Ω–æ–∑—ã
            if self.forecasts:
                f.write("–ü–†–û–ì–ù–û–ó–´:\n")
                for channel_name, channel_forecast in self.forecasts.items():
                    f.write(f"\n–ö–∞–Ω–∞–ª: {channel_name}\n")
                    for metric_name, metric_forecast in channel_forecast.items():
                        total = np.sum(metric_forecast['values'])
                        f.write(f"  {metric_name}: {total:,.0f}\n")
                f.write("\n")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.simulation_results:
                f.write("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–û–î–ï–õ–ò–†–û–í–ê–ù–ò–Ø:\n")
                for scenario_name, results in self.simulation_results.items():
                    f.write(f"\n{scenario_name}:\n")
                    f.write(f"  –°—Ü–µ–Ω–∞—Ä–∏–π: {results['scenario']}\n")
                    f.write(f"  –í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—ã—Ä—É—á–∫—É: {results['impact_analysis'].get('revenue_impact', 0):+.1f}%\n")
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
    
    def save_results(self, output_file: str = 'User_Configurable_Marketing_Results.csv'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.forecasts:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
        all_results = []
        
        for channel_name, channel_forecast in self.forecasts.items():
            for metric_name, metric_forecast in channel_forecast.items():
                for i, (period, value) in enumerate(zip(metric_forecast['periods'], metric_forecast['values'])):
                    all_results.append({
                        'channel': channel_name,
                        'metric': metric_name,
                        'year': period['year'],
                        'month': period['month'],
                        'forecast_value': value
                    })
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        results_df = pd.DataFrame(all_results)
        results_df.to_csv(output_file, index=False)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–´–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢ –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –ú–ê–†–ö–ï–¢–ò–ù–ì–ê")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    tool = UserConfigurableMarketingTool()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if not tool.load_data('Marketing Budjet Emulation - raw2.csv'):
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    tool.setup_default_configuration()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
    tool.identify_channels()
    
    # –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    tool.analyze_channel_dependencies()
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∫–∞–Ω–∞–ª–æ–≤
    tool.build_channel_models()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
    tool.create_forecast()
    
    # –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –±—é–¥–∂–µ—Ç–∞
    budget_scenarios = [
        {'name': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ 20%', 'budget_change': 20},
        {'name': '–£–º–µ–Ω—å—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ 10%', 'budget_change': -10},
        {'name': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ 50%', 'budget_change': 50}
    ]
    tool.simulate_budget_scenarios(budget_scenarios)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    tool.generate_report()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    tool.save_results()
    
    print(f"\nüéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()

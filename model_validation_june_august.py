#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –Ω–∞ –ø–µ—Ä–∏–æ–¥–µ –∏—é–Ω—å-–∞–≤–≥—É—Å—Ç 2025
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')

# Scikit-learn –º–æ–¥–µ–ª–∏
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

# Prophet
try:
    from prophet import Prophet
    PROPHET_AVAILABLE = True
except ImportError:
    PROPHET_AVAILABLE = False
    print("‚ö†Ô∏è  Prophet –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

class ModelValidation:
    def __init__(self, csv_file=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π"""
        self.csv_file = csv_file
        self.df = None
        self.aggregated_df = None
        self.train_data = None
        self.test_data = None
        self.models = {}
        self.forecasts = {}
        self.validation_results = {}
        
    def load_and_clean_data(self, csv_file=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if csv_file:
            self.csv_file = csv_file
            
        if not self.csv_file:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            
        print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.csv_file}...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        separators = [',', ';', '\t', '|']
        for sep in separators:
            try:
                self.df = pd.read_csv(self.csv_file, sep=sep)
                if len(self.df.columns) > 1:
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}': {len(self.df)} –∑–∞–ø–∏—Å–µ–π, {len(self.df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
                    break
            except:
                continue
        
        if self.df is None or len(self.df.columns) <= 1:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º")
            return None
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüßπ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•:")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        for col in ['year', 'month']:
            if col in self.df.columns:
                self.df[col] = pd.to_numeric(self.df[col], errors='coerce')
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        initial_count = len(self.df)
        self.df = self.df.dropna(subset=['year', 'month'])
        print(f"  –£–¥–∞–ª–µ–Ω–æ {initial_count - len(self.df)} –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –û—á–∏—Å—Ç–∫–∞ revenue_total
        if 'revenue_total' in self.df.columns:
            self.df['revenue_total'] = self.df['revenue_total'].astype(str).str.replace(',', '').str.replace(' ', '')
            self.df['revenue_total'] = pd.to_numeric(self.df['revenue_total'], errors='coerce')
            self.df['revenue_total'] = self.df['revenue_total'].fillna(0)
        
        print(f"  –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(self.df)} –∑–∞–ø–∏—Å–µ–π")
        return self.df
    
    def prepare_aggregated_data(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüìö –ü–û–î–ì–û–¢–û–í–ö–ê –ê–ì–†–ï–ì–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –º–µ—Å—è—Ü–∞–º
        if 'region_to' in self.df.columns and 'revenue_total' in self.df.columns:
            self.aggregated_df = self.df.groupby(['year', 'month', 'region_to'])['revenue_total'].agg([
                'sum', 'mean', 'count', 'std'
            ]).reset_index()
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            self.aggregated_df.columns = ['year', 'month', 'region_to', 'total_revenue', 'avg_revenue', 'count', 'std_revenue']
            
            print(f"  –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ {len(self.aggregated_df)} –∑–∞–ø–∏—Å–µ–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            total_revenue = self.aggregated_df['total_revenue'].sum()
            print(f"  –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} ‚ÇΩ")
            
            return self.aggregated_df
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏")
            return None
    
    def split_data(self, train_end_year=2025, train_end_month=5, test_start_year=2025, test_start_month=6, test_end_month=8):
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏"""
        print(f"\nüìä –†–ê–ó–î–ï–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•:")
        print(f"  –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: –¥–æ {train_end_year}.{train_end_month:02d}")
        print(f"  –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_start_year}.{test_start_month:02d} - {test_start_year}.{test_end_month:02d}")
        
        # –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ –º–∞—è 2025)
        train_mask = (
            (self.aggregated_df['year'] < train_end_year) | 
            ((self.aggregated_df['year'] == train_end_year) & (self.aggregated_df['month'] <= train_end_month))
        )
        self.train_data = self.aggregated_df[train_mask].copy()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏—é–Ω—å-–∞–≤–≥—É—Å—Ç 2025)
        test_mask = (
            (self.aggregated_df['year'] == test_start_year) & 
            (self.aggregated_df['month'] >= test_start_month) & 
            (self.aggregated_df['month'] <= test_end_month)
        )
        self.test_data = self.aggregated_df[test_mask].copy()
        
        print(f"  –û–±—É—á–∞—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(self.train_data)}")
        print(f"  –¢–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(self.test_data)}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        train_revenue = self.train_data['total_revenue'].sum()
        print(f"  –í—ã—Ä—É—á–∫–∞ –≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {train_revenue:,.0f} ‚ÇΩ")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if len(self.test_data) > 0:
            test_revenue = self.test_data['total_revenue'].sum()
            print(f"  –í—ã—Ä—É—á–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {test_revenue:,.0f} ‚ÇΩ")
        else:
            print("  ‚ö†Ô∏è  –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    
    def prepare_features_for_sklearn(self, data):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è scikit-learn –º–æ–¥–µ–ª–µ–π"""
        data = data.copy()
        data = data.sort_values(['year', 'month'])
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å
        data['time_index'] = (data['year'] - data['year'].min()) * 12 + (data['month'] - 1)
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        data['month_sin'] = np.sin(2 * np.pi * data['month'] / 12)
        data['month_cos'] = np.cos(2 * np.pi * data['month'] / 12)
        
        # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        data['quarter'] = ((data['month'] - 1) // 3) + 1
        for q in range(1, 5):
            data[f'q{q}'] = (data['quarter'] == q).astype(int)
        
        # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        data['holiday_period'] = (
            (data['month'] == 12) |  # –î–µ–∫–∞–±—Ä—å
            (data['month'] == 1) |   # –Ø–Ω–≤–∞—Ä—å
            (data['month'] == 2) |   # –§–µ–≤—Ä–∞–ª—å
            (data['month'] == 3) |   # –ú–∞—Ä—Ç
            (data['month'] == 5)     # –ú–∞–π
        ).astype(int)
        
        # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        data['time_squared'] = data['time_index'] ** 2
        data['time_cubed'] = data['time_index'] ** 3
        
        return data
    
    def prepare_features_for_prophet(self, data):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Prophet"""
        prophet_data = data.copy()
        prophet_data = prophet_data.sort_values(['year', 'month'])
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É
        prophet_data['ds'] = pd.to_datetime(prophet_data[['year', 'month']].assign(day=1))
        prophet_data['y'] = prophet_data['total_revenue']
        
        return prophet_data[['ds', 'y']]
    
    def train_sklearn_models(self, region_data):
        """–û–±—É—á–µ–Ω–∏–µ scikit-learn –º–æ–¥–µ–ª–µ–π"""
        print(f"  üîß –û–±—É—á–µ–Ω–∏–µ scikit-learn –º–æ–¥–µ–ª–µ–π...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        data = self.prepare_features_for_sklearn(region_data)
        
        # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        features = ['time_index', 'month_sin', 'month_cos', 'q1', 'q2', 'q3', 'q4', 'holiday_period', 'time_squared', 'time_cubed']
        X = data[features].fillna(0)
        y = data['total_revenue']
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        
        models = {
            'Linear Regression': LinearRegression(),
            'Ridge': Ridge(alpha=1.0),
            'Lasso': Lasso(alpha=0.1),
            'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42)
        }
        
        results = {}
        
        for name, model in models.items():
            try:
                # –û–±—É—á–µ–Ω–∏–µ
                model.fit(X_scaled, y)
                y_pred = model.predict(X_scaled)
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                r2 = r2_score(y, y_pred)
                mae = mean_absolute_error(y, y_pred)
                rmse = np.sqrt(mean_squared_error(y, y_pred))
                
                results[name] = {
                    'model': model,
                    'scaler': scaler,
                    'features': features,
                    'train_r2': r2,
                    'train_mae': mae,
                    'train_rmse': rmse
                }
                
                print(f"    {name}: Train R¬≤={r2:.3f}, MAE={mae:,.0f}")
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ {name}: {str(e)}")
                continue
        
        return results
    
    def train_prophet_model(self, region_data):
        """–û–±—É—á–µ–Ω–∏–µ Prophet –º–æ–¥–µ–ª–∏"""
        if not PROPHET_AVAILABLE:
            print("  ‚ö†Ô∏è  Prophet –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        print(f"  üîß –û–±—É—á–µ–Ω–∏–µ Prophet –º–æ–¥–µ–ª–∏...")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Prophet
            prophet_data = self.prepare_features_for_prophet(region_data)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            model = Prophet(
                yearly_seasonality=True,
                weekly_seasonality=False,
                daily_seasonality=False,
                seasonality_mode='multiplicative'
            )
            
            model.fit(prophet_data)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            future = model.make_future_dataframe(periods=0)
            forecast = model.predict(future)
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            y_true = prophet_data['y'].values
            y_pred = forecast['yhat'].values
            
            r2 = r2_score(y_true, y_pred)
            mae = mean_absolute_error(y_true, y_pred)
            rmse = np.sqrt(mean_squared_error(y_true, y_pred))
            
            print(f"    Prophet: Train R¬≤={r2:.3f}, MAE={mae:,.0f}")
            
            return {
                'model': model,
                'train_r2': r2,
                'train_mae': mae,
                'train_rmse': rmse
            }
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ Prophet: {str(e)}")
            return None
    
    def train_all_models(self):
        """–û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        print(f"\nü§ñ –û–ë–£–ß–ï–ù–ò–ï –í–°–ï–• –ú–û–î–ï–õ–ï–ô:")
        
        if self.train_data is None:
            print("‚ùå –ù–µ—Ç –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            return None
        
        for region in self.train_data['region_to'].unique():
            region_data = self.train_data[self.train_data['region_to'] == region].copy()
            
            if len(region_data) > 6:  # –ú–∏–Ω–∏–º—É–º 6 –º–µ—Å—è—Ü–µ–≤ –¥–∞–Ω–Ω—ã—Ö
                print(f"\n  üåç –†–µ–≥–∏–æ–Ω: {region}")
                
                # Scikit-learn –º–æ–¥–µ–ª–∏
                sklearn_results = self.train_sklearn_models(region_data)
                
                # Prophet –º–æ–¥–µ–ª—å
                prophet_result = self.train_prophet_model(region_data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self.models[region] = {
                    'sklearn': sklearn_results,
                    'prophet': prophet_result
                }
    
    def create_forecasts(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥"""
        print(f"\nüîÆ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ì–ù–û–ó–û–í –ù–ê –¢–ï–°–¢–û–í–´–ô –ü–ï–†–ò–û–î:")
        
        if not self.models or self.test_data is None:
            print("‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return None
        
        forecast_results = {}
        
        for region, region_models in self.models.items():
            print(f"\n  üåç –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {region}:")
            
            region_forecasts = {}
            
            # –ü—Ä–æ–≥–Ω–æ–∑—ã scikit-learn –º–æ–¥–µ–ª–µ–π
            if 'sklearn' in region_models:
                for model_name, model_info in region_models['sklearn'].items():
                    try:
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã (–∏—é–Ω—å-–∞–≤–≥—É—Å—Ç 2025)
                        forecast_data = []
                        for month in [6, 7, 8]:  # –∏—é–Ω—å, –∏—é–ª—å, –∞–≤–≥—É—Å—Ç
                            period_data = {
                                'year': 2025,
                                'month': month,
                                'time_index': (2025 - self.train_data['year'].min()) * 12 + (month - 1),
                                'month_sin': np.sin(2 * np.pi * month / 12),
                                'month_cos': np.cos(2 * np.pi * month / 12),
                                'quarter': ((month - 1) // 3) + 1,
                                'holiday_period': 1 if month in [12, 1, 2, 3, 5] else 0
                            }
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                            for q in range(1, 5):
                                period_data[f'q{q}'] = 1 if period_data['quarter'] == q else 0
                            
                            # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                            period_data['time_squared'] = period_data['time_index'] ** 2
                            period_data['time_cubed'] = period_data['time_index'] ** 3
                            
                            forecast_data.append(period_data)
                        
                        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                        forecast_df = pd.DataFrame(forecast_data)
                        features = model_info['features']
                        X_forecast = forecast_df[features].fillna(0)
                        
                        # –ü—Ä–æ–≥–Ω–æ–∑
                        X_forecast_scaled = model_info['scaler'].transform(X_forecast)
                        forecast_values = model_info['model'].predict(X_forecast_scaled)
                        
                        # –£–±–∏—Ä–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        forecast_values = np.maximum(forecast_values, 0)
                        
                        region_forecasts[model_name] = {
                            'values': forecast_values,
                            'periods': forecast_df[['year', 'month']].to_dict('records')
                        }
                        
                        total_forecast = np.sum(forecast_values)
                        print(f"    {model_name}: {total_forecast:,.0f} ‚ÇΩ")
                        
                    except Exception as e:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ {model_name}: {str(e)}")
                        continue
            
            # –ü—Ä–æ–≥–Ω–æ–∑ Prophet
            if 'prophet' in region_models and region_models['prophet'] is not None:
                try:
                    prophet_model = region_models['prophet']['model']
                    
                    # –°–æ–∑–¥–∞–µ–º –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è Prophet (–∏—é–Ω—å-–∞–≤–≥—É—Å—Ç 2025)
                    future_dates = pd.date_range(start='2025-06-01', end='2025-08-01', freq='MS')
                    future_df = pd.DataFrame({'ds': future_dates})
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑
                    forecast = prophet_model.predict(future_df)
                    forecast_values = np.maximum(forecast['yhat'].values, 0)
                    
                    region_forecasts['Prophet'] = {
                        'values': forecast_values,
                        'periods': [{'year': d.year, 'month': d.month} for d in future_dates]
                    }
                    
                    total_forecast = np.sum(forecast_values)
                    print(f"    Prophet: {total_forecast:,.0f} ‚ÇΩ")
                    
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ Prophet: {str(e)}")
                    continue
            
            forecast_results[region] = region_forecasts
        
        self.forecasts = forecast_results
        return forecast_results
    
    def compare_with_actual(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ì–ù–û–ó–û–í –° –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ú–ò –î–ê–ù–ù–´–ú–ò:")
        
        if not self.forecasts or self.test_data is None:
            print("‚ùå –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return None
        
        comparison_results = {}
        
        for region, region_forecasts in self.forecasts.items():
            print(f"\n  üåç –†–µ–≥–∏–æ–Ω: {region}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
            region_actual = self.test_data[self.test_data['region_to'] == region].copy()
            
            if len(region_actual) == 0:
                print(f"    ‚ö†Ô∏è  –ù–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region}")
                continue
            
            region_actual = region_actual.sort_values(['year', 'month'])
            actual_values = region_actual['total_revenue'].values
            actual_total = np.sum(actual_values)
            
            print(f"    üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Ä—É—á–∫–∞: {actual_total:,.0f} ‚ÇΩ")
            
            region_comparison = {}
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª—å—é
            for model_name, model_forecast in region_forecasts.items():
                forecast_values = model_forecast['values']
                forecast_total = np.sum(forecast_values)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                if len(forecast_values) == len(actual_values):
                    # –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                    mae = mean_absolute_error(actual_values, forecast_values)
                    rmse = np.sqrt(mean_squared_error(actual_values, forecast_values))
                    mape = np.mean(np.abs((actual_values - forecast_values) / actual_values)) * 100
                    
                    # –û–±—â–∞—è –æ—à–∏–±–∫–∞
                    total_error = forecast_total - actual_total
                    total_error_pct = (total_error / actual_total * 100) if actual_total > 0 else 0
                    
                    region_comparison[model_name] = {
                        'forecast_total': forecast_total,
                        'actual_total': actual_total,
                        'total_error': total_error,
                        'total_error_pct': total_error_pct,
                        'mae': mae,
                        'rmse': rmse,
                        'mape': mape
                    }
                    
                    print(f"    {model_name}:")
                    print(f"      –ü—Ä–æ–≥–Ω–æ–∑: {forecast_total:,.0f} ‚ÇΩ")
                    print(f"      –û—à–∏–±–∫–∞: {total_error:,.0f} ‚ÇΩ ({total_error_pct:+.1f}%)")
                    print(f"      MAPE: {mape:.1f}%")
                else:
                    print(f"    ‚ö†Ô∏è  {model_name}: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
            
            comparison_results[region] = region_comparison
        
        self.validation_results = comparison_results
        return comparison_results
    
    def summarize_results(self):
        """–°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print(f"\nüìà –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í–ê–õ–ò–î–ê–¶–ò–ò:")
        
        if not self.validation_results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–≤–æ–¥–∫–∏")
            return None
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
        all_metrics = []
        
        for region, region_results in self.validation_results.items():
            for model_name, metrics in region_results.items():
                all_metrics.append({
                    'region': region,
                    'model': model_name,
                    'mape': metrics['mape'],
                    'total_error_pct': metrics['total_error_pct'],
                    'mae': metrics['mae']
                })
        
        if len(all_metrics) == 0:
            print("‚ùå –ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None
        
        metrics_df = pd.DataFrame(all_metrics)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–æ–¥–µ–ª—è–º
        print(f"\n  üìä –°–†–ï–î–ù–ò–ï –ú–ï–¢–†–ò–ö–ò –ü–û –ú–û–î–ï–õ–Ø–ú:")
        
        for model in metrics_df['model'].unique():
            model_data = metrics_df[metrics_df['model'] == model]
            avg_mape = model_data['mape'].mean()
            avg_error_pct = model_data['total_error_pct'].mean()
            avg_mae = model_data['mae'].mean()
            
            print(f"    {model}:")
            print(f"      –°—Ä–µ–¥–Ω–∏–π MAPE: {avg_mape:.1f}%")
            print(f"      –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {avg_error_pct:+.1f}%")
            print(f"      –°—Ä–µ–¥–Ω–∏–π MAE: {avg_mae:,.0f} ‚ÇΩ")
        
        # –õ—É—á—à–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        print(f"\n  üèÜ –õ–£–ß–®–ò–ï –ú–û–î–ï–õ–ò –ü–û –†–ï–ì–ò–û–ù–ê–ú (–ø–æ MAPE):")
        for region in metrics_df['region'].unique():
            region_data = metrics_df[metrics_df['region'] == region]
            best_model = region_data.loc[region_data['mape'].idxmin()]
            print(f"    {region}: {best_model['model']} (MAPE={best_model['mape']:.1f}%)")
        
        # –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π
        print(f"\n  ü•á –û–ë–©–ò–ô –†–ï–ô–¢–ò–ù–ì –ú–û–î–ï–õ–ï–ô (–ø–æ —Å—Ä–µ–¥–Ω–µ–º—É MAPE):")
        model_ranking = metrics_df.groupby('model')['mape'].mean().sort_values()
        for i, (model, mape) in enumerate(model_ranking.items(), 1):
            print(f"    {i}. {model}: MAPE={mape:.1f}%")
        
        return metrics_df
    
    def save_results(self, output_file='Model_Validation_Results.csv'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if not self.validation_results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return None
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_results = []
        
        for region, region_results in self.validation_results.items():
            for model_name, metrics in region_results.items():
                all_results.append({
                    'region': region,
                    'model': model_name,
                    'forecast_total': metrics['forecast_total'],
                    'actual_total': metrics['actual_total'],
                    'total_error': metrics['total_error'],
                    'total_error_pct': metrics['total_error_pct'],
                    'mae': metrics['mae'],
                    'rmse': metrics['rmse'],
                    'mape': metrics['mape']
                })
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        results_df = pd.DataFrame(all_results)
        results_df.to_csv(output_file, index=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}")
        
        return results_df

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π"""
    print("üî¨ –í–ê–õ–ò–î–ê–¶–ò–Ø –ú–û–î–ï–õ–ï–ô –ù–ê –ü–ï–†–ò–û–î–ï –ò–Æ–ù–¨-–ê–í–ì–£–°–¢ 2025")
    print("="*60)
    print("–û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: –¥–æ –º–∞—è 2025")
    print("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –∏—é–Ω—å-–∞–≤–≥—É—Å—Ç 2025")
    print("="*60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    validator = ModelValidation('Marketing Budjet Emulation - raw2.csv')
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    validator.load_and_clean_data()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    validator.prepare_aggregated_data()
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    validator.split_data()
    
    # –û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    validator.train_all_models()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    validator.create_forecasts()
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    validator.compare_with_actual()
    
    # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    validator.summarize_results()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    validator.save_results()
    
    print(f"\nüéâ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Å–∫–∞–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –ø–µ—Ä–∏–æ–¥–µ –æ–∫—Ç—è–±—Ä—å-–¥–µ–∫–∞–±—Ä—å 2025 –≥–æ–¥–∞
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_absolute_error
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

class CascadedForecastValidator:
    def __init__(self, csv_file=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        self.csv_file = csv_file
        self.df = None
        self.aggregated_df = None
        self.region_models = {}
        self.validation_forecast = None
        self.actual_data = None
        
    def load_and_analyze_data(self, csv_file=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        if csv_file:
            self.csv_file = csv_file
            
        if not self.csv_file:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            
        print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.csv_file}...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        separators = [',', ';', '\t', '|']
        for sep in separators:
            try:
                self.df = pd.read_csv(self.csv_file, sep=sep)
                if len(self.df.columns) > 1:
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}': {len(self.df)} –∑–∞–ø–∏—Å–µ–π, {len(self.df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
                    break
            except:
                continue
        
        if self.df is None or len(self.df.columns) <= 1:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º")
            return None
        
        return self.df
    
    def clean_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüßπ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•:")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        for col in ['year', 'month']:
            if col in self.df.columns:
                self.df[col] = pd.to_numeric(self.df[col], errors='coerce')
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        initial_count = len(self.df)
        self.df = self.df.dropna(subset=['year', 'month'])
        print(f"  –£–¥–∞–ª–µ–Ω–æ {initial_count - len(self.df)} –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –û—á–∏—Å—Ç–∫–∞ revenue_total
        if 'revenue_total' in self.df.columns:
            self.df['revenue_total'] = self.df['revenue_total'].astype(str).str.replace(',', '').str.replace(' ', '')
            self.df['revenue_total'] = pd.to_numeric(self.df['revenue_total'], errors='coerce')
            self.df['revenue_total'] = self.df['revenue_total'].fillna(0)
        
        print(f"  –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(self.df)} –∑–∞–ø–∏—Å–µ–π")
    
    def prepare_training_data(self, train_end_year=2025, train_end_month=9):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–æ —Å–µ–Ω—Ç—è–±—Ä—è 2025)"""
        print(f"\nüìö –ü–û–î–ì–û–¢–û–í–ö–ê –û–ë–£–ß–ê–Æ–©–ò–• –î–ê–ù–ù–´–•:")
        print(f"  –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: –¥–æ {train_end_year}.{train_end_month:02d}")
        
        # –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ —Å–µ–Ω—Ç—è–±—Ä—è 2025)
        train_mask = (
            (self.df['year'] < train_end_year) | 
            ((self.df['year'] == train_end_year) & (self.df['month'] <= train_end_month))
        )
        train_df = self.df[train_mask].copy()
        
        print(f"  –û–±—É—á–∞—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(train_df)}")
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –º–µ—Å—è—Ü–∞–º
        if 'region_to' in train_df.columns and 'revenue_total' in train_df.columns:
            self.aggregated_df = train_df.groupby(['year', 'month', 'region_to'])['revenue_total'].agg([
                'sum', 'mean', 'count', 'std'
            ]).reset_index()
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            self.aggregated_df.columns = ['year', 'month', 'region_to', 'total_revenue', 'avg_revenue', 'count', 'std_revenue']
            
            print(f"  –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ {len(self.aggregated_df)} –∑–∞–ø–∏—Å–µ–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            train_revenue = self.aggregated_df['total_revenue'].sum()
            print(f"  –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {train_revenue:,.0f} ‚ÇΩ")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            region_totals = self.aggregated_df.groupby('region_to')['total_revenue'].sum().sort_values(ascending=False)
            print(f"  –í—ã—Ä—É—á–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
            for region, total in region_totals.items():
                print(f"    {region}: {total:,.0f} ‚ÇΩ")
    
    def build_region_models(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nü§ñ –ü–û–°–¢–†–û–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô –î–õ–Ø –†–ï–ì–ò–û–ù–û–í:")
        
        if self.aggregated_df is not None:
            for region in self.aggregated_df['region_to'].unique():
                region_data = self.aggregated_df[self.aggregated_df['region_to'] == region].copy()
                
                if len(region_data) > 6:  # –ú–∏–Ω–∏–º—É–º 6 –º–µ—Å—è—Ü–µ–≤ –¥–∞–Ω–Ω—ã—Ö
                    print(f"\n  üîß –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {region}:")
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    region_data = region_data.sort_values(['year', 'month'])
                    region_data['time_index'] = (region_data['year'] - region_data['year'].min()) * 12 + (region_data['month'] - 1)
                    
                    # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                    region_data['month_sin'] = np.sin(2 * np.pi * region_data['month'] / 12)
                    region_data['month_cos'] = np.cos(2 * np.pi * region_data['month'] / 12)
                    
                    # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                    region_data['quarter'] = ((region_data['month'] - 1) // 3) + 1
                    for q in range(1, 5):
                        region_data[f'q{q}'] = (region_data['quarter'] == q).astype(int)
                    
                    # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
                    region_data['holiday_period'] = (
                        (region_data['month'] == 12) |  # –î–µ–∫–∞–±—Ä—å
                        (region_data['month'] == 1) |   # –Ø–Ω–≤–∞—Ä—å
                        (region_data['month'] == 2) |   # –§–µ–≤—Ä–∞–ª—å
                        (region_data['month'] == 3) |   # –ú–∞—Ä—Ç
                        (region_data['month'] == 5)     # –ú–∞–π
                    ).astype(int)
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º X –∏ y
                    features = ['time_index', 'month_sin', 'month_cos', 'q1', 'q2', 'q3', 'q4', 'holiday_period']
                    X = region_data[features].fillna(0)
                    y = region_data['total_revenue']
                    
                    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                    model = Ridge(alpha=1.0)
                    model.fit(X, y)
                    
                    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    y_pred = model.predict(X)
                    
                    # –ú–µ—Ç—Ä–∏–∫–∏
                    r2 = r2_score(y, y_pred)
                    mae = mean_absolute_error(y, y_pred)
                    
                    print(f"    R¬≤: {r2:.3f}")
                    print(f"    MAE: {mae:,.0f}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
                    self.region_models[region] = {
                        'model': model,
                        'features': features,
                        'r2': r2,
                        'mae': mae,
                        'data': region_data
                    }
                    
                    if r2 > 0.3:
                        print(f"    ‚úÖ –ú–æ–¥–µ–ª—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
                    elif r2 > 0.1:
                        print(f"    ‚ö†Ô∏è  –ú–æ–¥–µ–ª—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
                    else:
                        print(f"    ‚ùå –ú–æ–¥–µ–ª—å —Å–ª–∞–±–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
    
    def create_validation_forecast(self, forecast_year=2025, forecast_months=[10, 11, 12]):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –æ–∫—Ç—è–±—Ä—å-–¥–µ–∫–∞–±—Ä—å 2025"""
        print(f"\nüîÆ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ì–ù–û–ó–ê –ù–ê –ü–ï–†–ò–û–î {forecast_year}.{forecast_months[0]:02d}-{forecast_year}.{forecast_months[-1]:02d}:")
        
        if not self.region_models:
            print("‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å –∏–∑ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        last_year = self.aggregated_df['year'].max()
        last_month = self.aggregated_df['month'].max()
        
        print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {last_year}.{last_month:02d}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        forecast_data = []
        
        for region, model_info in self.region_models.items():
            print(f"\n  üìä –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {region}:")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞
            region_data = model_info['data']
            last_time_index = region_data['time_index'].max()
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            for i, month in enumerate(forecast_months):
                period_data = {
                    'year': forecast_year,
                    'month': month,
                    'region_to': region,
                    'time_index': last_time_index + i + 1,
                    'month_sin': np.sin(2 * np.pi * month / 12),
                    'month_cos': np.cos(2 * np.pi * month / 12),
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                quarter = ((month - 1) // 3) + 1
                for q in range(1, 5):
                    period_data[f'q{q}'] = 1 if quarter == q else 0
                
                # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
                period_data['holiday_period'] = 1 if month in [12, 1, 2, 3, 5] else 0
                
                # –ü—Ä–æ–≥–Ω–æ–∑
                features = model_info['features']
                X_forecast = np.array([period_data[feature] for feature in features]).reshape(1, -1)
                forecast_value = model_info['model'].predict(X_forecast)[0]
                
                period_data['forecast_revenue'] = max(0, forecast_value)  # –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                
                forecast_data.append(period_data)
                
                print(f"    {forecast_year}.{month:02d}: {forecast_value:,.0f} ‚ÇΩ")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
        self.validation_forecast = pd.DataFrame(forecast_data)
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
        total_forecast = self.validation_forecast['forecast_revenue'].sum()
        print(f"\n  üìä –û–ë–©–ò–ô –ü–†–û–ì–ù–û–ó: {total_forecast:,.0f} ‚ÇΩ")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        print(f"\n  üåç –ü–†–û–ì–ù–û–ó –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
        region_forecasts = self.validation_forecast.groupby('region_to')['forecast_revenue'].sum().sort_values(ascending=False)
        for region, forecast in region_forecasts.items():
            print(f"    {region}: {forecast:,.0f} ‚ÇΩ")
        
        return self.validation_forecast
    
    def get_actual_data(self, actual_year=2025, actual_months=[10, 11, 12]):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ –æ–∫—Ç—è–±—Ä—å-–¥–µ–∫–∞–±—Ä—å 2025"""
        print(f"\nüìä –ü–û–õ–£–ß–ï–ù–ò–ï –§–ê–ö–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ó–ê –ü–ï–†–ò–û–î {actual_year}.{actual_months[0]:02d}-{actual_year}.{actual_months[-1]:02d}:")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        actual_mask = (
            (self.df['year'] == actual_year) & 
            (self.df['month'].isin(actual_months))
        )
        actual_df = self.df[actual_mask].copy()
        
        if len(actual_df) == 0:
            print("‚ùå –ù–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return None
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        if 'region_to' in actual_df.columns and 'revenue_total' in actual_df.columns:
            self.actual_data = actual_df.groupby(['year', 'month', 'region_to'])['revenue_total'].sum().reset_index()
            self.actual_data.columns = ['year', 'month', 'region_to', 'actual_revenue']
            
            print(f"  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(self.actual_data)}")
            
            # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            total_actual = self.actual_data['actual_revenue'].sum()
            print(f"  üìä –û–ë–©–ê–Ø –§–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –í–´–†–£–ß–ö–ê: {total_actual:,.0f} ‚ÇΩ")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            print(f"\n  üåç –§–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –í–´–†–£–ß–ö–ê –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
            region_actuals = self.actual_data.groupby('region_to')['actual_revenue'].sum().sort_values(ascending=False)
            for region, actual in region_actuals.items():
                print(f"    {region}: {actual:,.0f} ‚ÇΩ")
            
            return self.actual_data
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            return None
    
    def compare_forecast_vs_actual(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        print(f"\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ì–ù–û–ó–ê –° –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ú–ò –î–ê–ù–ù–´–ú–ò:")
        
        if self.validation_forecast is None or self.actual_data is None:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return None
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        comparison = pd.merge(
            self.validation_forecast[['region_to', 'month', 'forecast_revenue']],
            self.actual_data[['region_to', 'month', 'actual_revenue']],
            on=['region_to', 'month'],
            how='inner'
        )
        
        if len(comparison) == 0:
            print("‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return None
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        region_comparison = comparison.groupby('region_to').agg({
            'forecast_revenue': 'sum',
            'actual_revenue': 'sum'
        }).reset_index()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        region_comparison['error'] = region_comparison['forecast_revenue'] - region_comparison['actual_revenue']
        region_comparison['error_pct'] = (region_comparison['error'] / region_comparison['actual_revenue'] * 100).round(2)
        region_comparison['mape'] = abs(region_comparison['error_pct'])
        
        print(f"  üìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
        for _, row in region_comparison.iterrows():
            print(f"    {row['region_to']}:")
            print(f"      –ü—Ä–æ–≥–Ω–æ–∑: {row['forecast_revenue']:,.0f} ‚ÇΩ")
            print(f"      –§–∞–∫—Ç: {row['actual_revenue']:,.0f} ‚ÇΩ")
            print(f"      –û—à–∏–±–∫–∞: {row['error']:,.0f} ‚ÇΩ ({row['error_pct']:+.1f}%)")
            print(f"      MAPE: {row['mape']:.1f}%")
        
        # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        total_forecast = region_comparison['forecast_revenue'].sum()
        total_actual = region_comparison['actual_revenue'].sum()
        total_error = total_forecast - total_actual
        total_error_pct = (total_error / total_actual * 100) if total_actual > 0 else 0
        mean_mape = region_comparison['mape'].mean()
        
        print(f"\n  üìä –û–ë–©–ò–ï –ú–ï–¢–†–ò–ö–ò:")
        print(f"    –û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑: {total_forecast:,.0f} ‚ÇΩ")
        print(f"    –û–±—â–∏–π —Ñ–∞–∫—Ç: {total_actual:,.0f} ‚ÇΩ")
        print(f"    –û–±—â–∞—è –æ—à–∏–±–∫–∞: {total_error:,.0f} ‚ÇΩ ({total_error_pct:+.1f}%)")
        print(f"    –°—Ä–µ–¥–Ω–∏–π MAPE: {mean_mape:.1f}%")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        if mean_mape < 10:
            quality = "–û–¢–õ–ò–ß–ù–û–ï"
        elif mean_mape < 20:
            quality = "–•–û–†–û–®–ï–ï"
        elif mean_mape < 30:
            quality = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–ï"
        else:
            quality = "–°–õ–ê–ë–û–ï"
        
        print(f"    –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {quality}")
        
        return region_comparison
    
    def save_results(self, output_file='Validation_Results.csv'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if self.validation_forecast is None:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        self.validation_forecast.to_csv(output_file, index=False)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}")
        
        return self.validation_forecast

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("üéØ –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–ê–°–ö–ê–î–ù–û–ô –ú–û–î–ï–õ–ò")
    print("="*60)
    print("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –æ–∫—Ç—è–±—Ä—å-–¥–µ–∫–∞–±—Ä—å 2025 –≥–æ–¥–∞")
    print("="*60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    validator = CascadedForecastValidator('Marketing Budjet Emulation - raw2.csv')
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    validator.load_and_analyze_data()
    validator.clean_data()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–æ —Å–µ–Ω—Ç—è–±—Ä—è 2025)
    validator.prepare_training_data()
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    validator.build_region_models()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ–∫—Ç—è–±—Ä—å-–¥–µ–∫–∞–±—Ä—å 2025
    validator.create_validation_forecast()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    validator.get_actual_data()
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å —Ñ–∞–∫—Ç–æ–º
    validator.compare_forecast_vs_actual()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    validator.save_results()
    
    print(f"\nüéâ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()

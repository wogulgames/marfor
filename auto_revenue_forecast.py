#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è revenue_total —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_absolute_error
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

class AutoRevenueForecaster:
    def __init__(self, csv_file=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤—â–∏–∫–∞ revenue"""
        self.csv_file = csv_file
        self.df = None
        self.forecast_df = None
        self.model = None
        
    def load_and_analyze_data(self, csv_file=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        if csv_file:
            self.csv_file = csv_file
            
        if not self.csv_file:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.csv_file}...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        separators = [',', ';', '\t', '|']
        for sep in separators:
            try:
                self.df = pd.read_csv(self.csv_file, sep=sep)
                if len(self.df.columns) > 1:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏, –∑–Ω–∞—á–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}': {len(self.df)} –∑–∞–ø–∏—Å–µ–π, {len(self.df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
                    break
            except:
                continue
        
        if self.df is None or len(self.df.columns) <= 1:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º")
            return None
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–ù–û–°–¢–ï–ô:")
        print(f"  –°—Ç—Ä–æ–∫: {len(self.df)}")
        print(f"  –ö–æ–ª–æ–Ω–æ–∫: {len(self.df.columns)}")
        print(f"  –ö–æ–ª–æ–Ω–∫–∏: {list(self.df.columns)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_cols = ['year', 'month', 'revenue_total']
        missing_cols = [col for col in required_cols if col not in self.df.columns]
        
        if missing_cols:
            print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            for col in missing_cols:
                similar_cols = [c for c in self.df.columns if col.lower() in c.lower() or c.lower() in col.lower()]
                if similar_cols:
                    print(f"    –í–æ–∑–º–æ–∂–Ω–æ –∏–º–µ–ª–æ—Å—å –≤ –≤–∏–¥—É: {similar_cols}")
        else:
            print(f"‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–π–¥–µ–Ω—ã")
        
        return self.df
    
    def clean_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüßπ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•:")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        for col in ['year', 'month']:
            if col in self.df.columns:
                self.df[col] = pd.to_numeric(self.df[col], errors='coerce')
                print(f"  {col}: –æ—á–∏—â–µ–Ω–æ")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        initial_count = len(self.df)
        self.df = self.df.dropna(subset=['year', 'month'])
        print(f"  –£–¥–∞–ª–µ–Ω–æ {initial_count - len(self.df)} –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –û—á–∏—Å—Ç–∫–∞ revenue_total
        if 'revenue_total' in self.df.columns:
            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–∞
            self.df['revenue_total'] = self.df['revenue_total'].astype(str).str.replace(',', '').str.replace(' ', '')
            self.df['revenue_total'] = pd.to_numeric(self.df['revenue_total'], errors='coerce')
            # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ 0
            self.df['revenue_total'] = self.df['revenue_total'].fillna(0)
            print(f"  revenue_total: –æ—á–∏—â–µ–Ω–æ")
        
        print(f"  –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(self.df)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        if 'revenue_total' in self.df.columns:
            revenue_stats = self.df['revenue_total'].describe()
            print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê REVENUE_TOTAL:")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ: {revenue_stats['mean']:,.0f}")
            print(f"  –ú–µ–¥–∏–∞–Ω–∞: {revenue_stats['50%']:,.0f}")
            print(f"  –ú–∞–∫—Å–∏–º—É–º: {revenue_stats['max']:,.0f}")
            print(f"  –ù–µ–Ω—É–ª–µ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {(self.df['revenue_total'] > 0).sum()}")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if 'year' in self.df.columns and 'month' in self.df.columns:
            print(f"\nüìÖ –í–†–ï–ú–ï–ù–ù–û–ô –î–ò–ê–ü–ê–ó–û–ù:")
            print(f"  –° {self.df['year'].min()}.{self.df['month'].min():02d} –ø–æ {self.df['year'].max()}.{self.df['month'].max():02d}")
            print(f"  –í—Å–µ–≥–æ –º–µ—Å—è—Ü–µ–≤: {len(self.df.groupby(['year', 'month']))}")
    
    def prepare_time_features(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        print(f"\n‚è∞ –ü–û–î–ì–û–¢–û–í–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í:")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å
        self.df['time_index'] = (self.df['year'] - self.df['year'].min()) * 12 + (self.df['month'] - 1)
        print(f"  time_index: —Å–æ–∑–¥–∞–Ω")
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if 'month' in self.df.columns:
            self.df['month_sin'] = np.sin(2 * np.pi * self.df['month'] / 12)
            self.df['month_cos'] = np.cos(2 * np.pi * self.df['month'] / 12)
            print(f"  month_sin, month_cos: —Å–æ–∑–¥–∞–Ω—ã")
            
            # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ dummy –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            self.df['quarter'] = ((self.df['month'] - 1) // 3) + 1
            for q in range(1, 5):
                self.df[f'q{q}'] = (self.df['quarter'] == q).astype(int)
            print(f"  q1, q2, q3, q4: —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        if 'month' in self.df.columns:
            self.df['holiday_period'] = (
                (self.df['month'] == 12) |  # –î–µ–∫–∞–±—Ä—å
                (self.df['month'] == 1) |   # –Ø–Ω–≤–∞—Ä—å
                (self.df['month'] == 2) |   # –§–µ–≤—Ä–∞–ª—å
                (self.df['month'] == 3) |   # –ú–∞—Ä—Ç
                (self.df['month'] == 5)     # –ú–∞–π
            ).astype(int)
            print(f"  holiday_period: —Å–æ–∑–¥–∞–Ω")
        
        print(f"  –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
    
    def train_revenue_model(self, test_size=0.3):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è revenue_total"""
        print(f"\nü§ñ –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò –î–õ–Ø REVENUE_TOTAL:")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.prepare_time_features()
        
        # –ë–∞–∑–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = ['time_index', 'month_sin', 'month_cos', 'q1', 'q2', 'q3', 'q4', 'holiday_period']
        
        print(f"  –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {features}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        train_data = self.df[self.df['revenue_total'] > 0].copy()
        
        if len(train_data) < 30:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ({len(train_data)} –∑–∞–ø–∏—Å–µ–π)")
            return None
        
        print(f"  –î–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(train_data)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º X –∏ y
        X = train_data[features].fillna(0)
        y = train_data['revenue_total']
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã)
        split_point = int(len(X) * (1 - test_size))
        X_train, X_test = X[:split_point], X[split_point:]
        y_train, y_test = y[:split_point], y[split_point:]
        
        print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(X_train)} –∑–∞–ø–∏—Å–µ–π")
        print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(X_test)} –∑–∞–ø–∏—Å–µ–π")
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        self.model = LinearRegression()
        self.model.fit(X_train, y_train)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        y_pred_train = self.model.predict(X_train)
        y_pred_test = self.model.predict(X_test)
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        train_r2 = r2_score(y_train, y_pred_train)
        test_r2 = r2_score(y_test, y_pred_test)
        train_mae = mean_absolute_error(y_train, y_pred_train)
        test_mae = mean_absolute_error(y_test, y_pred_test)
        
        print(f"  Train R¬≤: {train_r2:.3f}, Test R¬≤: {test_r2:.3f}")
        print(f"  Train MAE: {train_mae:,.0f}, Test MAE: {test_mae:,.0f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        print(f"\n  üìä –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ –ú–û–î–ï–õ–ò:")
        for feature, coef in zip(features, self.model.coef_):
            print(f"    {feature}: {coef:.2f}")
        print(f"    Intercept: {self.model.intercept_:.2f}")
        
        print(f"  ‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ (Test R¬≤ = {test_r2:.3f})")
        
        return {
            'features': features,
            'test_r2': test_r2,
            'train_size': len(train_data)
        }
    
    def create_forecast(self, forecast_periods=4):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ revenue_total"""
        print(f"\nüîÆ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ì–ù–û–ó–ê REVENUE_TOTAL –ù–ê {forecast_periods} –ü–ï–†–ò–û–î–û–í:")
        
        if self.model is None:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ train_revenue_model()")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å
        last_time_index = self.df['time_index'].max()
        last_year = self.df['year'].max()
        last_month = self.df['month'].max()
        
        print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥: {last_year}.{last_month:02d}")
        print(f"  –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º –¥–æ: {last_year}.{last_month + forecast_periods:02d}")
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≥—Ä—É–ø–ø
        group_cols = ['region_to', 'subdivision', 'category']
        available_group_cols = [col for col in group_cols if col in self.df.columns]
        
        if available_group_cols:
            unique_combinations = self.df[available_group_cols].drop_duplicates()
            print(f"  –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {len(unique_combinations)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≥—Ä—É–ø–ø")
        else:
            unique_combinations = pd.DataFrame({'dummy': [1]})
            print(f"  –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        forecast_periods_data = []
        for _, combo in unique_combinations.iterrows():
            for i in range(1, forecast_periods + 1):
                period_data = {
                    'time_index': last_time_index + i,
                    'month_sin': np.sin(2 * np.pi * ((last_time_index + i) % 12) / 12),
                    'month_cos': np.cos(2 * np.pi * ((last_time_index + i) % 12) / 12),
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                for col in available_group_cols:
                    period_data[col] = combo[col]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                month = ((last_time_index + i) % 12) + 1
                quarter = ((month - 1) // 3) + 1
                for q in range(1, 5):
                    period_data[f'q{q}'] = 1 if quarter == q else 0
                
                # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
                period_data['holiday_period'] = 1 if month in [12, 1, 2, 3, 5] else 0
                
                forecast_periods_data.append(period_data)
        
        self.forecast_df = pd.DataFrame(forecast_periods_data)
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º revenue_total
        features = ['time_index', 'month_sin', 'month_cos', 'q1', 'q2', 'q3', 'q4', 'holiday_period']
        forecast_features = self.forecast_df[features].fillna(0)
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        predictions = self.model.predict(forecast_features)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        self.forecast_df['revenue_total'] = np.maximum(0, predictions)  # –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        
        print(f"  –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–∑–¥–∞–Ω –¥–ª—è {len(forecast_periods_data)} –∑–∞–ø–∏—Å–µ–π")
        print(f"  –û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ revenue_total: {self.forecast_df['revenue_total'].sum():,.0f} ‚ÇΩ")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
        print(f"\n  üìä –ê–ù–ê–õ–ò–ó –ü–†–û–ì–ù–û–ó–ê:")
        print(f"    –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–ø–∏—Å—å: {self.forecast_df['revenue_total'].mean():,.0f} ‚ÇΩ")
        print(f"    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {self.forecast_df['revenue_total'].max():,.0f} ‚ÇΩ")
        print(f"    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {self.forecast_df['revenue_total'].min():,.0f} ‚ÇΩ")
    
    def save_forecast(self, output_file='Auto_Revenue_Forecast_Results.csv'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        if self.forecast_df is None:
            raise ValueError("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ create_forecast()")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        self.forecast_df.to_csv(output_file, index=False)
        print(f"\nüíæ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
        
        return self.forecast_df
    
    def plot_forecast_analysis(self, save_plot=True):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        if self.forecast_df is None:
            print("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return
        
        plt.figure(figsize=(12, 8))
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        historical_data = self.df[self.df['revenue_total'] > 0]
        if len(historical_data) > 0:
            plt.plot(historical_data['time_index'], historical_data['revenue_total'], 
                    'b-', label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', linewidth=2, alpha=0.7)
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        plt.plot(self.forecast_df['time_index'], self.forecast_df['revenue_total'], 
                'r--', label='–ü—Ä–æ–≥–Ω–æ–∑', linewidth=2, marker='o')
        
        plt.title('–ü—Ä–æ–≥–Ω–æ–∑ Revenue Total\n(–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è)')
        plt.xlabel('–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å')
        plt.ylabel('Revenue Total')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        if save_plot:
            plt.savefig('auto_revenue_forecast_analysis.png', dpi=300, bbox_inches='tight')
            print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'auto_revenue_forecast_analysis.png'")
        
        plt.show()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø REVENUE_TOTAL")
    print("="*60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    forecaster = AutoRevenueForecaster('Marketing Budjet Emulation - raw2.csv')
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    forecaster.load_and_analyze_data()
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    forecaster.clean_data()
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    forecaster.train_revenue_model()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
    forecaster.create_forecast(forecast_periods=4)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    forecaster.save_forecast()
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    forecaster.plot_forecast_analysis()
    
    print(f"\nüéâ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()

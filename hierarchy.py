"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (Hierarchical Forecasting).

–†–µ–∞–ª–∏–∑—É–µ—Ç –º–µ—Ç–æ–¥—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (reconciliation):
- Bottom-Up: –ø—Ä–æ–≥–Ω–æ–∑—ã —Å –Ω–∏–∂–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –∞–≥—Ä–µ–≥–∏—Ä—É—é—Ç—Å—è –≤–≤–µ—Ä—Ö
- Top-Down (Proportional): –ø—Ä–æ–≥–Ω–æ–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–æ–ª—è–º
"""

import pandas as pd
import numpy as np
from collections import defaultdict


class HierarchyReconciler:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    
    def __init__(self, hierarchy_cols, metric):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        
        Args:
            hierarchy_cols: —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫ –Ω–∏–∂–Ω–µ–º—É
                           –Ω–∞–ø—Ä–∏–º–µ—Ä: ['region_to', 'subdivision', 'category']
            metric: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏
        """
        self.hierarchy_cols = hierarchy_cols
        self.metric = metric
        self.hierarchy_levels = len(hierarchy_cols)
        
        print(f"\nüèóÔ∏è === –ò–ï–†–ê–†–•–ò–ß–ï–°–ö–ê–Ø –ú–û–î–ï–õ–¨ ===", flush=True)
        print(f"   –£—Ä–æ–≤–Ω–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ ({len(hierarchy_cols)}): {' > '.join(hierarchy_cols)}", flush=True)
        print(f"   –ú–µ—Ç—Ä–∏–∫–∞: {metric}", flush=True)
    
    def build_hierarchy_tree(self, df):
        """
        –°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            dict: {—É—Ä–æ–≤–µ–Ω—å: —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π}
        """
        hierarchy_tree = {}
        
        for level in range(len(self.hierarchy_cols) + 1):
            if level == 0:
                # –í–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (total)
                hierarchy_tree[level] = [('TOTAL',)]
            else:
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–æ —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
                cols_at_level = self.hierarchy_cols[:level]
                unique_combos = df[cols_at_level].drop_duplicates().values.tolist()
                hierarchy_tree[level] = [tuple(combo) for combo in unique_combos]
        
        print(f"\n   üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏:", flush=True)
        for level, combos in hierarchy_tree.items():
            if level == 0:
                print(f"      –£—Ä–æ–≤–µ–Ω—å {level} (Total): 1 —ç–ª–µ–º–µ–Ω—Ç", flush=True)
            else:
                print(f"      –£—Ä–æ–≤–µ–Ω—å {level} ({self.hierarchy_cols[:level]}): {len(combos)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", flush=True)
        
        return hierarchy_tree
    
    def get_historical_proportions(self, df, time_col='month', year_col='year'):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–æ–ª–∏ –¥–ª—è top-down —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        
        Returns:
            dict: {parent_key: {child_key: proportion}}
        """
        proportions = {}
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è (–∫—Ä–æ–º–µ –Ω–∏–∂–Ω–µ–≥–æ)
        for level in range(len(self.hierarchy_cols)):
            parent_cols = self.hierarchy_cols[:level] if level > 0 else []
            child_cols = self.hierarchy_cols[:level + 1]
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —É—Ä–æ–≤–Ω—é
            if parent_cols:
                parent_totals = df.groupby(parent_cols)[self.metric].sum()
            else:
                parent_totals = pd.Series({('TOTAL',): df[self.metric].sum()})
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–æ—á–µ—Ä–Ω–µ–º—É —É—Ä–æ–≤–Ω—é
            child_totals = df.groupby(child_cols)[self.metric].sum()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ª–∏
            for child_key, child_value in child_totals.items():
                if not isinstance(child_key, tuple):
                    child_key = (child_key,)
                
                parent_key = child_key[:-1] if len(child_key) > 1 else ('TOTAL',)
                parent_value = parent_totals.get(parent_key, 0)
                
                if parent_value > 0:
                    proportion = child_value / parent_value
                else:
                    proportion = 0
                
                if parent_key not in proportions:
                    proportions[parent_key] = {}
                
                proportions[parent_key][child_key] = proportion
        
        print(f"   ‚úÖ –í—ã—á–∏—Å–ª–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –¥–ª—è {len(proportions)} —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —É–∑–ª–æ–≤", flush=True)
        
        return proportions
    
    def reconcile_bottom_up(self, forecasts_df):
        """
        –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º Bottom-Up
        
        –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∏–∂–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –∞–≥—Ä–µ–≥–∏—Ä—É—é—Ç—Å—è –≤–≤–µ—Ä—Ö –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏
        
        Args:
            forecasts_df: DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –Ω–∏–∂–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
                         –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ + –º–µ—Ç—Ä–∏–∫—É
        
        Returns:
            DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö
        """
        print(f"\n   üîº Bottom-Up: –∞–≥—Ä–µ–≥–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤–≤–µ—Ä—Ö –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏", flush=True)
        
        all_forecasts = []
        
        # –ù–∏–∂–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        bottom_level_forecasts = forecasts_df.copy()
        all_forecasts.append(bottom_level_forecasts)
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –≤–≤–µ—Ä—Ö –ø–æ —É—Ä–æ–≤–Ω—è–º
        for level in range(len(self.hierarchy_cols) - 1, -1, -1):
            if level == 0:
                # –í–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (total)
                time_cols = [col for col in forecasts_df.columns if col in ['year', 'month', 'Halfyear', 'Quarter', 'period']]
                if time_cols:
                    level_forecast = forecasts_df.groupby(time_cols, dropna=False)[self.metric].sum().reset_index()
                    for col in self.hierarchy_cols:
                        level_forecast[col] = 'TOTAL'
                    all_forecasts.append(level_forecast)
            else:
                # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
                group_cols = self.hierarchy_cols[:level]
                time_cols = [col for col in forecasts_df.columns if col in ['year', 'month', 'Halfyear', 'Quarter', 'period']]
                group_by = time_cols + group_cols
                
                level_forecast = forecasts_df.groupby(group_by, dropna=False)[self.metric].sum().reset_index()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏
                for col in self.hierarchy_cols[level:]:
                    if col not in level_forecast.columns:
                        level_forecast[col] = 'AGGREGATED'
                
                all_forecasts.append(level_forecast)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏
        result = pd.concat(all_forecasts, ignore_index=True)
        
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö: {len(result)} —Å—Ç—Ä–æ–∫", flush=True)
        
        return result
    
    def reconcile_top_down(self, top_forecast, proportions, time_periods):
        """
        –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º Top-Down (Proportional)
        
        –ü—Ä–æ–≥–Ω–æ–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤–Ω–∏–∑ –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–æ–ª—è–º
        
        Args:
            top_forecast: –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (total)
                         dict: {period: value}
            proportions: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–æ–ª–∏ –∏–∑ get_historical_proportions()
            time_periods: —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        
        Returns:
            DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö
        """
        print(f"\n   üîΩ Top-Down: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–æ–ª—è–º", flush=True)
        
        all_forecasts = []
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        for period_info in time_periods:
            period_key = f"{period_info['year']}-{period_info['month']:02d}"
            top_value = top_forecast.get(period_key, 0)
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
            self._distribute_forecast(
                parent_key=('TOTAL',),
                parent_value=top_value,
                proportions=proportions,
                period_info=period_info,
                level=0,
                forecasts_list=all_forecasts
            )
        
        result = pd.DataFrame(all_forecasts)
        
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö: {len(result)} —Å—Ç—Ä–æ–∫", flush=True)
        
        return result
    
    def _distribute_forecast(self, parent_key, parent_value, proportions, period_info, level, forecasts_list):
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–æ—á–µ—Ä–Ω–∏–º —É–∑–ª–∞–º
        """
        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏
        if level >= len(self.hierarchy_cols):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã –∏ –∏—Ö –¥–æ–ª–∏
        children = proportions.get(parent_key, {})
        
        if not children:
            # –ù–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤ - —ç—Ç–æ –ª–∏—Å—Ç –¥–µ—Ä–µ–≤–∞
            return
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–æ—á–µ—Ä–Ω–∏–º —É–∑–ª–∞–º
        for child_key, proportion in children.items():
            child_value = parent_value * proportion
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞
            forecast_row = {
                'year': period_info['year'],
                'month': period_info['month'],
                'Halfyear': period_info.get('halfyear', 'H1' if period_info['month'] <= 6 else 'H2'),
                'Quarter': period_info.get('quarter', f'Q{(period_info["month"]-1)//3 + 1}'),
                self.metric: child_value
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
            for i, col_name in enumerate(self.hierarchy_cols[:len(child_key)]):
                forecast_row[col_name] = child_key[i]
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∫–∞–∫ 'AGGREGATED'
            for col_name in self.hierarchy_cols[len(child_key):]:
                forecast_row[col_name] = 'AGGREGATED'
            
            forecasts_list.append(forecast_row)
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–ª—å—à–µ –≤–Ω–∏–∑
            self._distribute_forecast(
                parent_key=child_key,
                parent_value=child_value,
                proportions=proportions,
                period_info=period_info,
                level=level + 1,
                forecasts_list=forecasts_list
            )


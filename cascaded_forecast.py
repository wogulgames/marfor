#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–∞—Å–∫–∞–¥–Ω–∞—è –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π –ø–æ —É—Ä–æ–≤–Ω—è–º
1. –í–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_absolute_error
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

class CascadedForecaster:
    def __init__(self, csv_file=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.csv_file = csv_file
        self.df = None
        self.aggregated_df = None
        self.region_trends = {}
        self.region_models = {}
        self.final_forecast = None
        
    def load_and_analyze_data(self, csv_file=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        if csv_file:
            self.csv_file = csv_file
            
        if not self.csv_file:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            
        print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.csv_file}...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        separators = [',', ';', '\t', '|']
        for sep in separators:
            try:
                self.df = pd.read_csv(self.csv_file, sep=sep)
                if len(self.df.columns) > 1:
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}': {len(self.df)} –∑–∞–ø–∏—Å–µ–π, {len(self.df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
                    break
            except:
                continue
        
        if self.df is None or len(self.df.columns) <= 1:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º")
            return None
        
        return self.df
    
    def clean_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüßπ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•:")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        for col in ['year', 'month']:
            if col in self.df.columns:
                self.df[col] = pd.to_numeric(self.df[col], errors='coerce')
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        initial_count = len(self.df)
        self.df = self.df.dropna(subset=['year', 'month'])
        print(f"  –£–¥–∞–ª–µ–Ω–æ {initial_count - len(self.df)} –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –û—á–∏—Å—Ç–∫–∞ revenue_total
        if 'revenue_total' in self.df.columns:
            self.df['revenue_total'] = self.df['revenue_total'].astype(str).str.replace(',', '').str.replace(' ', '')
            self.df['revenue_total'] = pd.to_numeric(self.df['revenue_total'], errors='coerce')
            self.df['revenue_total'] = self.df['revenue_total'].fillna(0)
        
        print(f"  –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(self.df)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        print(f"\nüìÖ –í–†–ï–ú–ï–ù–ù–û–ô –î–ò–ê–ü–ê–ó–û–ù:")
        print(f"  –° {self.df['year'].min()}.{self.df['month'].min():02d} –ø–æ {self.df['year'].max()}.{self.df['month'].max():02d}")
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ—Ä–µ–Ω–∏–π
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–†–ï–ù–ò–ô:")
        if 'region_to' in self.df.columns:
            regions = self.df['region_to'].value_counts()
            print(f"  –†–µ–≥–∏–æ–Ω—ã: {len(regions)} ({list(regions.index)})")
        
        if 'subdivision' in self.df.columns:
            subdivisions = self.df['subdivision'].value_counts()
            print(f"  –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {len(subdivisions)} ({list(subdivisions.index)})")
        
        if 'category' in self.df.columns:
            categories = self.df['category'].value_counts()
            print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(categories)} ({list(categories.index)})")
    
    def aggregate_by_region(self):
        """–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"""
        print(f"\nüìà –ê–ì–†–ï–ì–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –º–µ—Å—è—Ü–∞–º
        if 'region_to' in self.df.columns and 'revenue_total' in self.df.columns:
            self.aggregated_df = self.df.groupby(['year', 'month', 'region_to'])['revenue_total'].agg([
                'sum', 'mean', 'count', 'std'
            ]).reset_index()
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            self.aggregated_df.columns = ['year', 'month', 'region_to', 'total_revenue', 'avg_revenue', 'count', 'std_revenue']
            
            print(f"  –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ {len(self.aggregated_df)} –∑–∞–ø–∏—Å–µ–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
            
            # –ê–Ω–∞–ª–∏–∑ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print(f"\nüìä –ê–ù–ê–õ–ò–ó –ê–ì–†–ï–ì–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
            print(f"  –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:")
            region_totals = self.aggregated_df.groupby('region_to')['total_revenue'].sum().sort_values(ascending=False)
            for region, total in region_totals.items():
                print(f"    {region}: {total:,.0f} ‚ÇΩ")
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
            print(f"\nüìÖ –í–†–ï–ú–ï–ù–ù–´–ï –¢–†–ï–ù–î–´ –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
            for region in self.aggregated_df['region_to'].unique():
                region_data = self.aggregated_df[self.aggregated_df['region_to'] == region]
                if len(region_data) > 1:
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å
                    region_data = region_data.sort_values(['year', 'month'])
                    region_data['time_index'] = (region_data['year'] - region_data['year'].min()) * 12 + (region_data['month'] - 1)
                    
                    # –ü—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥
                    if len(region_data) > 2:
                        X = region_data[['time_index']]
                        y = region_data['total_revenue']
                        
                        model = LinearRegression()
                        model.fit(X, y)
                        
                        trend_slope = model.coef_[0]
                        trend_direction = "—Ä–æ—Å—Ç" if trend_slope > 0 else "–ø–∞–¥–µ–Ω–∏–µ" if trend_slope < 0 else "—Å—Ç–∞–±–∏–ª—å–Ω–æ"
                        
                        print(f"    {region}: {trend_direction} ({trend_slope:,.0f} ‚ÇΩ/–º–µ—Å—è—Ü)")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–¥
                        self.region_trends[region] = {
                            'slope': trend_slope,
                            'intercept': model.intercept_,
                            'data': region_data,
                            'model': model
                        }
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
    
    def analyze_seasonality(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"""
        print(f"\nüåä –ê–ù–ê–õ–ò–ó –°–ï–ó–û–ù–ù–û–°–¢–ò –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
        
        if self.aggregated_df is not None:
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
            monthly_avg = self.aggregated_df.groupby('month')['total_revenue'].mean()
            print(f"  –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:")
            for month, revenue in monthly_avg.items():
                print(f"    {month:2d} –º–µ—Å—è—Ü: {revenue:,.0f} ‚ÇΩ")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
            self.aggregated_df['quarter'] = ((self.aggregated_df['month'] - 1) // 3) + 1
            quarterly_avg = self.aggregated_df.groupby('quarter')['total_revenue'].mean()
            print(f"\n  –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º:")
            for quarter, revenue in quarterly_avg.items():
                print(f"    Q{quarter}: {revenue:,.0f} ‚ÇΩ")
            
            # –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            print(f"\nüåç –°–ï–ó–û–ù–ù–û–°–¢–¨ –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
            for region in self.aggregated_df['region_to'].unique():
                region_data = self.aggregated_df[self.aggregated_df['region_to'] == region]
                if len(region_data) > 6:  # –ú–∏–Ω–∏–º—É–º 6 –º–µ—Å—è—Ü–µ–≤ –¥–∞–Ω–Ω—ã—Ö
                    # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
                    monthly_revenue = region_data.groupby('month')['total_revenue'].mean()
                    peak_month = monthly_revenue.idxmax()
                    low_month = monthly_revenue.idxmin()
                    peak_value = monthly_revenue.max()
                    low_value = monthly_revenue.min()
                    
                    seasonality_ratio = peak_value / low_value if low_value > 0 else 0
                    
                    print(f"    {region}:")
                    print(f"      –ü–∏–∫: {peak_month} –º–µ—Å—è—Ü ({peak_value:,.0f} ‚ÇΩ)")
                    print(f"      –ú–∏–Ω–∏–º—É–º: {low_month} –º–µ—Å—è—Ü ({low_value:,.0f} ‚ÇΩ)")
                    print(f"      –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: {seasonality_ratio:.2f}x")
    
    def build_region_models(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
        print(f"\nü§ñ –ü–û–°–¢–†–û–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô –î–õ–Ø –†–ï–ì–ò–û–ù–û–í:")
        
        if self.aggregated_df is not None:
            for region in self.aggregated_df['region_to'].unique():
                region_data = self.aggregated_df[self.aggregated_df['region_to'] == region].copy()
                
                if len(region_data) > 6:  # –ú–∏–Ω–∏–º—É–º 6 –º–µ—Å—è—Ü–µ–≤ –¥–∞–Ω–Ω—ã—Ö
                    print(f"\n  üîß –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {region}:")
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    region_data = region_data.sort_values(['year', 'month'])
                    region_data['time_index'] = (region_data['year'] - region_data['year'].min()) * 12 + (region_data['month'] - 1)
                    
                    # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                    region_data['month_sin'] = np.sin(2 * np.pi * region_data['month'] / 12)
                    region_data['month_cos'] = np.cos(2 * np.pi * region_data['month'] / 12)
                    
                    # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                    for q in range(1, 5):
                        region_data[f'q{q}'] = (region_data['quarter'] == q).astype(int)
                    
                    # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
                    region_data['holiday_period'] = (
                        (region_data['month'] == 12) |  # –î–µ–∫–∞–±—Ä—å
                        (region_data['month'] == 1) |   # –Ø–Ω–≤–∞—Ä—å
                        (region_data['month'] == 2) |   # –§–µ–≤—Ä–∞–ª—å
                        (region_data['month'] == 3) |   # –ú–∞—Ä—Ç
                        (region_data['month'] == 5)     # –ú–∞–π
                    ).astype(int)
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º X –∏ y
                    features = ['time_index', 'month_sin', 'month_cos', 'q1', 'q2', 'q3', 'q4', 'holiday_period']
                    X = region_data[features].fillna(0)
                    y = region_data['total_revenue']
                    
                    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                    model = Ridge(alpha=1.0)
                    model.fit(X, y)
                    
                    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    y_pred = model.predict(X)
                    
                    # –ú–µ—Ç—Ä–∏–∫–∏
                    r2 = r2_score(y, y_pred)
                    mae = mean_absolute_error(y, y_pred)
                    
                    print(f"    R¬≤: {r2:.3f}")
                    print(f"    MAE: {mae:,.0f}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
                    self.region_models[region] = {
                        'model': model,
                        'features': features,
                        'r2': r2,
                        'mae': mae,
                        'data': region_data
                    }
                    
                    if r2 > 0.3:
                        print(f"    ‚úÖ –ú–æ–¥–µ–ª—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
                    elif r2 > 0.1:
                        print(f"    ‚ö†Ô∏è  –ú–æ–¥–µ–ª—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
                    else:
                        print(f"    ‚ùå –ú–æ–¥–µ–ª—å —Å–ª–∞–±–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
    
    def create_forecast(self, forecast_periods=4):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        print(f"\nüîÆ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ì–ù–û–ó–ê –ù–ê {forecast_periods} –ü–ï–†–ò–û–î–û–í:")
        
        if not self.region_models:
            print("‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å
        last_year = self.aggregated_df['year'].max()
        last_month = self.aggregated_df['month'].max()
        
        print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥: {last_year}.{last_month:02d}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        forecast_data = []
        
        for region, model_info in self.region_models.items():
            print(f"\n  üìä –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {region}:")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞
            region_data = model_info['data']
            last_time_index = region_data['time_index'].max()
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            for i in range(1, forecast_periods + 1):
                period_data = {
                    'year': last_year + (i // 12),
                    'month': ((last_month + i - 1) % 12) + 1,
                    'region_to': region,
                    'time_index': last_time_index + i,
                    'month_sin': np.sin(2 * np.pi * (((last_month + i - 1) % 12) + 1) / 12),
                    'month_cos': np.cos(2 * np.pi * (((last_month + i - 1) % 12) + 1) / 12),
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                month = period_data['month']
                quarter = ((month - 1) // 3) + 1
                for q in range(1, 5):
                    period_data[f'q{q}'] = 1 if quarter == q else 0
                
                # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
                period_data['holiday_period'] = 1 if month in [12, 1, 2, 3, 5] else 0
                
                # –ü—Ä–æ–≥–Ω–æ–∑
                features = model_info['features']
                X_forecast = np.array([period_data[feature] for feature in features]).reshape(1, -1)
                forecast_value = model_info['model'].predict(X_forecast)[0]
                
                period_data['forecast_revenue'] = max(0, forecast_value)  # –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                
                forecast_data.append(period_data)
                
                print(f"    {period_data['year']}.{period_data['month']:02d}: {forecast_value:,.0f} ‚ÇΩ")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
        self.final_forecast = pd.DataFrame(forecast_data)
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
        total_forecast = self.final_forecast['forecast_revenue'].sum()
        print(f"\n  üìä –û–ë–©–ò–ô –ü–†–û–ì–ù–û–ó: {total_forecast:,.0f} ‚ÇΩ")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        print(f"\n  üåç –ü–†–û–ì–ù–û–ó –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
        region_forecasts = self.final_forecast.groupby('region_to')['forecast_revenue'].sum().sort_values(ascending=False)
        for region, forecast in region_forecasts.items():
            print(f"    {region}: {forecast:,.0f} ‚ÇΩ")
        
        return self.final_forecast
    
    def save_forecast(self, output_file='Cascaded_Forecast_Results.csv'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        if self.final_forecast is None:
            print("‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        self.final_forecast.to_csv(output_file, index=False)
        print(f"\nüíæ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
        
        return self.final_forecast
    
    def plot_analysis(self, save_plot=True):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
        if self.aggregated_df is None:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            return
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –¢—Ä–µ–Ω–¥—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        ax1 = axes[0, 0]
        for region in self.aggregated_df['region_to'].unique():
            region_data = self.aggregated_df[self.aggregated_df['region_to'] == region]
            region_data = region_data.sort_values(['year', 'month'])
            region_data['period'] = region_data['year'] + region_data['month'] / 12
            ax1.plot(region_data['period'], region_data['total_revenue'], 
                    label=region, marker='o', linewidth=2)
        
        ax1.set_title('–¢—Ä–µ–Ω–¥—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º')
        ax1.set_xlabel('–ü–µ—Ä–∏–æ–¥')
        ax1.set_ylabel('–í—ã—Ä—É—á–∫–∞')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        ax2 = axes[0, 1]
        monthly_avg = self.aggregated_df.groupby('month')['total_revenue'].mean()
        ax2.bar(monthly_avg.index, monthly_avg.values, alpha=0.7)
        ax2.set_title('–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (—Å—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º)')
        ax2.set_xlabel('–ú–µ—Å—è—Ü')
        ax2.set_ylabel('–í—ã—Ä—É—á–∫–∞')
        ax2.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        ax3 = axes[1, 0]
        region_totals = self.aggregated_df.groupby('region_to')['total_revenue'].sum().sort_values(ascending=False)
        ax3.bar(range(len(region_totals)), region_totals.values, alpha=0.7)
        ax3.set_title('–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º')
        ax3.set_xlabel('–†–µ–≥–∏–æ–Ω—ã')
        ax3.set_ylabel('–í—ã—Ä—É—á–∫–∞')
        ax3.set_xticks(range(len(region_totals)))
        ax3.set_xticklabels(region_totals.index, rotation=45, ha='right')
        ax3.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π
        ax4 = axes[1, 1]
        if self.region_models:
            regions = list(self.region_models.keys())
            r2_scores = [self.region_models[region]['r2'] for region in regions]
            ax4.bar(range(len(regions)), r2_scores, alpha=0.7)
            ax4.set_title('–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (R¬≤)')
            ax4.set_xlabel('–†–µ–≥–∏–æ–Ω—ã')
            ax4.set_ylabel('R¬≤')
            ax4.set_xticks(range(len(regions)))
            ax4.set_xticklabels(regions, rotation=45, ha='right')
            ax4.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        if save_plot:
            plt.savefig('cascaded_forecast_analysis.png', dpi=300, bbox_inches='tight')
            print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'cascaded_forecast_analysis.png'")
        
        plt.show()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ –ö–ê–°–ö–ê–î–ù–ê–Ø –ú–û–î–ï–õ–¨ –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    print("1. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
    print("2. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤")
    print("3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    print("="*60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    forecaster = CascadedForecaster('Marketing Budjet Emulation - raw2.csv')
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    forecaster.load_and_analyze_data()
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    forecaster.clean_data()
    
    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    forecaster.aggregate_by_region()
    
    # –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
    forecaster.analyze_seasonality()
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤
    forecaster.build_region_models()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
    forecaster.create_forecast(forecast_periods=4)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    forecaster.save_forecast()
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    forecaster.plot_analysis()
    
    print(f"\nüéâ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()

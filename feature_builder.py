"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (features) –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤.

–í–∫–ª—é—á–∞–µ—Ç:
- –õ–∞–≥–∏ (lag features): –ø—Ä–æ—à–ª—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏
- Rolling features: —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: —Å–∏–Ω—É—Å–æ–∏–¥—ã –¥–ª—è —É—á–µ—Ç–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
"""

import pandas as pd
import numpy as np


class FeatureBuilder:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤"""
    
    def __init__(self, df, metric, time_col='month', year_col='year'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            metric: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏
            time_col: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –º–µ—Å—è—Ü–µ–º
            year_col: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –≥–æ–¥–æ–º
        """
        self.df = df.copy()
        self.metric = metric
        self.time_col = time_col
        self.year_col = year_col
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ª–∞–≥–æ–≤
        self.df['time_index'] = (self.df[year_col] - self.df[year_col].min()) * 12 + self.df[time_col]
        self.df = self.df.sort_values('time_index')
    
    def add_lag_features(self, lags=[1, 2, 3, 4, 6, 12]):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ª–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        
        Args:
            lags: —Å–ø–∏—Å–æ–∫ –ª–∞–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [1, 2, 3, 4, 6, 12])
                  1 = –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
                  12 = —Ç–æ—Ç –∂–µ –º–µ—Å—è—Ü –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
        """
        print(f"   üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∞–≥–æ–≤: {lags}", flush=True)
        
        for lag in lags:
            self.df[f'{self.metric}_lag_{lag}'] = self.df[self.metric].shift(lag)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        added_count = len(lags)
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–∞–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {added_count}", flush=True)
        
        return self
    
    def add_rolling_features(self, windows=[3, 6]):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç rolling (—Å–∫–æ–ª—å–∑—è—â–∏–µ) –ø—Ä–∏–∑–Ω–∞–∫–∏
        
        Args:
            windows: —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–æ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [3, 6])
        """
        print(f"   üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ rolling-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤: –æ–∫–Ω–∞ {windows}", flush=True)
        
        for window in windows:
            # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
            self.df[f'{self.metric}_rolling_mean_{window}'] = self.df[self.metric].rolling(window=window).mean()
            
            # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            self.df[f'{self.metric}_rolling_std_{window}'] = self.df[self.metric].rolling(window=window).std()
            
            # –°–∫–æ–ª—å–∑—è—â–∏–π –º–∏–Ω–∏–º—É–º
            self.df[f'{self.metric}_rolling_min_{window}'] = self.df[self.metric].rolling(window=window).min()
            
            # –°–∫–æ–ª—å–∑—è—â–∏–π –º–∞–∫—Å–∏–º—É–º
            self.df[f'{self.metric}_rolling_max_{window}'] = self.df[self.metric].rolling(window=window).max()
        
        added_count = len(windows) * 4  # mean, std, min, max –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∫–Ω–∞
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ rolling-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {added_count}", flush=True)
        
        return self
    
    def add_seasonal_features(self):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (—Å–∏–Ω—É—Å–æ–∏–¥—ã)
        
        –°–æ–∑–¥–∞–µ—Ç:
        - sin/cos –¥–ª—è –º–µ—Å—è—Ü–∞ (–≥–æ–¥–æ–≤–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å)
        - sin/cos –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª–∞ (–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å)
        """
        print(f"   üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (—Å–∏–Ω—É—Å–æ–∏–¥—ã)", flush=True)
        
        # –ì–æ–¥–æ–≤–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (–º–µ—Å—è—Ü)
        self.df['month_sin'] = np.sin(2 * np.pi * self.df[self.time_col] / 12)
        self.df['month_cos'] = np.cos(2 * np.pi * self.df[self.time_col] / 12)
        
        # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        self.df['quarter_sin'] = np.sin(2 * np.pi * ((self.df[self.time_col] - 1) // 3) / 4)
        self.df['quarter_cos'] = np.cos(2 * np.pi * ((self.df[self.time_col] - 1) // 3) / 4)
        
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: 4", flush=True)
        
        return self
    
    def add_trend_features(self):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç—Ä–µ–Ω–¥–∞
        
        –°–æ–∑–¥–∞–µ—Ç:
        - time_index: –ª–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥
        - time_index_squared: –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
        """
        print(f"   üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", flush=True)
        
        # –õ–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥ (—É–∂–µ –µ—Å—Ç—å –≤ time_index)
        # –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
        self.df['time_index_squared'] = self.df['time_index'] ** 2
        
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: 2", flush=True)
        
        return self
    
    def add_interaction_features(self, categorical_cols=[]):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (interaction features)
        
        Args:
            categorical_cols: —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º
        """
        if not categorical_cols:
            return self
        
        print(f"   üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ interaction-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {categorical_cols}", flush=True)
        
        # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –º–µ—Å—è—Ü–µ–º (–¥–ª—è —É—á–µ—Ç–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
        for col in categorical_cols:
            if f'{col}_encoded' in self.df.columns:
                self.df[f'{col}_x_month'] = self.df[f'{col}_encoded'] * self.df[self.time_col]
        
        added_count = len([c for c in categorical_cols if f'{c}_encoded' in self.df.columns])
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ interaction-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {added_count}", flush=True)
        
        return self
    
    def get_feature_columns(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        """
        # –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏, –∫—Ä–æ–º–µ —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö
        exclude_cols = [self.metric, 'time_index']
        
        feature_cols = [col for col in self.df.columns 
                       if col not in exclude_cols 
                       and not col.startswith('Unnamed')]
        
        return feature_cols
    
    def build_all_features(self, categorical_cols=[]):
        """
        –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
        
        Args:
            categorical_cols: —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        
        Returns:
            DataFrame —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        """
        print(f"\nüîß === –ü–û–°–¢–†–û–ï–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í ===", flush=True)
        
        self.add_lag_features([1, 2, 3, 4, 6, 12])
        self.add_rolling_features([3, 6])
        self.add_seasonal_features()
        self.add_trend_features()
        self.add_interaction_features(categorical_cols)
        
        feature_cols = self.get_feature_columns()
        print(f"\n‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_cols)}", flush=True)
        print(f"   –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {feature_cols[:10]}..." if len(feature_cols) > 10 else f"   –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {feature_cols}", flush=True)
        
        return self.df, feature_cols
    
    def prepare_for_prediction(self, future_periods, categorical_values=None):
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ (–ø—Ä–æ–≥–Ω–æ–∑)
        
        Args:
            future_periods: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å year, month
            categorical_values: —Å–ª–æ–≤–∞—Ä—å —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        
        Returns:
            DataFrame —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        """
        future_rows = []
        
        for period in future_periods:
            row = {
                self.year_col: period['year'],
                self.time_col: period['month']
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            if categorical_values:
                row.update(categorical_values)
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å
            row['time_index'] = (period['year'] - self.df[self.year_col].min()) * 12 + period['month']
            
            # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            row['month_sin'] = np.sin(2 * np.pi * period['month'] / 12)
            row['month_cos'] = np.cos(2 * np.pi * period['month'] / 12)
            row['quarter_sin'] = np.sin(2 * np.pi * ((period['month'] - 1) // 3) / 4)
            row['quarter_cos'] = np.cos(2 * np.pi * ((period['month'] - 1) // 3) / 4)
            
            # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            row['time_index_squared'] = row['time_index'] ** 2
            
            future_rows.append(row)
        
        return pd.DataFrame(future_rows)


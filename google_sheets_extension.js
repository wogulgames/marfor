/**
 * Google Sheets —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:
 * 1. –û—Ç–∫—Ä–æ–π—Ç–µ Google Sheets
 * 2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Extensions > Apps Script
 * 3. –£–¥–∞–ª–∏—Ç–µ –≤–µ—Å—å –∫–æ–¥ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥
 * 4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç
 * 5. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ Google Sheets –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
 * 6. –í –º–µ–Ω—é –ø–æ—è–≤–∏—Ç—Å—è –ø—É–Ω–∫—Ç "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"
 */

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤ Google Sheets
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ')
    .addItem('üîÆ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑', 'createForecast')
    .addItem('üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤', 'analyzeTrends')
    .addItem('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞', 'showSettings')
    .addSeparator()
    .addItem('‚ùì –ü–æ–º–æ—â—å', 'showHelp')
    .addToUi();
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
 */
function createForecast() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
    const sheet = SpreadsheetApp.getActiveSheet();
    const data = sheet.getDataRange().getValues();
    
    if (data.length < 2) {
      ui.alert('–û—à–∏–±–∫–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏.', ui.ButtonSet.OK);
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const settings = showForecastSettings();
    if (!settings) return;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    const analysis = analyzeDataStructure(data);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    const forecast = generateForecast(data, analysis, settings);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤ –Ω–æ–≤—ã–π –ª–∏—Å—Ç
    addForecastToSheet(forecast, settings);
    
    ui.alert('–£—Å–ø–µ—Ö', `–ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–∑–¥–∞–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ ${forecast.length} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.`, ui.ButtonSet.OK);
    
  } catch (error) {
    ui.alert('–û—à–∏–±–∫–∞', `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`, ui.ButtonSet.OK);
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
 */
function showForecastSettings() {
  const ui = SpreadsheetApp.getUi();
  
  const html = HtmlService.createHtmlOutput(`
    <div style="font-family: Arial, sans-serif; padding: 20px;">
      <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞</h3>
      
      <div style="margin-bottom: 15px;">
        <label><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:</strong></label><br>
        <input type="number" id="periods" value="4" min="1" max="12" style="width: 100px; padding: 5px;">
      </div>
      
      <div style="margin-bottom: 15px;">
        <label><strong>–ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:</strong></label><br>
        <select id="method" style="width: 200px; padding: 5px;">
          <option value="linear">–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è</option>
          <option value="polynomial">–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è</option>
        </select>
      </div>
      
      <div style="margin-bottom: 15px;">
        <label><strong>–ö–æ–ª–æ–Ω–∫–∞ —Å –≥–æ–¥–æ–º:</strong></label><br>
        <select id="yearColumn" style="width: 200px; padding: 5px;">
          <option value="A">A (1-—è –∫–æ–ª–æ–Ω–∫–∞)</option>
          <option value="B">B (2-—è –∫–æ–ª–æ–Ω–∫–∞)</option>
          <option value="C">C (3-—è –∫–æ–ª–æ–Ω–∫–∞)</option>
          <option value="D">D (4-—è –∫–æ–ª–æ–Ω–∫–∞)</option>
          <option value="E">E (5-—è –∫–æ–ª–æ–Ω–∫–∞)</option>
        </select>
      </div>
      
      <div style="margin-bottom: 15px;">
        <label><strong>–ö–æ–ª–æ–Ω–∫–∞ —Å –º–µ—Å—è—Ü–µ–º:</strong></label><br>
        <select id="monthColumn" style="width: 200px; padding: 5px;">
          <option value="B">B (2-—è –∫–æ–ª–æ–Ω–∫–∞)</option>
          <option value="A">A (1-—è –∫–æ–ª–æ–Ω–∫–∞)</option>
          <option value="C">C (3-—è –∫–æ–ª–æ–Ω–∫–∞)</option>
          <option value="D">D (4-—è –∫–æ–ª–æ–Ω–∫–∞)</option>
          <option value="E">E (5-—è –∫–æ–ª–æ–Ω–∫–∞)</option>
        </select>
      </div>
      
      <div style="margin-bottom: 20px;">
        <label><strong>–ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</strong></label><br>
        <input type="text" id="groupColumns" value="C,D,E" style="width: 300px; padding: 5px;" 
               placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: C,D,E">
      </div>
      
      <div style="text-align: center;">
        <button onclick="submitSettings()" style="background: #4285f4; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑</button>
        <button onclick="google.script.host.close()" style="background: #ccc; color: black; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin-left: 10px;">–û—Ç–º–µ–Ω–∞</button>
      </div>
    </div>
    
    <script>
      function submitSettings() {
        const settings = {
          periods: document.getElementById('periods').value,
          method: document.getElementById('method').value,
          yearColumn: document.getElementById('yearColumn').value,
          monthColumn: document.getElementById('monthColumn').value,
          groupColumns: document.getElementById('groupColumns').value.split(',').map(col => col.trim())
        };
        
        google.script.host.setHeight(0);
        google.script.run.withSuccessHandler(function() {
          google.script.host.close();
        }).processForecastSettings(settings);
      }
    </script>
  `).setWidth(500).setHeight(400);
  
  ui.showModalDialog(html, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞');
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ callback)
  return {
    periods: 4,
    method: 'linear',
    yearColumn: 'A',
    monthColumn: 'B',
    groupColumns: ['C', 'D', 'E']
  };
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
 */
function processForecastSettings(settings) {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', settings);
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
 */
function analyzeDataStructure(data) {
  const headers = data[0];
  const analysis = {
    headers: headers,
    numericColumns: [],
    categoricalColumns: [],
    dateColumns: [],
    totalRows: data.length - 1
  };
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É
  for (let i = 0; i < headers.length; i++) {
    const columnData = data.slice(1).map(row => row[i]);
    const isNumeric = columnData.every(val => !isNaN(val) && val !== '');
    
    if (isNumeric) {
      analysis.numericColumns.push({
        index: i,
        name: headers[i],
        letter: String.fromCharCode(65 + i)
      });
    } else {
      analysis.categoricalColumns.push({
        index: i,
        name: headers[i],
        letter: String.fromCharCode(65 + i)
      });
    }
  }
  
  return analysis;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
 */
function generateForecast(data, analysis, settings) {
  const forecast = [];
  const headers = data[0];
  
  // –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
  
  // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
  const lastRow = data[data.length - 1];
  const yearCol = getColumnIndex(settings.yearColumn);
  const monthCol = getColumnIndex(settings.monthColumn);
  
  let lastYear = lastRow[yearCol];
  let lastMonth = lastRow[monthCol];
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
  for (let i = 1; i <= settings.periods; i++) {
    lastMonth++;
    if (lastMonth > 12) {
      lastMonth = 1;
      lastYear++;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    const groups = getUniqueGroups(data, settings.groupColumns);
    
    groups.forEach(group => {
      const forecastRow = new Array(headers.length);
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞—Ç—ã
      forecastRow[yearCol] = lastYear;
      forecastRow[monthCol] = lastMonth;
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
      settings.groupColumns.forEach((col, index) => {
        const colIndex = getColumnIndex(col);
        forecastRow[colIndex] = group[index];
      });
      
      // –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      analysis.numericColumns.forEach(numCol => {
        if (numCol.letter !== settings.yearColumn && numCol.letter !== settings.monthColumn) {
          // –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è
          const historicalValues = getHistoricalValues(data, group, settings.groupColumns, numCol.index);
          forecastRow[numCol.index] = calculateLinearForecast(historicalValues, i);
        }
      });
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
      for (let j = 0; j < headers.length; j++) {
        if (forecastRow[j] === undefined) {
          forecastRow[j] = '';
        }
      }
      
      forecast.push(forecastRow);
    });
  }
  
  return forecast;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
 */
function getUniqueGroups(data, groupColumns) {
  const groups = new Set();
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const group = groupColumns.map(col => row[getColumnIndex(col)]);
    groups.add(JSON.stringify(group));
  }
  
  return Array.from(groups).map(group => JSON.parse(group));
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
 */
function getHistoricalValues(data, group, groupColumns, valueColumn) {
  const values = [];
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const isMatch = groupColumns.every((col, index) => 
      row[getColumnIndex(col)] === group[index]
    );
    
    if (isMatch && !isNaN(row[valueColumn])) {
      values.push(row[valueColumn]);
    }
  }
  
  return values;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
 */
function calculateLinearForecast(values, periods) {
  if (values.length < 2) return values[0] || 0;
  
  // –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è
  const n = values.length;
  const sumX = n * (n + 1) / 2;
  const sumY = values.reduce((a, b) => a + b, 0);
  const sumXY = values.reduce((sum, y, x) => sum + (x + 1) * y, 0);
  const sumXX = n * (n + 1) * (2 * n + 1) / 6;
  
  const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
  const intercept = (sumY - slope * sumX) / n;
  
  return Math.max(0, slope * (n + periods) + intercept);
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≤ –Ω–æ–≤—ã–π –ª–∏—Å—Ç
 */
function addForecastToSheet(forecast, settings) {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const originalSheet = SpreadsheetApp.getActiveSheet();
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
  const forecastSheet = spreadsheet.insertSheet(`–ü—Ä–æ–≥–Ω–æ–∑_${new Date().toISOString().slice(0,10)}`);
  
  // –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = originalSheet.getRange(1, 1, 1, originalSheet.getLastColumn()).getValues()[0];
  forecastSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const originalData = originalSheet.getDataRange().getValues();
  if (originalData.length > 1) {
    forecastSheet.getRange(2, 1, originalData.length - 1, headers.length)
      .setValues(originalData.slice(1));
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (forecast.length > 0) {
    const startRow = originalData.length + 1;
    forecastSheet.getRange(startRow, 1, forecast.length, headers.length)
      .setValues(forecast);
    
    // –í—ã–¥–µ–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º —Ü–≤–µ—Ç–æ–º
    forecastSheet.getRange(startRow, 1, forecast.length, headers.length)
      .setBackground('#e8f0fe');
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç
  formatForecastSheet(forecastSheet, headers.length);
  
  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π –ª–∏—Å—Ç
  spreadsheet.setActiveSheet(forecastSheet);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–∏—Å—Ç —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
 */
function formatForecastSheet(sheet, numColumns) {
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  sheet.getRange(1, 1, 1, numColumns)
    .setBackground('#4285f4')
    .setFontColor('white')
    .setFontWeight('bold');
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
  sheet.autoResizeColumns(1, numColumns);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
  sheet.getRange(1, 1, sheet.getLastRow(), numColumns)
    .setBorder(true, true, true, true, true, true);
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
 */
function analyzeTrends() {
  const ui = SpreadsheetApp.getUi();
  const sheet = SpreadsheetApp.getActiveSheet();
  const data = sheet.getDataRange().getValues();
  
  if (data.length < 3) {
    ui.alert('–û—à–∏–±–∫–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤.', ui.ButtonSet.OK);
    return;
  }
  
  const analysis = analyzeDataStructure(data);
  
  // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
  const report = generateTrendReport(data, analysis);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
  showTrendReport(report);
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–µ–Ω–¥–∞–º
 */
function generateTrendReport(data, analysis) {
  const report = {
    totalRecords: data.length - 1,
    dateRange: getDateRange(data),
    topMetrics: [],
    trends: []
  };
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-–º–µ—Ç—Ä–∏–∫–∏
  analysis.numericColumns.forEach(col => {
    const values = data.slice(1).map(row => row[col.index]).filter(val => !isNaN(val));
    if (values.length > 0) {
      const total = values.reduce((a, b) => a + b, 0);
      const avg = total / values.length;
      const growth = calculateGrowthRate(values);
      
      report.topMetrics.push({
        name: col.name,
        total: total,
        average: avg,
        growth: growth
      });
    }
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
  report.topMetrics.sort((a, b) => b.total - a.total);
  
  return report;
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–µ–Ω–¥–∞–º
 */
function showTrendReport(report) {
  const ui = SpreadsheetApp.getUi();
  
  let message = `üìä –û–¢–ß–ï–¢ –ü–û –¢–†–ï–ù–î–ê–ú\n\n`;
  message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${report.dateRange}\n`;
  message += `üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${report.totalRecords}\n\n`;
  message += `üèÜ –¢–û–ü-5 –ú–ï–¢–†–ò–ö:\n`;
  
  report.topMetrics.slice(0, 5).forEach((metric, index) => {
    message += `${index + 1}. ${metric.name}\n`;
    message += `   –û–±—â–µ–µ: ${metric.total.toLocaleString()}\n`;
    message += `   –°—Ä–µ–¥–Ω–µ–µ: ${metric.average.toLocaleString()}\n`;
    message += `   –†–æ—Å—Ç: ${metric.growth.toFixed(1)}%\n\n`;
  });
  
  ui.alert('–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤', message, ui.ButtonSet.OK);
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
function showSettings() {
  const ui = SpreadsheetApp.getUi();
  
  const message = `‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø

üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:
‚Ä¢ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
‚Ä¢ –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏ —Å –≥–æ–¥–æ–º –∏ –º–µ—Å—è—Ü–µ–º
‚Ä¢ –ß–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è

üîß –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã:
‚Ä¢ –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
‚Ä¢ –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:
‚Ä¢ –ù–æ–≤—ã–π –ª–∏—Å—Ç —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ + –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

‚ùì –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–Ω–∫—Ç "–ü–æ–º–æ—â—å"`;
  
  ui.alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', message, ui.ButtonSet.OK);
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
 */
function showHelp() {
  const ui = SpreadsheetApp.getUi();
  
  const message = `‚ùì –°–ü–†–ê–í–ö–ê –ü–û –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Æ

üöÄ –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
2. –í—ã–±–µ—Ä–∏—Ç–µ "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ" > "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω–æ–≤–æ–º –ª–∏—Å—Ç–µ

üìã –§–û–†–ú–ê–¢ –î–ê–ù–ù–´–•:
‚Ä¢ –ì–æ–¥: 2023, 2024, 2025...
‚Ä¢ –ú–µ—Å—è—Ü: 1, 2, 3... 12
‚Ä¢ –ß–∏—Å–ª–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏: –≤—ã—Ä—É—á–∫–∞, —Ç—Ä–∞—Ñ–∏–∫, —Ä–∞—Å—Ö–æ–¥—ã

‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò:
‚Ä¢ –ü–µ—Ä–∏–æ–¥—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
‚Ä¢ –ú–µ—Ç–æ–¥: –ª–∏–Ω–µ–π–Ω—ã–π –∏–ª–∏ –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–π
‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º

üìû –ü–û–î–î–ï–†–ñ–ö–ê:
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:
‚Ä¢ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ù–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫`;
  
  ui.alert('–°–ø—Ä–∞–≤–∫–∞', message, ui.ButtonSet.OK);
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */
function getColumnIndex(columnLetter) {
  return columnLetter.charCodeAt(0) - 65;
}

function getDateRange(data) {
  // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
  return "2023-2026";
}

function calculateGrowthRate(values) {
  if (values.length < 2) return 0;
  
  const first = values[0];
  const last = values[values.length - 1];
  
  return ((last - first) / first) * 100;
}

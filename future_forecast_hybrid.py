#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–∏–±—Ä–∏–¥–Ω–æ–π –∫–∞—Å–∫–∞–¥–Ω–æ–π –º–æ–¥–µ–ª–∏
–ü–µ—Ä–∏–æ–¥: —Å–µ–Ω—Ç—è–±—Ä—å 2025 - –¥–µ–∫–∞–±—Ä—å 2026
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')

# Scikit-learn –º–æ–¥–µ–ª–∏
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

# Prophet
try:
    from prophet import Prophet
    PROPHET_AVAILABLE = True
except ImportError:
    PROPHET_AVAILABLE = False
    print("‚ö†Ô∏è  Prophet –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

class FutureForecastHybrid:
    def __init__(self, csv_file=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã"""
        self.csv_file = csv_file
        self.df = None
        self.aggregated_df = None
        self.historical_data = None
        self.analyst_forecast = None
        self.region_stability = {}
        self.selected_models = {}
        self.models = {}
        self.our_forecast = {}
        self.comparison_results = {}
        
    def load_and_clean_data(self, csv_file=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if csv_file:
            self.csv_file = csv_file
            
        if not self.csv_file:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            
        print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.csv_file}...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        separators = [',', ';', '\t', '|']
        for sep in separators:
            try:
                self.df = pd.read_csv(self.csv_file, sep=sep)
                if len(self.df.columns) > 1:
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}': {len(self.df)} –∑–∞–ø–∏—Å–µ–π, {len(self.df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
                    break
            except:
                continue
        
        if self.df is None or len(self.df.columns) <= 1:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º")
            return None
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüßπ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•:")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        for col in ['year', 'month']:
            if col in self.df.columns:
                self.df[col] = pd.to_numeric(self.df[col], errors='coerce')
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        initial_count = len(self.df)
        self.df = self.df.dropna(subset=['year', 'month'])
        print(f"  –£–¥–∞–ª–µ–Ω–æ {initial_count - len(self.df)} –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –û—á–∏—Å—Ç–∫–∞ revenue_total
        if 'revenue_total' in self.df.columns:
            self.df['revenue_total'] = self.df['revenue_total'].astype(str).str.replace(',', '').str.replace(' ', '')
            self.df['revenue_total'] = pd.to_numeric(self.df['revenue_total'], errors='coerce')
            self.df['revenue_total'] = self.df['revenue_total'].fillna(0)
        
        print(f"  –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(self.df)} –∑–∞–ø–∏—Å–µ–π")
        return self.df
    
    def prepare_aggregated_data(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüìö –ü–û–î–ì–û–¢–û–í–ö–ê –ê–ì–†–ï–ì–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –º–µ—Å—è—Ü–∞–º
        if 'region_to' in self.df.columns and 'revenue_total' in self.df.columns:
            self.aggregated_df = self.df.groupby(['year', 'month', 'region_to'])['revenue_total'].agg([
                'sum', 'mean', 'count', 'std'
            ]).reset_index()
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            self.aggregated_df.columns = ['year', 'month', 'region_to', 'total_revenue', 'avg_revenue', 'count', 'std_revenue']
            
            print(f"  –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ {len(self.aggregated_df)} –∑–∞–ø–∏—Å–µ–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            total_revenue = self.aggregated_df['total_revenue'].sum()
            print(f"  –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} ‚ÇΩ")
            
            return self.aggregated_df
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏")
            return None
    
    def split_historical_and_forecast_data(self):
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ"""
        print(f"\nüìä –†–ê–ó–î–ï–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•:")
        print(f"  –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: –¥–æ –∞–≤–≥—É—Å—Ç–∞ 2025")
        print(f"  –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤: —Å–µ–Ω—Ç—è–±—Ä—å 2025 - –∞–≤–≥—É—Å—Ç 2026")
        print(f"  –ù–∞—à –ø—Ä–æ–≥–Ω–æ–∑: —Å–µ–Ω—Ç—è–±—Ä—å 2025 - –¥–µ–∫–∞–±—Ä—å 2026")
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ –∞–≤–≥—É—Å—Ç–∞ 2025)
        historical_mask = (
            (self.aggregated_df['year'] < 2025) | 
            ((self.aggregated_df['year'] == 2025) & (self.aggregated_df['month'] <= 8))
        )
        self.historical_data = self.aggregated_df[historical_mask].copy()
        
        # –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ (—Å–µ–Ω—Ç—è–±—Ä—å 2025 - –∞–≤–≥—É—Å—Ç 2026)
        analyst_forecast_mask = (
            ((self.aggregated_df['year'] == 2025) & (self.aggregated_df['month'] >= 9)) |
            ((self.aggregated_df['year'] == 2026) & (self.aggregated_df['month'] <= 8))
        )
        self.analyst_forecast = self.aggregated_df[analyst_forecast_mask].copy()
        
        print(f"  –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(self.historical_data)}")
        print(f"  –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤: {len(self.analyst_forecast)}")
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        historical_revenue = self.historical_data['total_revenue'].sum()
        print(f"  –í—ã—Ä—É—á–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {historical_revenue:,.0f} ‚ÇΩ")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤
        if len(self.analyst_forecast) > 0:
            analyst_revenue = self.analyst_forecast['total_revenue'].sum()
            print(f"  –í—ã—Ä—É—á–∫–∞ –≤ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤: {analyst_revenue:,.0f} ‚ÇΩ")
        else:
            print("  ‚ö†Ô∏è  –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤")
    
    def analyze_region_stability(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –î–ê–ù–ù–´–• –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
        
        if self.historical_data is None:
            print("‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None
        
        for region in self.historical_data['region_to'].unique():
            region_data = self.historical_data[self.historical_data['region_to'] == region].copy()
            
            if len(region_data) > 6:  # –ú–∏–Ω–∏–º—É–º 6 –º–µ—Å—è—Ü–µ–≤ –¥–∞–Ω–Ω—ã—Ö
                print(f"\n  üåç –†–µ–≥–∏–æ–Ω: {region}")
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                region_data = region_data.sort_values(['year', 'month'])
                
                # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                revenue_values = region_data['total_revenue'].values
                
                # 1. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (CV)
                cv = np.std(revenue_values) / np.mean(revenue_values) if np.mean(revenue_values) > 0 else 0
                
                # 2. –¢—Ä–µ–Ω–¥ (–ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è)
                time_index = np.arange(len(revenue_values))
                trend_slope = np.polyfit(time_index, revenue_values, 1)[0]
                trend_strength = abs(trend_slope) / np.mean(revenue_values) if np.mean(revenue_values) > 0 else 0
                
                # 3. –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (—Ä–∞–∑–±—Ä–æ—Å –ø–æ –º–µ—Å—è—Ü–∞–º)
                monthly_means = region_data.groupby('month')['total_revenue'].mean()
                seasonality = monthly_means.std() / monthly_means.mean() if monthly_means.mean() > 0 else 0
                
                # 4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤ (IQR –º–µ—Ç–æ–¥)
                q1, q3 = np.percentile(revenue_values, [25, 75])
                iqr = q3 - q1
                outliers = np.sum((revenue_values < q1 - 1.5 * iqr) | (revenue_values > q3 + 1.5 * iqr))
                outlier_ratio = outliers / len(revenue_values)
                
                # 5. –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (lag-1)
                if len(revenue_values) > 1:
                    autocorr = np.corrcoef(revenue_values[:-1], revenue_values[1:])[0, 1]
                    autocorr = 0 if np.isnan(autocorr) else autocorr
                else:
                    autocorr = 0
                
                # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                stability_score = (
                    (1 - min(cv, 1)) * 0.3 +           # –ù–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
                    (1 - min(trend_strength, 1)) * 0.2 + # –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥
                    (1 - min(seasonality, 1)) * 0.2 +    # –ù–∏–∑–∫–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
                    (1 - outlier_ratio) * 0.2 +          # –ú–∞–ª–æ –≤—ã–±—Ä–æ—Å–æ–≤
                    max(autocorr, 0) * 0.1               # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–≥–∏–æ–Ω–∞
                if stability_score > 0.7:
                    region_type = "–°–¢–ê–ë–ò–õ–¨–ù–´–ô"
                    recommended_model = "Random Forest"
                elif stability_score > 0.4:
                    region_type = "–£–ú–ï–†–ï–ù–ù–û –°–¢–ê–ë–ò–õ–¨–ù–´–ô"
                    recommended_model = "Random Forest"
                else:
                    region_type = "–ù–ï–°–¢–ê–ë–ò–õ–¨–ù–´–ô"
                    recommended_model = "Prophet"
                
                self.region_stability[region] = {
                    'cv': cv,
                    'trend_strength': trend_strength,
                    'seasonality': seasonality,
                    'outlier_ratio': outlier_ratio,
                    'autocorr': autocorr,
                    'stability_score': stability_score,
                    'region_type': region_type,
                    'recommended_model': recommended_model
                }
                
                print(f"    –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {cv:.3f}")
                print(f"    –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {trend_strength:.3f}")
                print(f"    –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: {seasonality:.3f}")
                print(f"    –î–æ–ª—è –≤—ã–±—Ä–æ—Å–æ–≤: {outlier_ratio:.3f}")
                print(f"    –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {autocorr:.3f}")
                print(f"    –û—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {stability_score:.3f}")
                print(f"    –¢–∏–ø —Ä–µ–≥–∏–æ–Ω–∞: {region_type}")
                print(f"    –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {recommended_model}")
    
    def prepare_features_for_sklearn(self, data):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è scikit-learn –º–æ–¥–µ–ª–µ–π"""
        data = data.copy()
        data = data.sort_values(['year', 'month'])
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å
        data['time_index'] = (data['year'] - data['year'].min()) * 12 + (data['month'] - 1)
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        data['month_sin'] = np.sin(2 * np.pi * data['month'] / 12)
        data['month_cos'] = np.cos(2 * np.pi * data['month'] / 12)
        
        # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        data['quarter'] = ((data['month'] - 1) // 3) + 1
        for q in range(1, 5):
            data[f'q{q}'] = (data['quarter'] == q).astype(int)
        
        # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        data['holiday_period'] = (
            (data['month'] == 12) |  # –î–µ–∫–∞–±—Ä—å
            (data['month'] == 1) |   # –Ø–Ω–≤–∞—Ä—å
            (data['month'] == 2) |   # –§–µ–≤—Ä–∞–ª—å
            (data['month'] == 3) |   # –ú–∞—Ä—Ç
            (data['month'] == 5)     # –ú–∞–π
        ).astype(int)
        
        # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        data['time_squared'] = data['time_index'] ** 2
        data['time_cubed'] = data['time_index'] ** 3
        
        return data
    
    def prepare_features_for_prophet(self, data):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Prophet"""
        prophet_data = data.copy()
        prophet_data = prophet_data.sort_values(['year', 'month'])
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É
        prophet_data['ds'] = pd.to_datetime(prophet_data[['year', 'month']].assign(day=1))
        prophet_data['y'] = prophet_data['total_revenue']
        
        return prophet_data[['ds', 'y']]
    
    def train_hybrid_models(self):
        """–û–±—É—á–µ–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
        print(f"\nü§ñ –û–ë–£–ß–ï–ù–ò–ï –ì–ò–ë–†–ò–î–ù–´–• –ú–û–î–ï–õ–ï–ô:")
        
        if self.historical_data is None or not self.region_stability:
            print("‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
            return None
        
        for region in self.historical_data['region_to'].unique():
            region_data = self.historical_data[self.historical_data['region_to'] == region].copy()
            
            if len(region_data) > 6 and region in self.region_stability:
                print(f"\n  üåç –†–µ–≥–∏–æ–Ω: {region}")
                print(f"    –¢–∏–ø: {self.region_stability[region]['region_type']}")
                print(f"    –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {self.region_stability[region]['recommended_model']}")
                
                # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                recommended_model = self.region_stability[region]['recommended_model']
                
                if recommended_model == "Random Forest":
                    # –û–±—É—á–∞–µ–º Random Forest
                    result = self.train_random_forest(region_data)
                    if result:
                        self.models[region] = {
                            'model_type': 'Random Forest',
                            'model': result['model'],
                            'scaler': result['scaler'],
                            'features': result['features'],
                            'train_r2': result['train_r2'],
                            'train_mae': result['train_mae']
                        }
                        self.selected_models[region] = 'Random Forest'
                        print(f"    ‚úÖ –û–±—É—á–µ–Ω–∞ Random Forest: R¬≤={result['train_r2']:.3f}")
                
                elif recommended_model == "Prophet" and PROPHET_AVAILABLE:
                    # –û–±—É—á–∞–µ–º Prophet
                    result = self.train_prophet(region_data)
                    if result:
                        self.models[region] = {
                            'model_type': 'Prophet',
                            'model': result['model'],
                            'train_r2': result['train_r2'],
                            'train_mae': result['train_mae']
                        }
                        self.selected_models[region] = 'Prophet'
                        print(f"    ‚úÖ –û–±—É—á–µ–Ω Prophet: R¬≤={result['train_r2']:.3f}")
                
                else:
                    print(f"    ‚ö†Ô∏è  Prophet –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Random Forest")
                    result = self.train_random_forest(region_data)
                    if result:
                        self.models[region] = {
                            'model_type': 'Random Forest',
                            'model': result['model'],
                            'scaler': result['scaler'],
                            'features': result['features'],
                            'train_r2': result['train_r2'],
                            'train_mae': result['train_mae']
                        }
                        self.selected_models[region] = 'Random Forest'
                        print(f"    ‚úÖ –û–±—É—á–µ–Ω–∞ Random Forest (fallback): R¬≤={result['train_r2']:.3f}")
    
    def train_random_forest(self, region_data):
        """–û–±—É—á–µ–Ω–∏–µ Random Forest –º–æ–¥–µ–ª–∏"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            data = self.prepare_features_for_sklearn(region_data)
            
            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            features = ['time_index', 'month_sin', 'month_cos', 'q1', 'q2', 'q3', 'q4', 'holiday_period', 'time_squared', 'time_cubed']
            X = data[features].fillna(0)
            y = data['total_revenue']
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            scaler = StandardScaler()
            X_scaled = scaler.fit_transform(X)
            
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            model = RandomForestRegressor(n_estimators=100, random_state=42)
            model.fit(X_scaled, y)
            y_pred = model.predict(X_scaled)
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            r2 = r2_score(y, y_pred)
            mae = mean_absolute_error(y, y_pred)
            
            return {
                'model': model,
                'scaler': scaler,
                'features': features,
                'train_r2': r2,
                'train_mae': mae
            }
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ Random Forest: {str(e)}")
            return None
    
    def train_prophet(self, region_data):
        """–û–±—É—á–µ–Ω–∏–µ Prophet –º–æ–¥–µ–ª–∏"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Prophet
            prophet_data = self.prepare_features_for_prophet(region_data)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            model = Prophet(
                yearly_seasonality=True,
                weekly_seasonality=False,
                daily_seasonality=False,
                seasonality_mode='multiplicative'
            )
            
            model.fit(prophet_data)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            future = model.make_future_dataframe(periods=0)
            forecast = model.predict(future)
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            y_true = prophet_data['y'].values
            y_pred = forecast['yhat'].values
            
            r2 = r2_score(y_true, y_pred)
            mae = mean_absolute_error(y_true, y_pred)
            
            return {
                'model': model,
                'train_r2': r2,
                'train_mae': mae
            }
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ Prophet: {str(e)}")
            return None
    
    def create_future_forecast(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã (—Å–µ–Ω—Ç—è–±—Ä—å 2025 - –¥–µ–∫–∞–±—Ä—å 2026)"""
        print(f"\nüîÆ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ì–ù–û–ó–ê –ù–ê –ë–£–î–£–©–ò–ï –ü–ï–†–ò–û–î–´:")
        print(f"  –ü–µ—Ä–∏–æ–¥: —Å–µ–Ω—Ç—è–±—Ä—å 2025 - –¥–µ–∫–∞–±—Ä—å 2026")
        
        if not self.models:
            print("‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            return None
        
        forecast_results = {}
        
        for region, model_info in self.models.items():
            print(f"\n  üåç –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {region} ({model_info['model_type']}):")
            
            try:
                if model_info['model_type'] == 'Random Forest':
                    # –ü—Ä–æ–≥–Ω–æ–∑ Random Forest
                    forecast_data = []
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã —Å —Å–µ–Ω—Ç—è–±—Ä—è 2025 –ø–æ –¥–µ–∫–∞–±—Ä—å 2026
                    for year in [2025, 2026]:
                        start_month = 9 if year == 2025 else 1
                        end_month = 12 if year == 2026 else 12
                        
                        for month in range(start_month, end_month + 1):
                            period_data = {
                                'year': year,
                                'month': month,
                                'time_index': (year - self.historical_data['year'].min()) * 12 + (month - 1),
                                'month_sin': np.sin(2 * np.pi * month / 12),
                                'month_cos': np.cos(2 * np.pi * month / 12),
                                'quarter': ((month - 1) // 3) + 1,
                                'holiday_period': 1 if month in [12, 1, 2, 3, 5] else 0
                            }
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                            for q in range(1, 5):
                                period_data[f'q{q}'] = 1 if period_data['quarter'] == q else 0
                            
                            # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                            period_data['time_squared'] = period_data['time_index'] ** 2
                            period_data['time_cubed'] = period_data['time_index'] ** 3
                            
                            forecast_data.append(period_data)
                    
                    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                    forecast_df = pd.DataFrame(forecast_data)
                    features = model_info['features']
                    X_forecast = forecast_df[features].fillna(0)
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑
                    X_forecast_scaled = model_info['scaler'].transform(X_forecast)
                    forecast_values = model_info['model'].predict(X_forecast_scaled)
                    
                    # –£–±–∏—Ä–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    forecast_values = np.maximum(forecast_values, 0)
                    
                    forecast_results[region] = {
                        'values': forecast_values,
                        'periods': forecast_df[['year', 'month']].to_dict('records'),
                        'model_type': 'Random Forest'
                    }
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    total_forecast = np.sum(forecast_values)
                    print(f"    Random Forest: {total_forecast:,.0f} ‚ÇΩ")
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ–¥–∞–º
                    forecast_2025 = np.sum([v for v, p in zip(forecast_values, forecast_df[['year', 'month']].to_dict('records')) if p['year'] == 2025])
                    forecast_2026 = np.sum([v for v, p in zip(forecast_values, forecast_df[['year', 'month']].to_dict('records')) if p['year'] == 2026])
                    print(f"      2025 (—Å–µ–Ω—Ç-–¥–µ–∫): {forecast_2025:,.0f} ‚ÇΩ")
                    print(f"      2026 (—è–Ω–≤-–¥–µ–∫): {forecast_2026:,.0f} ‚ÇΩ")
                
                elif model_info['model_type'] == 'Prophet':
                    # –ü—Ä–æ–≥–Ω–æ–∑ Prophet
                    prophet_model = model_info['model']
                    
                    # –°–æ–∑–¥–∞–µ–º –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è Prophet (—Å–µ–Ω—Ç—è–±—Ä—å 2025 - –¥–µ–∫–∞–±—Ä—å 2026)
                    future_dates = pd.date_range(start='2025-09-01', end='2026-12-01', freq='MS')
                    future_df = pd.DataFrame({'ds': future_dates})
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑
                    forecast = prophet_model.predict(future_df)
                    forecast_values = np.maximum(forecast['yhat'].values, 0)
                    
                    forecast_results[region] = {
                        'values': forecast_values,
                        'periods': [{'year': d.year, 'month': d.month} for d in future_dates],
                        'model_type': 'Prophet'
                    }
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    total_forecast = np.sum(forecast_values)
                    print(f"    Prophet: {total_forecast:,.0f} ‚ÇΩ")
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ–¥–∞–º
                    forecast_2025 = np.sum([v for v, d in zip(forecast_values, future_dates) if d.year == 2025])
                    forecast_2026 = np.sum([v for v, d in zip(forecast_values, future_dates) if d.year == 2026])
                    print(f"      2025 (—Å–µ–Ω—Ç-–¥–µ–∫): {forecast_2025:,.0f} ‚ÇΩ")
                    print(f"      2026 (—è–Ω–≤-–¥–µ–∫): {forecast_2026:,.0f} ‚ÇΩ")
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ: {str(e)}")
                continue
        
        self.our_forecast = forecast_results
        return forecast_results
    
    def compare_with_analyst_forecast(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤"""
        print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–û–ì–ù–û–ó–û–ú –ê–ù–ê–õ–ò–¢–ò–ö–û–í:")
        print(f"  –ü–µ—Ä–∏–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: —Å–µ–Ω—Ç—è–±—Ä—å 2025 - –∞–≤–≥—É—Å—Ç 2026")
        
        if not self.our_forecast or self.analyst_forecast is None:
            print("‚ùå –ù–µ—Ç –Ω–∞—à–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return None
        
        comparison_results = {}
        
        for region, our_forecast_info in self.our_forecast.items():
            print(f"\n  üåç –†–µ–≥–∏–æ–Ω: {region} ({our_forecast_info['model_type']}):")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
            analyst_region = self.analyst_forecast[self.analyst_forecast['region_to'] == region].copy()
            
            if len(analyst_region) == 0:
                print(f"    ‚ö†Ô∏è  –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region}")
                continue
            
            analyst_region = analyst_region.sort_values(['year', 'month'])
            analyst_values = analyst_region['total_revenue'].values
            analyst_total = np.sum(analyst_values)
            
            print(f"    üìä –ü—Ä–æ–≥–Ω–æ–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤: {analyst_total:,.0f} ‚ÇΩ")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞ —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥ (—Å–µ–Ω—Ç—è–±—Ä—å 2025 - –∞–≤–≥—É—Å—Ç 2026)
            our_periods = our_forecast_info['periods']
            our_values = our_forecast_info['values']
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–µ–Ω—Ç—è–±—Ä—å 2025 - –∞–≤–≥—É—Å—Ç 2026
            our_filtered_values = []
            for i, period in enumerate(our_periods):
                if (period['year'] == 2025 and period['month'] >= 9) or (period['year'] == 2026 and period['month'] <= 8):
                    our_filtered_values.append(our_values[i])
            
            if len(our_filtered_values) != len(analyst_values):
                print(f"    ‚ö†Ô∏è  –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
                continue
            
            our_total = np.sum(our_filtered_values)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            mae = mean_absolute_error(analyst_values, our_filtered_values)
            rmse = np.sqrt(mean_squared_error(analyst_values, our_filtered_values))
            mape = np.mean(np.abs((analyst_values - our_filtered_values) / analyst_values)) * 100
            
            # –û–±—â–∞—è –æ—à–∏–±–∫–∞
            total_error = our_total - analyst_total
            total_error_pct = (total_error / analyst_total * 100) if analyst_total > 0 else 0
            
            comparison_results[region] = {
                'model_type': our_forecast_info['model_type'],
                'our_forecast': our_total,
                'analyst_forecast': analyst_total,
                'total_error': total_error,
                'total_error_pct': total_error_pct,
                'mae': mae,
                'rmse': rmse,
                'mape': mape
            }
            
            print(f"    –ù–∞—à –ø—Ä–æ–≥–Ω–æ–∑: {our_total:,.0f} ‚ÇΩ")
            print(f"    –û—à–∏–±–∫–∞: {total_error:,.0f} ‚ÇΩ ({total_error_pct:+.1f}%)")
            print(f"    MAPE: {mape:.1f}%")
        
        self.comparison_results = comparison_results
        return comparison_results
    
    def summarize_future_forecast(self):
        """–°–≤–æ–¥–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã"""
        print(f"\nüìà –°–í–û–î–ö–ê –ü–†–û–ì–ù–û–ó–ê –ù–ê –ë–£–î–£–©–ò–ï –ü–ï–†–ò–û–î–´:")
        
        if not self.our_forecast:
            print("‚ùå –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —Å–≤–æ–¥–∫–∏")
            return None
        
        # –û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑
        total_forecast = 0
        forecast_2025 = 0
        forecast_2026 = 0
        
        for region, forecast_info in self.our_forecast.items():
            region_total = np.sum(forecast_info['values'])
            total_forecast += region_total
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ–¥–∞–º
            for i, period in enumerate(forecast_info['periods']):
                if period['year'] == 2025:
                    forecast_2025 += forecast_info['values'][i]
                elif period['year'] == 2026:
                    forecast_2026 += forecast_info['values'][i]
        
        print(f"\n  üìä –û–ë–©–ò–ô –ü–†–û–ì–ù–û–ó:")
        print(f"    –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_forecast:,.0f} ‚ÇΩ")
        print(f"    2025 (—Å–µ–Ω—Ç-–¥–µ–∫): {forecast_2025:,.0f} ‚ÇΩ")
        print(f"    2026 (—è–Ω–≤-–¥–µ–∫): {forecast_2026:,.0f} ‚ÇΩ")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        print(f"\n  üåç –ü–†–û–ì–ù–û–ó –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
        region_totals = {}
        for region, forecast_info in self.our_forecast.items():
            region_total = np.sum(forecast_info['values'])
            region_totals[region] = region_total
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        sorted_regions = sorted(region_totals.items(), key=lambda x: x[1], reverse=True)
        
        for region, total in sorted_regions:
            percentage = (total / total_forecast * 100) if total_forecast > 0 else 0
            print(f"    {region}: {total:,.0f} ‚ÇΩ ({percentage:.1f}%)")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞–º–∏
        if self.comparison_results:
            print(f"\n  üìä –°–†–ê–í–ù–ï–ù–ò–ï –° –ê–ù–ê–õ–ò–¢–ò–ö–ê–ú–ò:")
            total_analyst = sum([r['analyst_forecast'] for r in self.comparison_results.values()])
            total_our = sum([r['our_forecast'] for r in self.comparison_results.values()])
            total_diff = total_our - total_analyst
            total_diff_pct = (total_diff / total_analyst * 100) if total_analyst > 0 else 0
            
            print(f"    –ü—Ä–æ–≥–Ω–æ–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤: {total_analyst:,.0f} ‚ÇΩ")
            print(f"    –ù–∞—à –ø—Ä–æ–≥–Ω–æ–∑: {total_our:,.0f} ‚ÇΩ")
            print(f"    –†–∞–∑–Ω–∏—Ü–∞: {total_diff:,.0f} ‚ÇΩ ({total_diff_pct:+.1f}%)")
        
        return self.our_forecast
    
    def save_future_forecast(self, output_file='Future_Forecast_Results.csv'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã"""
        if not self.our_forecast:
            print("‚ùå –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return None
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
        all_forecasts = []
        
        for region, forecast_info in self.our_forecast.items():
            for i, (period, value) in enumerate(zip(forecast_info['periods'], forecast_info['values'])):
                all_forecasts.append({
                    'region': region,
                    'model_type': forecast_info['model_type'],
                    'year': period['year'],
                    'month': period['month'],
                    'forecast_revenue': value
                })
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        results_df = pd.DataFrame(all_forecasts)
        results_df.to_csv(output_file, index=False)
        
        print(f"\nüíæ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
        
        return results_df

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã"""
    print("üî¨ –ü–†–û–ì–ù–û–ó –ù–ê –ë–£–î–£–©–ò–ï –ü–ï–†–ò–û–î–´")
    print("="*60)
    print("–ü–µ—Ä–∏–æ–¥: —Å–µ–Ω—Ç—è–±—Ä—å 2025 - –¥–µ–∫–∞–±—Ä—å 2026")
    print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤")
    print("="*60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    future_forecast = FutureForecastHybrid('Marketing Budjet Emulation - raw2.csv')
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    future_forecast.load_and_clean_data()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    future_forecast.prepare_aggregated_data()
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    future_forecast.split_historical_and_forecast_data()
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
    future_forecast.analyze_region_stability()
    
    # –û–±—É—á–µ–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    future_forecast.train_hybrid_models()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã
    future_forecast.create_future_forecast()
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤
    future_forecast.compare_with_analyst_forecast()
    
    # –°–≤–æ–¥–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    future_forecast.summarize_future_forecast()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    future_forecast.save_future_forecast()
    
    print(f"\nüéâ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()

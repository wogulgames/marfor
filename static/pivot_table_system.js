// ========================================
// –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –°–í–û–î–ù–û–ô –¢–ê–ë–õ–ò–¶–´
// ========================================

console.log('–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...');

// –ö–ª–∞—Å—Å—ã –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–µ–π —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
class PivotField {
    constructor(name, label, type, level = 0) {
        this.name = name;
        this.label = label || name;
        this.type = type; // 'time', 'slice', 'metric'
        this.level = level;
        this.aggregation = 'sum'; // sum, avg, count, etc.
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
class PivotFilter {
    constructor(fieldName, fieldType, fieldLabel) {
        this.fieldName = fieldName;
        this.fieldType = fieldType; // 'text', 'number', 'date'
        this.fieldLabel = fieldLabel;
        this.isActive = false;
        this.values = []; // –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        this.minValue = null; // –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        this.maxValue = null; // –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        this.availableValues = []; // –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    getAvailableValues(rawData) {
        const values = new Set();
        rawData.forEach(row => {
            if (row[this.fieldName] !== null && row[this.fieldName] !== undefined) {
                values.add(row[this.fieldName]);
            }
        });
        
        this.availableValues = Array.from(values);
        
        // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º min/max
        if (this.fieldType === 'number') {
            this.availableValues.sort((a, b) => a - b);
            this.minValue = this.availableValues[0];
            this.maxValue = this.availableValues[this.availableValues.length - 1];
        } else {
            // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            this.availableValues.sort();
        }
        
        return this.availableValues;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä
    matches(row) {
        console.log(`üîç matches –≤—ã–∑–≤–∞–Ω –¥–ª—è ${this.fieldName}, isActive: ${this.isActive}`);
        if (!this.isActive) return true;
        
        const value = row[this.fieldName];
        console.log(`üîç value: ${value}, fieldType: ${this.fieldType}`);
        if (value === null || value === undefined) return false;
        
        if (this.fieldType === 'text') {
            return this.values.includes(value);
        } else if (this.fieldType === 'number' || this.fieldType === 'numeric') {
            const result = value >= this.minValue && value <= this.maxValue;
            console.log(`üîç –§–∏–ª—å—Ç—Ä ${this.fieldName}: value=${value}, minValue=${this.minValue}, maxValue=${this.maxValue}, result=${result}`);
            return result;
        }
        
        return true;
    }
    
    // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞
    reset() {
        this.isActive = false;
        this.values = [];
        if (this.fieldType === 'number') {
            this.minValue = this.availableValues[0];
            this.maxValue = this.availableValues[this.availableValues.length - 1];
        }
    }
}

class PivotConfig {
    constructor() {
        this.rows = []; // –ü–æ–ª—è –¥–ª—è —Å—Ç—Ä–æ–∫
        this.columns = []; // –ü–æ–ª—è –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤  
        this.values = []; // –ü–æ–ª—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π
        this.filters = []; // –§–∏–ª—å—Ç—Ä—ã
        this.mode = 'normal'; // normal, time-series, slices, split-columns
        this.originalMode = ''; // –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è split-columns
    }
    
    setRows(fields) {
        this.rows = fields;
    }
    
    setColumns(fields) {
        this.columns = fields;
    }
    
    setValues(fields) {
        this.values = fields;
    }
    
    setMode(mode) {
        this.mode = mode;
    }
    
    setOriginalMode(originalMode) {
        this.originalMode = originalMode;
    }
}

class PivotData {
    constructor(rawData) {
        this.rawData = rawData;
        this.processedData = null;
        this.rowGroups = new Map();
        this.columnGroups = new Map();
        this.crossTable = new Map();
    }
    
    process(config, renderer = null) {
        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:', config);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Å—Ç–æ–ª–±—Ü–∞–º
        this.groupByRowsAndColumns(config, renderer);
        
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        this.createCrossTable(config, renderer);
        
        return this;
    }
    
    groupByRowsAndColumns(config, renderer = null) {
        this.rowGroups.clear();
        this.columnGroups.clear();
        
        // –î–∞–Ω–Ω—ã–µ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–∞–∫ –µ—Å—Ç—å
        console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ: ${this.rawData.length} —Å—Ç—Ä–æ–∫`);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        let visibleRowFields;
        if (config.mode === 'slices' || (config.mode === 'split-columns' && config.originalMode === 'slices')) {
            // –í —Ä–µ–∂–∏–º–µ —Å—Ä–µ–∑–æ–≤ –∏–ª–∏ split-columns –∏–∑ —Å—Ä–µ–∑–æ–≤ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∏–¥–∏–º—ã–º –ø–æ–ª—è–º —Å—Ä–µ–∑–æ–≤
            visibleRowFields = renderer ? renderer.getVisibleSliceFields(config) : config.rows;
        } else {
            // –í –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–¥–∏–º—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            visibleRowFields = renderer ? renderer.getVisibleTimeFields(config) : config.rows;
        }
        
        console.log('–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ –ø–æ –ø–æ–ª—è–º:', visibleRowFields.map(f => f.name));
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        this.rawData.forEach((row, index) => {
            const rowKey = this.createRowKey(row, visibleRowFields);
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫
            if (index < 3) {
                console.log(`–°—Ç—Ä–æ–∫–∞ ${index}:`, {
                    rowKey,
                    visibleRowFields: visibleRowFields.map(f => f.name),
                    fieldValues: visibleRowFields.map(f => ({ name: f.name, value: row[f.name] }))
                });
            }
            
            if (!this.rowGroups.has(rowKey)) {
                this.rowGroups.set(rowKey, {
                    key: rowKey,
                    fields: this.extractFieldValues(row, visibleRowFields),
                    rows: []
                });
            }
            this.rowGroups.get(rowKey).rows.push(row);
        });
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
        this.rawData.forEach(row => {
            const colKey = this.createColumnKey(row, config.columns);
            if (!this.columnGroups.has(colKey)) {
                this.columnGroups.set(colKey, {
                    key: colKey,
                    fields: this.extractFieldValues(row, config.columns),
                    rows: []
                });
            }
            this.columnGroups.get(colKey).rows.push(row);
        });
        
        console.log('–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
            rowGroups: this.rowGroups.size,
            columnGroups: this.columnGroups.size,
            visibleRowFields: visibleRowFields.length
        });
    }
    
    createCrossTable(config, renderer = null) {
        this.crossTable.clear();
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        let visibleRowFields;
        if (config.mode === 'slices' || (config.mode === 'split-columns' && config.originalMode === 'slices')) {
            // –í —Ä–µ–∂–∏–º–µ —Å—Ä–µ–∑–æ–≤ –∏–ª–∏ split-columns –∏–∑ —Å—Ä–µ–∑–æ–≤ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∏–¥–∏–º—ã–º –ø–æ–ª—è–º —Å—Ä–µ–∑–æ–≤
            visibleRowFields = renderer ? renderer.getVisibleSliceFields(config) : config.rows;
        } else {
            // –í –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–¥–∏–º—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            visibleRowFields = renderer ? renderer.getVisibleTimeFields(config) : config.rows;
        }
        
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', {
            rawDataLength: this.rawData.length,
            visibleRows: visibleRowFields.map(r => r.name),
            columns: config.columns.map(c => c.name),
            values: config.values.map(v => v.name)
        });
        
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É: rowKey -> colKey -> aggregatedValue
        this.rawData.forEach((row, index) => {
            if (index < 3) { // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
                console.log(`–°—Ç—Ä–æ–∫–∞ ${index}:`, row);
            }
            
            const rowKey = this.createRowKey(row, visibleRowFields);
            const colKey = this.createColumnKey(row, config.columns);
            
            if (!this.crossTable.has(rowKey)) {
                this.crossTable.set(rowKey, new Map());
            }
            
            if (!this.crossTable.get(rowKey).has(colKey)) {
                this.crossTable.get(rowKey).set(colKey, {});
            }
            
            // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            config.values.forEach(valueField => {
                const currentValue = this.crossTable.get(rowKey).get(colKey)[valueField.name] || 0;
                const rowValue = parseFloat(row[valueField.name]) || 0;
                
                if (index < 3) { // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫
                    console.log(`  –ú–µ—Ç—Ä–∏–∫–∞ ${valueField.name}: ${row[valueField.name]} -> ${rowValue}`);
                }
                
                if (valueField.aggregation === 'sum') {
                    this.crossTable.get(rowKey).get(colKey)[valueField.name] = currentValue + rowValue;
                } else if (valueField.aggregation === 'avg') {
                    // –î–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É
                    if (!this.crossTable.get(rowKey).get(colKey)[`${valueField.name}_count`]) {
                        this.crossTable.get(rowKey).get(colKey)[`${valueField.name}_count`] = 0;
                        this.crossTable.get(rowKey).get(colKey)[`${valueField.name}_sum`] = 0;
                    }
                    this.crossTable.get(rowKey).get(colKey)[`${valueField.name}_count`]++;
                    this.crossTable.get(rowKey).get(colKey)[`${valueField.name}_sum`] += rowValue;
                    this.crossTable.get(rowKey).get(colKey)[valueField.name] = 
                        this.crossTable.get(rowKey).get(colKey)[`${valueField.name}_sum`] / 
                        this.crossTable.get(rowKey).get(colKey)[`${valueField.name}_count`];
                } else if (valueField.aggregation === 'count') {
                    this.crossTable.get(rowKey).get(colKey)[valueField.name] = currentValue + 1;
                }
            });
        });
        
        console.log('–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞:', {
            rows: this.crossTable.size,
            totalCells: Array.from(this.crossTable.values()).reduce((sum, colMap) => sum + colMap.size, 0)
        });
    }
    
    createRowKey(row, rowFields) {
        return rowFields.map(field => row[field.name] || '').join('|');
    }
    
    createColumnKey(row, columnFields) {
        return columnFields.map(field => row[field.name] || '').join('|');
    }
    
    extractFieldValues(row, fields) {
        const result = {};
        fields.forEach(field => {
            result[field.name] = row[field.name] || '';
        });
        return result;
    }
    
    getRowKeys() {
        return Array.from(this.rowGroups.keys()).sort();
    }
    
    getColumnKeys() {
        return Array.from(this.columnGroups.keys()).sort();
    }
    
    getValue(rowKey, colKey, valueFieldName) {
        if (this.crossTable.has(rowKey) && this.crossTable.get(rowKey).has(colKey)) {
            return this.crossTable.get(rowKey).get(colKey)[valueFieldName] || 0;
        }
        return 0;
    }
    
    getRowFields(rowKey, visibleFields = null) {
        const allFields = this.rowGroups.get(rowKey)?.fields || {};
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
        if (visibleFields) {
            const result = {};
            visibleFields.forEach(field => {
                if (allFields.hasOwnProperty(field.name)) {
                    result[field.name] = allFields[field.name];
                }
            });
            return result;
        }
        
        return allFields;
    }
    
    getColumnFields(colKey) {
        return this.columnGroups.get(colKey)?.fields || {};
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º
    applyFilters(data, filters) {
        if (!filters || filters.length === 0) {
            return data;
        }
        
        return data.filter(row => {
            return filters.every(filter => filter.matches(row));
        });
    }
    
    // –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º–º –¥–ª—è —Å—Ç—Ä–æ–∫–∏ Total
    calculateTotals(config) {
        const totals = {};
        const rowKeys = this.getRowKeys();
        const columnKeys = this.getColumnKeys();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∏—Ç–æ–≥–æ–≤
        config.values.forEach(valueField => {
            totals[valueField.name] = {};
            columnKeys.forEach(colKey => {
                totals[valueField.name][colKey] = 0;
            });
        });
        
        // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
        rowKeys.forEach(rowKey => {
            config.values.forEach(valueField => {
                columnKeys.forEach(colKey => {
                    const value = this.getValue(rowKey, colKey, valueField.name);
                    totals[valueField.name][colKey] += value;
                });
            });
        });
        
        return totals;
    }
}

class PivotRenderer {
    constructor(containerId) {
        this.containerId = containerId;
        this.collapsedTimeFields = new Set(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–≤–µ—Ä–Ω—É—Ç—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        this.collapsedSliceFields = new Set(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–≤–µ—Ä–Ω—É—Ç—ã–µ –ø–æ–ª—è —Å—Ä–µ–∑–æ–≤
    }
    
    render(pivotData, config) {
        console.log('–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', { config, pivotData });
        
        const container = document.getElementById(this.containerId);
        if (!container) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', this.containerId);
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        const html = this.createPivotTableHTML(pivotData, config);
        container.innerHTML = html;
        
        console.log('–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞');
    }
    
    createPivotTableHTML(pivotData, config) {
        let html = '<div class="pivot-table-container">';
        html += '<div class="d-flex justify-content-between align-items-center mb-3">';
        html += '<h6 class="mb-0"><i class="fas fa-table me-2"></i>–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)</h6>';
        html += '</div>';
        
        html += '<div class="table-responsive">';
        html += '<table class="table table-striped table-bordered pivot-table">';
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏
        html += this.createHeadersHTML(pivotData, config);
        
        // –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        html += this.createRowsHTML(pivotData, config);
        
        html += '</table>';
        html += '</div>';
        html += '</div>';
        
        return html;
    }
    
    createHeadersHTML(pivotData, config) {
        let html = '<thead class="table-dark">';
        
        if (config.mode === 'split-columns') {
            // –†–µ–∂–∏–º —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º (–∫–∞–∫ –≤ Google Sheets)
            
            // –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - –º–µ—Ç—Ä–∏–∫–∏
            html += '<tr>';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if (config.originalMode === 'slices') {
                // –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º "—Å—Ä–µ–∑—ã" - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–∑—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Å –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                const visibleSliceFields = this.getVisibleSliceFields(config);
                visibleSliceFields.forEach(rowField => {
                    const isCollapsible = this.hasChildSliceFields(config, rowField);
                    const isCollapsed = this.isSliceFieldCollapsed(rowField.name);
                    const collapseIcon = isCollapsible ? 
                        `<span class="collapse-icon" onclick="toggleSliceFieldCollapse('${rowField.name}')" style="cursor: pointer; margin-right: 5px;">${isCollapsed ? '+' : '‚àí'}</span>` : 
                        '<span style="margin-right: 12px;"></span>';
                    
                    html += `<th class="pivot-header slice-header" data-field="${rowField.name}" data-level="${rowField.level}" rowspan="2">${collapseIcon}${rowField.label}</th>`;
                });
            } else {
                // –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã" - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Å –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                const visibleTimeFields = this.getVisibleTimeFields(config);
                visibleTimeFields.forEach(rowField => {
                    const isCollapsible = this.hasChildTimeFields(config, rowField);
                    const isCollapsed = this.isTimeFieldCollapsed(rowField.name);
                    const collapseIcon = isCollapsible ? 
                        `<span class="collapse-icon" onclick="toggleTimeFieldCollapse('${rowField.name}')" style="cursor: pointer; margin-right: 5px;">${isCollapsed ? '+' : '‚àí'}</span>` : 
                        '<span style="margin-right: 12px;"></span>';
                    
                    html += `<th class="pivot-header time-header" data-field="${rowField.name}" data-level="${rowField.level}" rowspan="2">${collapseIcon}${rowField.label}</th>`;
                });
            }
            
            config.values.forEach(valueField => {
                const columnKeys = pivotData.getColumnKeys();
                html += `<th class="pivot-header metric-header" colspan="${columnKeys.length}">${valueField.label}</th>`;
            });
            html += '</tr>';
            
            // –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - —Å—Ä–µ–∑—ã
            html += '<tr>';
            config.values.forEach(valueField => {
                const columnKeys = pivotData.getColumnKeys();
                columnKeys.forEach(colKey => {
                    const colFields = pivotData.getColumnFields(colKey);
                    const colLabel = config.columns.map(colField => colFields[colField.name]).join(' - ');
                    html += `<th class="pivot-header slice-header">${colLabel || colKey}</th>`;
                });
            });
            html += '</tr>';
        } else if (config.mode === 'time-series') {
            // –†–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
            html += '<tr>';
            
            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π (—Å—Ç—Ä–æ–∫–∏) —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–Ω–∏—è
            const visibleTimeFields = this.getVisibleTimeFields(config);
            visibleTimeFields.forEach(rowField => {
                const isCollapsible = this.hasChildTimeFields(config, rowField);
                const isCollapsed = this.isTimeFieldCollapsed(rowField.name);
                const collapseIcon = isCollapsible ? 
                    `<span class="collapse-icon" onclick="toggleTimeFieldCollapse('${rowField.name}')" style="cursor: pointer; margin-right: 5px;">${isCollapsed ? '+' : '‚àí'}</span>` : 
                    '<span style="margin-right: 12px;"></span>';
                
                html += `<th class="pivot-header time-header" data-field="${rowField.name}" data-level="${rowField.level}">${collapseIcon}${rowField.label}</th>`;
            });
            
            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ (–∑–Ω–∞—á–µ–Ω–∏—è)
            config.values.forEach(valueField => {
                html += `<th class="pivot-header">${valueField.label}</th>`;
            });
            
            html += '</tr>';
        } else if (config.mode === 'slices') {
            // –†–µ–∂–∏–º —Å—Ä–µ–∑–æ–≤
            html += '<tr>';
            
            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö —Å—Ä–µ–∑–æ–≤ (—Å—Ç—Ä–æ–∫–∏) —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–Ω–∏—è
            const visibleSliceFields = this.getVisibleSliceFields(config);
            visibleSliceFields.forEach(rowField => {
                const isCollapsible = this.hasChildSliceFields(config, rowField);
                const isCollapsed = this.isSliceFieldCollapsed(rowField.name);
                const collapseIcon = isCollapsible ? 
                    `<span class="collapse-icon" onclick="toggleSliceFieldCollapse('${rowField.name}')" style="cursor: pointer; margin-right: 5px;">${isCollapsed ? '+' : '‚àí'}</span>` : 
                    '<span style="margin-right: 12px;"></span>';
                
                html += `<th class="pivot-header slice-header" data-field="${rowField.name}" data-level="${rowField.level}">${collapseIcon}${rowField.label}</th>`;
            });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è)
            if (config.columns.length > 0) {
                config.columns.forEach(colField => {
                    html += `<th class="pivot-header time-header" data-field="${colField.name}">${colField.label}</th>`;
                });
            }
            
            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ (–∑–Ω–∞—á–µ–Ω–∏—è)
            config.values.forEach(valueField => {
                html += `<th class="pivot-header">${valueField.label}</th>`;
            });
            
            html += '</tr>';
        } else {
            // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            html += '<tr>';
            
            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å—Ç—Ä–æ–∫
            config.rows.forEach(rowField => {
                html += `<th class="pivot-header">${rowField.label}</th>`;
            });
            
            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤
            config.columns.forEach(colField => {
                html += `<th class="pivot-header">${colField.label}</th>`;
            });
            
            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π
            config.values.forEach(valueField => {
                html += `<th class="pivot-header">${valueField.label}</th>`;
            });
            
            html += '</tr>';
        }
        
        html += '</thead>';
        return html;
    }
    
    createRowsHTML(pivotData, config) {
        let html = '<tbody>';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É Total –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        html += this.createTotalRowHTML(pivotData, config);
        
        if (config.mode === 'split-columns') {
            // –†–µ–∂–∏–º —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
            const rowKeys = pivotData.getRowKeys();
            const columnKeys = pivotData.getColumnKeys();
            
            rowKeys.forEach(rowKey => {
                html += '<tr>';
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                if (config.originalMode === 'slices') {
                    // –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º "—Å—Ä–µ–∑—ã" - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–∑—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö
                    const visibleSliceFields = this.getVisibleSliceFields(config);
                    const rowFields = pivotData.getRowFields(rowKey, visibleSliceFields);
                    visibleSliceFields.forEach(rowField => {
                        html += `<td class="pivot-cell">${rowFields[rowField.name] || ''}</td>`;
                    });
                } else {
                    // –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã" - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö
                    const visibleTimeFields = this.getVisibleTimeFields(config);
                    const rowFields = pivotData.getRowFields(rowKey, visibleTimeFields);
                    visibleTimeFields.forEach(rowField => {
                        html += `<td class="pivot-cell">${rowFields[rowField.name] || ''}</td>`;
                    });
                }
                
                // –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ –∏ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (—Å—Ä–µ–∑–∞)
                config.values.forEach(valueField => {
                    columnKeys.forEach(colKey => {
                        const value = pivotData.getValue(rowKey, colKey, valueField.name);
                        html += `<td class="pivot-cell" style="text-align: right;">${this.formatValue(value)}</td>`;
                    });
                });
                
                html += '</tr>';
            });
        } else if (config.mode === 'time-series') {
            // –†–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
            const rowKeys = pivotData.getRowKeys();
            
            rowKeys.forEach(rowKey => {
                html += '<tr>';
                
                // –ó–Ω–∞—á–µ–Ω–∏—è –≤–∏–¥–∏–º—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π (—Å—Ç—Ä–æ–∫–∏)
                const rowFields = pivotData.getRowFields(rowKey);
                const visibleTimeFields = this.getVisibleTimeFields(config);
                visibleTimeFields.forEach(rowField => {
                    html += `<td class="pivot-cell">${rowFields[rowField.name] || ''}</td>`;
                });
                
                // –ó–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ - –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –≤ –≥—Ä—É–ø–ø–µ
                config.values.forEach(valueField => {
                    const rowGroup = pivotData.rowGroups.get(rowKey);
                    let aggregatedValue = 0;
                    
                    // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ –≤ –≥—Ä—É–ø–ø–µ —Å—Ç—Ä–æ–∫
                    if (rowGroup && rowGroup.rows) {
                        console.log(`–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è ${rowKey}, –º–µ—Ç—Ä–∏–∫–∞ ${valueField.name}:`, {
                            rowCount: rowGroup.rows.length,
                            rows: rowGroup.rows.slice(0, 3) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
                        });
                        
                        rowGroup.rows.forEach((row, index) => {
                            const value = parseFloat(row[valueField.name]) || 0;
                            aggregatedValue += value;
                            
                            if (index < 3) { // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è
                                console.log(`  –°—Ç—Ä–æ–∫–∞ ${index}: ${row[valueField.name]} -> ${value}`);
                            }
                        });
                        
                        console.log(`–ò—Ç–æ–≥–æ –¥–ª—è ${rowKey}: ${aggregatedValue}`);
                    }
                    
                    html += `<td class="pivot-cell" style="text-align: right;">${this.formatValue(aggregatedValue)}</td>`;
                });
                
                html += '</tr>';
            });
        } else if (config.mode === 'slices') {
            // –†–µ–∂–∏–º —Å—Ä–µ–∑–æ–≤
            const rowKeys = pivotData.getRowKeys();
            const columnKeys = pivotData.getColumnKeys();
            
            rowKeys.forEach(rowKey => {
                html += '<tr>';
                
                // –ó–Ω–∞—á–µ–Ω–∏—è –≤–∏–¥–∏–º—ã—Ö —Å—Ä–µ–∑–æ–≤ (—Å—Ç—Ä–æ–∫–∏)
                const rowFields = pivotData.getRowFields(rowKey);
                const visibleSliceFields = this.getVisibleSliceFields(config);
                visibleSliceFields.forEach(rowField => {
                    html += `<td class="pivot-cell">${rowFields[rowField.name] || ''}</td>`;
                });
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è)
                if (config.columns.length > 0) {
                    columnKeys.forEach(colKey => {
                        const colFields = pivotData.getColumnFields(colKey);
                        config.columns.forEach(colField => {
                            html += `<td class="pivot-cell">${colFields[colField.name] || ''}</td>`;
                        });
                    });
                }
                
                // –ó–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ - –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –≤ –≥—Ä—É–ø–ø–µ
                config.values.forEach(valueField => {
                    const rowGroup = pivotData.rowGroups.get(rowKey);
                    let aggregatedValue = 0;
                    
                    // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ –≤ –≥—Ä—É–ø–ø–µ —Å—Ç—Ä–æ–∫
                    if (rowGroup && rowGroup.rows) {
                        rowGroup.rows.forEach(row => {
                            const value = parseFloat(row[valueField.name]) || 0;
                            aggregatedValue += value;
                        });
                    }
                    
                    html += `<td class="pivot-cell" style="text-align: right;">${this.formatValue(aggregatedValue)}</td>`;
                });
                
                html += '</tr>';
            });
        } else {
            // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            const rowKeys = pivotData.getRowKeys();
            
            rowKeys.forEach(rowKey => {
                html += '<tr>';
                
                // –ó–Ω–∞—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
                const rowFields = pivotData.getRowFields(rowKey);
                config.rows.forEach(rowField => {
                    html += `<td class="pivot-cell">${rowFields[rowField.name] || ''}</td>`;
                });
                
                // –ó–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
                const columnKeys = pivotData.getColumnKeys();
                columnKeys.forEach(colKey => {
                    const colFields = pivotData.getColumnFields(colKey);
                    config.columns.forEach(colField => {
                        html += `<td class="pivot-cell">${colFields[colField.name] || ''}</td>`;
                    });
                });
                
                // –ó–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ - –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –≤ –≥—Ä—É–ø–ø–µ
                config.values.forEach(valueField => {
                    const rowGroup = pivotData.rowGroups.get(rowKey);
                    let aggregatedValue = 0;
                    
                    // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ –≤ –≥—Ä—É–ø–ø–µ —Å—Ç—Ä–æ–∫
                    if (rowGroup && rowGroup.rows) {
                        rowGroup.rows.forEach(row => {
                            const value = parseFloat(row[valueField.name]) || 0;
                            aggregatedValue += value;
                        });
                    }
                    
                    html += `<td class="pivot-cell" style="text-align: right;">${this.formatValue(aggregatedValue)}</td>`;
                });
                
                html += '</tr>';
            });
        }
        
        html += '</tbody>';
        return html;
    }
    
    formatValue(value) {
        if (typeof value === 'number') {
            return new Intl.NumberFormat('ru-RU', {
                minimumFractionDigits: 0,
                maximumFractionDigits: 2
            }).format(value);
        }
        return value || '';
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —Å—Ç—Ä–æ–∫–∏ Total
    createTotalRowHTML(pivotData, config) {
        let html = '<tr class="pivot-total-row">';
        
        if (config.mode === 'split-columns') {
            // –†–µ–∂–∏–º —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
            const columnKeys = pivotData.getColumnKeys();
            const totals = pivotData.calculateTotals(config);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if (config.originalMode === 'slices') {
                // –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º "—Å—Ä–µ–∑—ã" - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–∑—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö
                const visibleSliceFields = this.getVisibleSliceFields(config);
                visibleSliceFields.forEach((field, index) => {
                    const cellContent = index === 0 ? '<strong>Total</strong>' : '';
                    html += `<td class="pivot-cell pivot-total-cell">${cellContent}</td>`;
                });
            } else {
                // –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã" - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö
                const visibleTimeFields = this.getVisibleTimeFields(config);
                visibleTimeFields.forEach((field, index) => {
                    const cellContent = index === 0 ? '<strong>Total</strong>' : '';
                    html += `<td class="pivot-cell pivot-total-cell">${cellContent}</td>`;
                });
            }
            
            // –ò—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ –∏ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (—Å—Ä–µ–∑–∞)
            config.values.forEach(valueField => {
                columnKeys.forEach(colKey => {
                    const totalValue = totals[valueField.name][colKey] || 0;
                    html += `<td class="pivot-cell pivot-total-cell" style="text-align: right; font-weight: bold;">${this.formatValue(totalValue)}</td>`;
                });
            });
            
        } else if (config.mode === 'time-series') {
            // –†–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
            const visibleTimeFields = this.getVisibleTimeFields(config);
            const totals = pivotData.calculateTotals(config);
            
            // –Ø—á–µ–π–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π —Å "Total" –≤ –ø–µ—Ä–≤–æ–π
            visibleTimeFields.forEach((field, index) => {
                const cellContent = index === 0 ? '<strong>Total</strong>' : '';
                html += `<td class="pivot-cell pivot-total-cell">${cellContent}</td>`;
            });
            
            // –ò—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–µ—Ç—Ä–∏–∫ (—Å—É–º–º–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º —Å—Ç–æ–ª–±—Ü–∞–º)
            config.values.forEach(valueField => {
                const columnKeys = pivotData.getColumnKeys();
                let totalValue = 0;
                columnKeys.forEach(colKey => {
                    totalValue += totals[valueField.name][colKey] || 0;
                });
                html += `<td class="pivot-cell pivot-total-cell" style="text-align: right; font-weight: bold;">${this.formatValue(totalValue)}</td>`;
            });
        } else if (config.mode === 'slices') {
            // –†–µ–∂–∏–º —Å—Ä–µ–∑–æ–≤
            const totals = pivotData.calculateTotals(config);
            const visibleSliceFields = this.getVisibleSliceFields(config);
            
            // –Ø—á–µ–π–∫–∏ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö —Å—Ä–µ–∑–æ–≤ —Å "Total" –≤ –ø–µ—Ä–≤–æ–π
            visibleSliceFields.forEach((field, index) => {
                const cellContent = index === 0 ? '<strong>Total</strong>' : '';
                html += `<td class="pivot-cell pivot-total-cell">${cellContent}</td>`;
            });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è)
            if (config.columns.length > 0) {
                config.columns.forEach((field, index) => {
                    const cellContent = index === 0 ? '<strong>Total</strong>' : '';
                    html += `<td class="pivot-cell pivot-total-cell">${cellContent}</td>`;
                });
            }
            
            // –ò—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–µ—Ç—Ä–∏–∫ (—Å—É–º–º–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º —Å—Ç–æ–ª–±—Ü–∞–º)
            config.values.forEach(valueField => {
                const columnKeys = pivotData.getColumnKeys();
                let totalValue = 0;
                columnKeys.forEach(colKey => {
                    totalValue += totals[valueField.name][colKey] || 0;
                });
                html += `<td class="pivot-cell pivot-total-cell" style="text-align: right; font-weight: bold;">${this.formatValue(totalValue)}</td>`;
            });
        } else {
            // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            const visibleTimeFields = this.getVisibleTimeFields(config);
            const totals = pivotData.calculateTotals(config);
            
            // –Ø—á–µ–π–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π —Å "Total" –≤ –ø–µ—Ä–≤–æ–π
            visibleTimeFields.forEach((field, index) => {
                const cellContent = index === 0 ? '<strong>Total</strong>' : '';
                html += `<td class="pivot-cell pivot-total-cell">${cellContent}</td>`;
            });
            
            // –ò—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–µ—Ç—Ä–∏–∫
            config.values.forEach(valueField => {
                const columnKeys = pivotData.getColumnKeys();
                let totalValue = 0;
                columnKeys.forEach(colKey => {
                    totalValue += totals[valueField.name][colKey] || 0;
                });
                html += `<td class="pivot-cell pivot-total-cell" style="text-align: right; font-weight: bold;">${this.formatValue(totalValue)}</td>`;
            });
        }
        
        html += '</tr>';
        return html;
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    hasChildTimeFields(config, field) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º
        return config.rows.some(otherField => 
            otherField.type === 'time' && otherField.level > field.level
        );
    }
    
    hasChildSliceFields(config, field) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ–ª—è —Å—Ä–µ–∑–æ–≤ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º
        return config.rows.some(otherField => 
            otherField.type === 'slice' && otherField.level > field.level
        );
    }
    
    isTimeFieldCollapsed(fieldName) {
        return this.collapsedTimeFields.has(fieldName);
    }
    
    isSliceFieldCollapsed(fieldName) {
        return this.collapsedSliceFields.has(fieldName);
    }
    
    toggleTimeFieldCollapse(fieldName) {
        if (this.collapsedTimeFields.has(fieldName)) {
            this.collapsedTimeFields.delete(fieldName);
        } else {
            this.collapsedTimeFields.add(fieldName);
        }
        console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—è:', fieldName, '–°–≤–µ—Ä–Ω—É—Ç–æ:', this.collapsedTimeFields.has(fieldName));
    }
    
    toggleSliceFieldCollapse(fieldName) {
        if (this.collapsedSliceFields.has(fieldName)) {
            this.collapsedSliceFields.delete(fieldName);
        } else {
            this.collapsedSliceFields.add(fieldName);
        }
        console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—è —Å—Ä–µ–∑–∞:', fieldName, '–°–≤–µ—Ä–Ω—É—Ç–æ:', this.collapsedSliceFields.has(fieldName));
    }
    
    getVisibleTimeFields(config) {
        // –í —Ä–µ–∂–∏–º–µ —Å—Ä–µ–∑–æ–≤ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –≤ —Å—Ç—Ä–æ–∫–∞—Ö
        if (config.mode === 'slices') {
            return [];
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è (–Ω–µ —Å–≤–µ—Ä–Ω—É—Ç—ã–µ)
        return config.rows.filter(field => {
            if (field.type !== 'time') return true;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤–µ—Ä–Ω—É—Ç –ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
            const parentField = config.rows.find(parent => 
                parent.type === 'time' && parent.level < field.level && 
                this.collapsedTimeFields.has(parent.name)
            );
            
            return !parentField;
        });
    }
    
    getVisibleSliceFields(config) {
        // –í —Ä–µ–∂–∏–º–µ —Å—Ä–µ–∑–æ–≤ –∏–ª–∏ split-columns –∏–∑ —Å—Ä–µ–∑–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—è —Å—Ä–µ–∑–æ–≤ (–Ω–µ —Å–≤–µ—Ä–Ω—É—Ç—ã–µ)
        if (config.mode === 'slices' || (config.mode === 'split-columns' && config.originalMode === 'slices')) {
            return config.rows.filter(field => {
                if (field.type !== 'slice') return true;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤–µ—Ä–Ω—É—Ç –ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
                const parentField = config.rows.find(parent => 
                    parent.type === 'slice' && parent.level < field.level && 
                    this.collapsedSliceFields.has(parent.name)
                );
                
                return !parentField;
            });
        }
        
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
function createFiltersFromMapping(mappingData) {
    const filters = [];
    
    if (!mappingData || !mappingData.columns) {
        return filters;
    }
    
    mappingData.columns.forEach(col => {
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –∏ —Å—Ä–µ–∑–æ–≤ (dimensions)
        if (col.role === 'dimension' && col.include) {
            let fieldType = 'text';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
            if (col.type === 'numeric') {
                fieldType = 'number';
            } else if (col.type === 'date') {
                fieldType = 'date';
            } else if (col.type === 'text') {
                // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π (–≤–∫–ª—é—á–∞—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
                fieldType = 'text';
            }
            
            const filter = new PivotFilter(col.name, fieldType, col.name);
            filters.push(filter);
            console.log('–°–æ–∑–¥–∞–Ω —Ñ–∏–ª—å—Ç—Ä:', { name: col.name, type: fieldType, time_series: col.time_series });
        }
    });
    
    return filters;
}

function createPivotConfigFromMapping(mappingData, mode = 'normal', splitBySlice = '', originalMode = '') {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞:', { mappingData, mode, splitBySlice, originalMode });
    
    const config = new PivotConfig();
    config.setMode(mode);
    config.setOriginalMode(originalMode);
    
    if (!mappingData || !mappingData.columns) {
        console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–∞–ø–ø–∏–Ω–≥–∞');
        return config;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Å—Ç—Ä–æ–∫, —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–π
    const timeFields = [];
    const sliceFields = [];
    const metricFields = [];
    
    console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞:', mappingData.columns);
    
    mappingData.columns.forEach(col => {
        console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É:', col);
        if (col.role === 'metric') {
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if (mappingData.selectedMetrics && mappingData.selectedMetrics.includes(col.name)) {
                metricFields.push(new PivotField(col.name, col.name, 'metric'));
                console.log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞:', col.name);
            } else if (!mappingData.selectedMetrics && metricFields.length === 0) {
                // Fallback: –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é
                metricFields.push(new PivotField(col.name, col.name, 'metric'));
                console.log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ (fallback):', col.name);
            }
        } else if (col.time_series && col.time_series !== '') {
            timeFields.push(new PivotField(col.name, col.name, 'time', col.nesting_level || 0));
            console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª–µ:', col.name);
        } else if (col.role === 'dimension' && col.include) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–∞–∫ —Å—Ä–µ–∑—ã
            sliceFields.push(new PivotField(col.name, col.name, 'slice', col.nesting_level || 0));
            console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ —Å—Ä–µ–∑–∞:', col.name);
        }
    });
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª–µ–π:', {
        timeFields: timeFields.length,
        sliceFields: sliceFields.length,
        metricFields: metricFields.length,
        timeFieldsNames: timeFields.map(f => f.name),
        sliceFieldsNames: sliceFields.map(f => f.name),
        metricFieldsNames: metricFields.map(f => f.name)
    });
    
    console.log('–ü–æ–ª—è —Å—Ä–µ–∑–æ–≤ –¥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:', sliceFields.map(f => ({ name: f.name, level: f.level })));
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –ø–æ —É—Ä–æ–≤–Ω—é
    timeFields.sort((a, b) => a.level - b.level);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—è —Å—Ä–µ–∑–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é
    sliceFields.sort((a, b) => a.level - b.level);
    
    console.log('–ü–æ–ª—è —Å—Ä–µ–∑–æ–≤ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:', sliceFields.map(f => ({ name: f.name, level: f.level })));
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if (mode === 'split-columns' && splitBySlice) {
        // –†–µ–∂–∏–º —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ä–µ–∂–∏–º—É
        if (originalMode === 'slices') {
            // –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º "—Å—Ä–µ–∑—ã" - —Å—Ä–µ–∑—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö, –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö
            const splitField = timeFields.find(field => field.name === splitBySlice);
            console.log('DEBUG: splitField –Ω–∞–π–¥–µ–Ω:', splitField);
            console.log('DEBUG: sliceFields:', sliceFields.map(f => f.name));
            console.log('DEBUG: timeFields:', timeFields.map(f => f.name));
            if (splitField) {
                config.setRows(sliceFields);
                config.setColumns([splitField]);
                config.setValues(metricFields);
                console.log('–†–µ–∂–∏–º split-columns (–∏–∑ —Å—Ä–µ–∑–æ–≤):', { 
                    sliceFields: sliceFields.length, 
                    sliceFieldsNames: sliceFields.map(f => f.name),
                    columns: 1, 
                    values: metricFields.length 
                });
            } else {
                console.error('ERROR: splitField –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è', splitBySlice);
            }
        } else {
            // –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã" - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö, —Å—Ä–µ–∑ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö
            config.setRows(timeFields);
            config.setColumns([new PivotField(splitBySlice, splitBySlice, 'slice')]);
            config.setValues(metricFields);
            console.log('–†–µ–∂–∏–º split-columns (–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤):', { timeFields: timeFields.length, columns: 1, values: metricFields.length });
        }
    } else if (mode === 'time-series') {
        // –†–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö
        config.setRows(timeFields);
        config.setColumns([]);
        config.setValues(metricFields);
        console.log('–†–µ–∂–∏–º time-series:', { timeFields: timeFields.length, columns: 0, values: metricFields.length });
    } else if (mode === 'slices') {
        // –†–µ–∂–∏–º —Å—Ä–µ–∑–æ–≤ - —Å—Ä–µ–∑—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (splitBySlice) {
            // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ä—è–¥—É
            const splitField = timeFields.find(field => field.name === splitBySlice);
            if (splitField) {
                config.setRows(sliceFields);
                config.setColumns([splitField]);
                config.setValues(metricFields);
                console.log('–†–µ–∂–∏–º slices —Å —Ä–∞–∑–±–∏–≤–∫–æ–π:', { sliceFields: sliceFields.length, columns: 1, values: metricFields.length });
            } else {
                // Fallback: –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å—Ä–µ–∑–æ–≤
                config.setRows(sliceFields);
                config.setColumns([]);
                config.setValues(metricFields);
                console.log('–†–µ–∂–∏–º slices (fallback):', { sliceFields: sliceFields.length, columns: 0, values: metricFields.length });
            }
        } else {
            // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å—Ä–µ–∑–æ–≤
            config.setRows(sliceFields);
            config.setColumns([]);
            config.setValues(metricFields);
            console.log('–†–µ–∂–∏–º slices:', { sliceFields: sliceFields.length, columns: 0, values: metricFields.length });
        }
    } else {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        config.setRows(timeFields);
        config.setColumns(sliceFields);
        config.setValues(metricFields);
        console.log('–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º:', { timeFields: timeFields.length, sliceFields: sliceFields.length, values: metricFields.length });
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –∏ —Å—Ä–µ–∑–æ–≤
    const filters = createFiltersFromMapping(mappingData);
    config.filters = filters;
    
    console.log('–§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', {
        mode: config.mode,
        rows: config.rows.map(r => ({ name: r.name, type: r.type, level: r.level })),
        columns: config.columns.map(c => ({ name: c.name, type: c.type, level: c.level })),
        values: config.values.map(v => ({ name: v.name, type: v.type })),
        filters: config.filters.map(f => f.fieldName)
    });
    
    console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', config);
    return config;
}

function renderNewPivotTable(rawData, mappingData, mode = 'normal', splitBySlice = '', originalMode = '') {
    console.log('–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–æ–≤–æ–π —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', { 
        rawDataLength: rawData.length, 
        mappingData, 
        mode, 
        splitBySlice 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (rawData && rawData.length > 0) {
        console.log('–ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', rawData.slice(0, 3));
        console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', Object.keys(rawData[0] || {}));
    } else {
        console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞!');
        return false;
    }
    
    try {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const config = createPivotConfigFromMapping(mappingData, mode, splitBySlice, originalMode);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (window.currentFilters && window.currentFilters.length > 0) {
            config.filters = window.currentFilters;
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:', config.filters.map(f => ({ 
                name: f.fieldName, 
                isActive: f.isActive, 
                type: f.fieldType 
            })));
        } else {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å –¥–∞–Ω–Ω—ã–º–∏
            config.filters.forEach(filter => {
                filter.getAvailableValues(rawData);
            });
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        const renderer = new PivotRenderer('timeSeriesChartContainer');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –≤ loadTimeSeriesData
        let dataToProcess = rawData;
        console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${dataToProcess.length} —Å—Ç—Ä–æ–∫`);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const pivotData = new PivotData(dataToProcess);
        pivotData.process(config, renderer);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –ø—Ä–∏ –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–Ω–∏–∏
        window.currentPivotRenderer = renderer;
        window.currentPivotData = pivotData;
        window.currentPivotConfig = config;
        window.rawPivotData = rawData; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        
        renderer.render(pivotData, config);
        
        console.log('–ù–æ–≤–∞—è —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        if (typeof createAutoFilters === 'function') {
            console.log('–í—ã–∑—ã–≤–∞–µ–º createAutoFilters()...');
            try {
                createAutoFilters();
                console.log('createAutoFilters() –≤—ã–∑–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ createAutoFilters():', error);
            }
        } else {
            console.log('–§—É–Ω–∫—Ü–∏—è createAutoFilters –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ –Ω–æ–≤–æ–π —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', error);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        return false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        PivotField,
        PivotConfig,
        PivotData,
        PivotRenderer,
        createPivotConfigFromMapping,
        renderNewPivotTable
    };
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
    window.PivotField = PivotField;
    window.PivotFilter = PivotFilter;
    window.PivotConfig = PivotConfig;
    window.PivotData = PivotData;
    window.PivotRenderer = PivotRenderer;
    window.createPivotConfigFromMapping = createPivotConfigFromMapping;
    window.renderNewPivotTable = renderNewPivotTable;
    
    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–Ω–∏—è
    window.toggleTimeFieldCollapse = function(fieldName) {
        console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—è:', fieldName);
        
        // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (window.currentPivotRenderer) {
            window.currentPivotRenderer.toggleTimeFieldCollapse(fieldName);
            
            // –ü–µ—Ä–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–Ω–∏—è
            if (window.currentPivotData && window.currentPivotConfig) {
                // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                const rawData = window.currentPivotData.rawData;
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
                const newPivotData = new PivotData(rawData);
                newPivotData.process(window.currentPivotConfig, window.currentPivotRenderer);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∞–Ω–Ω—ã–µ
                window.currentPivotData = newPivotData;
                
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                window.currentPivotRenderer.render(newPivotData, window.currentPivotConfig);
            }
        }
    };
    
    window.toggleSliceFieldCollapse = function(fieldName) {
        console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—è —Å—Ä–µ–∑–∞:', fieldName);
        
        // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (window.currentPivotRenderer) {
            window.currentPivotRenderer.toggleSliceFieldCollapse(fieldName);
            
            // –ü–µ—Ä–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–Ω–∏—è
            if (window.currentPivotData && window.currentPivotConfig) {
                // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                const rawData = window.currentPivotData.rawData;
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
                const newPivotData = new PivotData(rawData);
                newPivotData.process(window.currentPivotConfig, window.currentPivotRenderer);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∞–Ω–Ω—ã–µ
                window.currentPivotData = newPivotData;
                
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                window.currentPivotRenderer.render(newPivotData, window.currentPivotConfig);
            }
        }
    };
    
    console.log('–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏');
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:', {
        PivotField: typeof PivotField,
        PivotConfig: typeof PivotConfig,
        PivotData: typeof PivotData,
        PivotRenderer: typeof PivotRenderer,
        createPivotConfigFromMapping: typeof createPivotConfigFromMapping,
        renderNewPivotTable: typeof renderNewPivotTable
    });
}

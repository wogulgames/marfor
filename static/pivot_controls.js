/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
 * –í–µ—Ä—Å–∏—è: 1.0.0
 */

class PivotControlsModule {
    constructor() {
        this.state = {
            currentMode: 'time-series',
            selectedMetrics: [],
            selectedSlices: [],
            selectedSplitField: ''
        };
        
        this.elements = {};
        this.dataMapping = null;
        this.onStateChange = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
     */
    init(config) {
        this.dataMapping = config.dataMapping;
        this.onStateChange = config.onStateChange;

        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.elements = {
            timeSeriesModeBtn: document.getElementById('timeSeriesModeBtn'),
            slicesModeBtn: document.getElementById('slicesModeBtn'),
            pivotModeTitle: document.getElementById('pivotModeTitle'),
            primaryFieldLabel: document.getElementById('primaryFieldLabel'),
            primaryFieldDropdownText: document.getElementById('primaryFieldDropdownText'),
            primaryFieldCheckboxes: document.getElementById('primaryFieldCheckboxes'),
            splitFieldLabel: document.getElementById('splitFieldLabel'),
            splitFieldDropdownText: document.getElementById('splitFieldDropdownText'),
            splitFieldRadioButtons: document.getElementById('splitFieldRadioButtons'),
            noSplitFieldText: document.getElementById('noSplitFieldText')
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const missingElements = Object.keys(this.elements).filter(key => !this.elements[key]);
        if (missingElements.length > 0) {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã:', missingElements);
            return false;
        }

        console.log('‚úÖ –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;
    }

    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞
     */
    populateSelects() {
        if (!this.dataMapping || !this.dataMapping.columns) {
            console.error('‚ùå –ù–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ–≤');
            return;
        }

        console.log('üöÄ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ–≤, —Ä–µ–∂–∏–º:', this.state.currentMode);

        // –û—á–∏—â–∞–µ–º —Å–µ–ª–µ–∫—Ç—ã
        this.elements.primaryFieldCheckboxes.innerHTML = '';
        this.elements.splitFieldRadioButtons.innerHTML = '';

        let availablePrimaryFields = [];
        let availableSplitFields = [];

        if (this.state.currentMode === 'time-series') {
            // –†–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
            availablePrimaryFields = this.dataMapping.columns.filter(col => 
                col.role === 'metric' && col.include !== false
            );
            availableSplitFields = this.dataMapping.columns.filter(col => 
                col.role === 'dimension' && !col.time_series && col.include !== false
            );

            this.elements.primaryFieldLabel.textContent = '–ú–µ—Ç—Ä–∏–∫–∏';
            this.elements.splitFieldLabel.textContent = '–†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º';
            this.elements.noSplitFieldText.textContent = '–¢–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã';
        } else {
            // –†–µ–∂–∏–º —Å—Ä–µ–∑–æ–≤
            availablePrimaryFields = this.dataMapping.columns.filter(col => 
                col.role === 'dimension' && !col.time_series && col.include !== false
            );
            availableSplitFields = this.dataMapping.columns.filter(col => 
                col.time_series && col.include !== false
            );

            this.elements.primaryFieldLabel.textContent = '–°—Ä–µ–∑—ã';
            this.elements.splitFieldLabel.textContent = '–†–∞–∑–±–∏–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏';
            this.elements.noSplitFieldText.textContent = '–¢–æ–ª—å–∫–æ —Å—Ä–µ–∑—ã';
        }

        console.log('üìä –û—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π:', availablePrimaryFields.length);
        console.log('üìä –ü–æ–ª–µ–π –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏:', availableSplitFields.length);

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—è
        availablePrimaryFields.forEach(field => {
            const li = document.createElement('li');
            li.className = 'dropdown-item-text';
            li.innerHTML = `
                <div class="form-check">
                    <input class="form-check-input" 
                           type="checkbox" 
                           id="primary-${this._sanitizeId(field.name)}" 
                           value="${this._escapeHtml(field.name)}" 
                           onchange="pivotControlsModule.updateSelectedPrimary()">
                    <label class="form-check-label" for="primary-${this._sanitizeId(field.name)}">
                        ${this._escapeHtml(field.name)}
                    </label>
                </div>
            `;
            this.elements.primaryFieldCheckboxes.appendChild(li);
        });

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–±–∏–≤–∫–∏
        availableSplitFields.forEach(field => {
            const li = document.createElement('li');
            li.className = 'dropdown-item-text';
            li.innerHTML = `
                <div class="form-check">
                    <input class="form-check-input" 
                           type="radio" 
                           name="splitFieldSelection" 
                           id="split-${this._sanitizeId(field.name)}" 
                           value="${this._escapeHtml(field.name)}" 
                           onchange="pivotControlsModule.updateSelectedSplit()">
                    <label class="form-check-label" for="split-${this._sanitizeId(field.name)}">
                        ${this._escapeHtml(field.name)}
                    </label>
                </div>
            `;
            this.elements.splitFieldRadioButtons.appendChild(li);
        });

        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (availablePrimaryFields.length > 0) {
            const firstCheckbox = document.getElementById(`primary-${this._sanitizeId(availablePrimaryFields[0].name)}`);
            if (firstCheckbox) {
                firstCheckbox.checked = true;
                this.updateSelectedPrimary();
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π (–º–µ—Ç—Ä–∏–∫–∏/—Å—Ä–µ–∑—ã)
     */
    updateSelectedPrimary() {
        const checkboxes = this.elements.primaryFieldCheckboxes.querySelectorAll('input[type="checkbox"]');
        const selected = [];

        checkboxes.forEach(checkbox => {
            if (checkbox.checked) {
                selected.push(checkbox.value);
            }
        });

        if (this.state.currentMode === 'time-series') {
            this.state.selectedMetrics = selected;
        } else {
            this.state.selectedSlices = selected;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥—Ä–æ–ø–±–æ–∫—Å–∞
        if (selected.length === 0) {
            this.elements.primaryFieldDropdownText.textContent = 
                this.state.currentMode === 'time-series' ? '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏' : '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–µ–∑—ã';
        } else if (selected.length === 1) {
            this.elements.primaryFieldDropdownText.textContent = selected[0];
        } else {
            this.elements.primaryFieldDropdownText.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${selected.length}`;
        }

        console.log('üìä –í—ã–±—Ä–∞–Ω–æ –ø–æ–ª–µ–π:', selected);

        // –í—ã–∑—ã–≤–∞–µ–º callback
        if (this.onStateChange) {
            this.onStateChange(this.state);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
     */
    updateSelectedSplit() {
        const selectedRadio = document.querySelector('input[name="splitFieldSelection"]:checked');
        const selectedField = selectedRadio ? selectedRadio.value : '';

        this.state.selectedSplitField = selectedField;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥—Ä–æ–ø–±–æ–∫—Å–∞
        if (selectedField) {
            this.elements.splitFieldDropdownText.textContent = `–†–∞–∑–±–∏–≤–∫–∞: ${selectedField}`;
        } else {
            this.elements.splitFieldDropdownText.textContent = 
                this.state.currentMode === 'time-series' ? '–¢–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã' : '–¢–æ–ª—å–∫–æ —Å—Ä–µ–∑—ã';
        }

        console.log('üìä –í—ã–±—Ä–∞–Ω–∞ —Ä–∞–∑–±–∏–≤–∫–∞:', selectedField);

        // –í—ã–∑—ã–≤–∞–µ–º callback
        if (this.onStateChange) {
            this.onStateChange(this.state);
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã / —Å—Ä–µ–∑—ã)
     */
    switchMode(mode) {
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞:', this.state.currentMode, '‚Üí', mode);

        this.state.currentMode = mode;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        this.elements.timeSeriesModeBtn.classList.toggle('active', mode === 'time-series');
        this.elements.slicesModeBtn.classList.toggle('active', mode === 'slices');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if (mode === 'time-series') {
            this.elements.pivotModeTitle.innerHTML = '<i class="fas fa-clock me-2"></i>–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã';
        } else {
            this.elements.pivotModeTitle.innerHTML = '<i class="fas fa-layer-group me-2"></i>–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: –°—Ä–µ–∑—ã';
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ —Ä–∞–∑–±–∏–≤–∫–∏
        this.state.selectedSplitField = '';
        const noSplitRadio = document.getElementById('noSplitFieldSelection');
        if (noSplitRadio) {
            noSplitRadio.checked = true;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç—ã
        this.populateSelects();

        // –í—ã–∑—ã–≤–∞–µ–º callback
        if (this.onStateChange) {
            this.onStateChange(this.state);
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
     */
    toggleAllPrimary(checkbox) {
        const checkboxes = this.elements.primaryFieldCheckboxes.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(cb => cb.checked = checkbox.checked);
        this.updateSelectedPrimary();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    getState() {
        return { ...this.state };
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setState(state) {
        if (!state) return;

        if (state.currentMode) {
            this.switchMode(state.currentMode);
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        if (state.selectedMetrics || state.selectedSlices) {
            const selected = state.currentMode === 'time-series' ? 
                state.selectedMetrics : state.selectedSlices;

            const checkboxes = this.elements.primaryFieldCheckboxes.querySelectorAll('input[type="checkbox"]');
            checkboxes.forEach(cb => {
                cb.checked = selected.includes(cb.value);
            });
            this.updateSelectedPrimary();
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–±–∏–≤–∫—É
        if (state.selectedSplitField) {
            const radio = document.getElementById(`split-${this._sanitizeId(state.selectedSplitField)}`);
            if (radio) {
                radio.checked = true;
                this.updateSelectedSplit();
            }
        }
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
     */
    _sanitizeId(value) {
        return String(value).replace(/[^a-zA-Z0-9-_]/g, '-');
    }

    _escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.pivotControlsModule = new PivotControlsModule();
console.log('‚úÖ –ú–æ–¥—É–ª—å pivot_controls.js –∑–∞–≥—Ä—É–∂–µ–Ω');


/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–ª–µ–±–Ω—ã–º–∏ –∫—Ä–æ—à–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 * –í–µ—Ä—Å–∏—è: 1.0.0
 */

class BreadcrumbsModule {
    constructor() {
        this.steps = [
            {
                id: 1,
                name: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
                shortName: '–ó–∞–≥—Ä—É–∑–∫–∞',
                url: '/',
                icon: 'üìÅ'
            },
            {
                id: 2,
                name: '–ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö',
                shortName: '–ú–∞–ø–ø–∏–Ω–≥',
                url: '/forecast/mapping',
                icon: 'üîß'
            },
            {
                id: 3,
                name: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
                shortName: '–ê–Ω–∞–ª–∏–∑',
                url: '/forecast',
                icon: 'üìà'
            },
            {
                id: 4,
                name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞',
                shortName: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞',
                url: '/forecast/settings',
                icon: '‚öôÔ∏è'
            },
            {
                id: 5,
                name: '–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π',
                shortName: '–û–±—É—á–µ–Ω–∏–µ',
                url: '/forecast/training',
                icon: 'üéì'
            },
            {
                id: 6,
                name: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞',
                shortName: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã',
                url: '/forecast/results',
                icon: 'üìä'
            }
        ];
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
     * @param {number} currentStep - –¢–µ–∫—É—â–∏–π —à–∞–≥ (1-5)
     * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
     */
    render(currentStep, containerId = 'breadcrumbContainer') {
        const container = document.getElementById(containerId);
        if (!container) {
            console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', containerId);
            return;
        }

        const html = `
            <div class="breadcrumb-container">
                <div class="step-indicator">
                    ${this.steps.map((step, index) => this._renderStep(step, currentStep, index)).join('')}
                </div>
            </div>
        `;

        container.innerHTML = html;
        console.log('‚úÖ –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω—ã, —Ç–µ–∫—É—â–∏–π —à–∞–≥:', currentStep);
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
     * @private
     */
    _renderStep(step, currentStep, index) {
        let stepClass = 'step-item';
        
        if (step.id < currentStep) {
            stepClass += ' completed';
        } else if (step.id === currentStep) {
            stepClass += ' active';
        } else {
            stepClass += ' disabled';
        }

        const isClickable = step.id < currentStep;
        const onClick = isClickable ? `onclick="breadcrumbsModule.navigateTo(${step.id})"` : '';
        const cursor = isClickable ? 'cursor: pointer;' : '';

        return `
            <div class="${stepClass}">
                <div class="step-circle" ${onClick} style="${cursor}">
                    ${step.id < currentStep ? '' : step.id}
                </div>
                <div class="step-label">${step.shortName}</div>
                ${index < this.steps.length - 1 ? '<div class="step-connector"></div>' : ''}
            </div>
        `;
    }

    /**
     * –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —à–∞–≥—É
     * @param {number} stepId - ID —à–∞–≥–∞
     */
    navigateTo(stepId) {
        const step = this.steps.find(s => s.id === stepId);
        if (!step) {
            console.error('–®–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω:', stepId);
            return;
        }

        console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É:', step.name);

        // –î–æ–±–∞–≤–ª—è–µ–º session_id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const currentSessionId = sessionStorage.getItem('currentSessionId') || 
                                 sessionStorage.getItem('sessionId');
        
        let url = step.url;
        if (currentSessionId && url !== '/') {
            url += `?session_id=${currentSessionId}`;
        }

        window.location.href = url;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
     * @returns {number} –ù–æ–º–µ—Ä —à–∞–≥–∞ (1-6)
     */
    getCurrentStepFromUrl() {
        const path = window.location.pathname;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è —à–∞–≥–æ–≤ 1 –∏ 3
        const hasProcessedData = sessionStorage.getItem('dataMapping') !== null;
        
        if (path === '/' || path === '/forecast') {
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–º–∞–ø–ø–∏–Ω–≥ –ø—Ä–∏–º–µ–Ω–µ–Ω) - —ç—Ç–æ —à–∞–≥ 3 (–ê–Ω–∞–ª–∏–∑)
            // –ï—Å–ª–∏ –Ω–µ—Ç - —ç—Ç–æ —à–∞–≥ 1 (–ó–∞–≥—Ä—É–∑–∫–∞)
            return hasProcessedData ? 3 : 1;
        } else if (path.includes('/mapping')) {
            return 2;
        } else if (path.includes('/settings')) {
            return 4;
        } else if (path.includes('/training')) {
            return 5;
        } else if (path.includes('/results')) {
            return 6;
        }
        
        return 1;
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ URL
     */
    autoRender(containerId = 'breadcrumbContainer') {
        const currentStep = this.getCurrentStepFromUrl();
        this.render(currentStep, containerId);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.breadcrumbsModule = new BreadcrumbsModule();
console.log('‚úÖ –ú–æ–¥—É–ª—å breadcrumbs.js –∑–∞–≥—Ä—É–∂–µ–Ω');


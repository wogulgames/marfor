/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
 * –í–µ—Ä—Å–∏—è: 1.0.0
 */

class PivotFiltersModule {
    constructor() {
        this.filters = [];
        this.filtersContainer = null;
        this.onFilterChange = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
     * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
     * @param {Function} onFilterChange - Callback –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    init(containerId, onFilterChange) {
        this.filtersContainer = document.getElementById(containerId);
        this.onFilterChange = onFilterChange;
        
        if (!this.filtersContainer) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω:', containerId);
            return false;
        }
        
        console.log('‚úÖ –ú–æ–¥—É–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏ –º–∞–ø–ø–∏–Ω–≥–∞
     * @param {Array} data - –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
     * @param {Object} mapping - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–∞
     * @returns {Array} –ú–∞—Å—Å–∏–≤ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    createFilters(data, mapping) {
        if (!this.filtersContainer) {
            console.error('‚ùå –ú–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return [];
        }

        if (!data || !mapping || !mapping.columns) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤');
            return [];
        }

        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è', data.length, '—Å—Ç—Ä–æ–∫');

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.filtersContainer.innerHTML = '';
        this.filters = [];

        // –ü–æ–ª—É—á–∞–µ–º dimension-–∫–æ–ª–æ–Ω–∫–∏
        const dimensionColumns = mapping.columns.filter(col => 
            col.role === 'dimension' && col.include !== false
        );

        console.log('üìä –ù–∞–π–¥–µ–Ω–æ dimension-–∫–æ–ª–æ–Ω–æ–∫:', dimensionColumns.length);

        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∫–∞–∂–¥–æ–π dimension-–∫–æ–ª–æ–Ω–∫–∏
        dimensionColumns.forEach(col => {
            const filter = this._createFilter(col.name, col.type, data);
            if (filter) {
                this.filters.push(filter);
            }
        });

        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', this.filters.length);
        return this.filters;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
     * @private
     */
    _createFilter(columnName, columnType, data) {
        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const uniqueValues = [...new Set(data.map(row => row[columnName]))]
            .filter(v => v !== null && v !== undefined && v !== '')
            .sort((a, b) => {
                if (columnType === 'numeric') {
                    return Number(a) - Number(b);
                }
                return String(a).localeCompare(String(b));
            });

        if (uniqueValues.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞:', columnName);
            return null;
        }

        console.log(`üìå –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ "${columnName}":`, uniqueValues.length, '–∑–Ω–∞—á–µ–Ω–∏–π');

        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        const filterDiv = document.createElement('div');
        filterDiv.className = 'filter-card';
        filterDiv.dataset.filterName = columnName;

        const maxVisible = 20;
        const hasMore = uniqueValues.length > maxVisible;
        const visibleValues = uniqueValues.slice(0, maxVisible);

        filterDiv.innerHTML = `
            <div class="filter-header">
                <span>${columnName}</span>
                <button class="btn btn-sm btn-link text-decoration-none" onclick="pivotFiltersModule.toggleFilter('${columnName}')">
                    <i class="fas fa-chevron-down" id="filter-icon-${columnName}"></i>
                </button>
            </div>
            <div class="filter-body" id="filter-body-${columnName}">
                <div class="mb-2">
                    <button class="btn btn-sm btn-outline-secondary me-1" onclick="pivotFiltersModule.selectAll('${columnName}')">
                        –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" onclick="pivotFiltersModule.deselectAll('${columnName}')">
                        –°–Ω—è—Ç—å –≤—Å–µ
                    </button>
                </div>
                <div class="filter-options" id="filter-options-${columnName}">
                    ${visibleValues.map(value => `
                        <div class="filter-option">
                            <input type="checkbox" 
                                   class="form-check-input" 
                                   id="filter-${columnName}-${this._sanitizeId(value)}" 
                                   value="${this._escapeHtml(value)}" 
                                   data-filter="${columnName}"
                                   checked 
                                   onchange="pivotFiltersModule.onFilterValueChange()">
                            <label class="form-check-label" for="filter-${columnName}-${this._sanitizeId(value)}">
                                ${this._escapeHtml(value)}
                            </label>
                        </div>
                    `).join('')}
                    ${hasMore ? `
                        <div class="text-muted small mt-2">
                            <i class="fas fa-info-circle me-1"></i>
                            –ü–æ–∫–∞–∑–∞–Ω–æ ${maxVisible} –∏–∑ ${uniqueValues.length} –∑–Ω–∞—á–µ–Ω–∏–π
                            <button class="btn btn-sm btn-link p-0 ms-2" onclick="pivotFiltersModule.showAllValues('${columnName}', ${JSON.stringify(uniqueValues).replace(/"/g, '&quot;')})">
                                –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
                            </button>
                        </div>
                    ` : ''}
                </div>
            </div>
        `;

        this.filtersContainer.appendChild(filterDiv);

        return {
            field: columnName,
            type: columnType,
            values: uniqueValues,
            allValues: uniqueValues
        };
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    toggleFilter(columnName) {
        const body = document.getElementById(`filter-body-${columnName}`);
        const icon = document.getElementById(`filter-icon-${columnName}`);
        
        if (body && icon) {
            const isCollapsed = body.style.display === 'none';
            body.style.display = isCollapsed ? 'block' : 'none';
            icon.className = isCollapsed ? 'fas fa-chevron-down' : 'fas fa-chevron-up';
        }
    }

    /**
     * –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
     */
    selectAll(columnName) {
        const checkboxes = document.querySelectorAll(`input[data-filter="${columnName}"]`);
        checkboxes.forEach(cb => cb.checked = true);
        this.onFilterValueChange();
    }

    /**
     * –°–Ω—è—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
     */
    deselectAll(columnName) {
        const checkboxes = document.querySelectorAll(`input[data-filter="${columnName}"]`);
        checkboxes.forEach(cb => cb.checked = false);
        this.onFilterValueChange();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
     */
    showAllValues(columnName, allValues) {
        const optionsContainer = document.getElementById(`filter-options-${columnName}`);
        if (!optionsContainer) return;

        optionsContainer.innerHTML = allValues.map(value => `
            <div class="filter-option">
                <input type="checkbox" 
                       class="form-check-input" 
                       id="filter-${columnName}-${this._sanitizeId(value)}" 
                       value="${this._escapeHtml(value)}" 
                       data-filter="${columnName}"
                       checked 
                       onchange="pivotFiltersModule.onFilterValueChange()">
                <label class="form-check-label" for="filter-${columnName}-${this._sanitizeId(value)}">
                    ${this._escapeHtml(value)}
                </label>
            </div>
        `).join('');
    }

    /**
     * Callback –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
     */
    onFilterValueChange() {
        if (this.onFilterChange) {
            this.onFilterChange();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     * @param {Array} data - –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * @returns {Array} –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    getFilteredData(data) {
        if (!data || data.length === 0) {
            return [];
        }

        let filtered = [...data];

        this.filters.forEach(filter => {
            const selectedValues = this.getSelectedValues(filter.field);
            
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –Ω–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
            if (selectedValues.length > 0 && selectedValues.length < filter.values.length) {
                filtered = filtered.filter(row => {
                    const rowValue = String(row[filter.field]);
                    return selectedValues.includes(rowValue);
                });
            }
        });

        console.log(`üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: ${data.length} ‚Üí ${filtered.length} —Å—Ç—Ä–æ–∫`);
        return filtered;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
     * @param {string} columnName - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
     */
    getSelectedValues(columnName) {
        const checkboxes = document.querySelectorAll(`input[data-filter="${columnName}"]:checked`);
        return Array.from(checkboxes).map(cb => cb.value);
    }

    /**
     * –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    resetAll() {
        const checkboxes = this.filtersContainer.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(cb => cb.checked = true);
        this.onFilterValueChange();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
     * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    getState() {
        const state = {};
        this.filters.forEach(filter => {
            state[filter.field] = this.getSelectedValues(filter.field);
        });
        return state;
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
     * @param {Object} state - –û–±—ä–µ–∫—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    setState(state) {
        if (!state) return;

        Object.keys(state).forEach(field => {
            const selectedValues = state[field];
            const checkboxes = document.querySelectorAll(`input[data-filter="${field}"]`);
            
            checkboxes.forEach(cb => {
                cb.checked = selectedValues.includes(cb.value);
            });
        });

        this.onFilterValueChange();
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
     */
    _sanitizeId(value) {
        return String(value).replace(/[^a-zA-Z0-9-_]/g, '-');
    }

    _escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.pivotFiltersModule = new PivotFiltersModule();
console.log('‚úÖ –ú–æ–¥—É–ª—å pivot_filters.js –∑–∞–≥—Ä—É–∂–µ–Ω');


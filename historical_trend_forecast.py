#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–±—É—á–µ–Ω–∏–µ–º –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ –∞–≤–≥—É—Å—Ç–∞ 2025
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

class HistoricalTrendForecaster:
    def __init__(self, csv_file=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤—â–∏–∫–∞ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        self.csv_file = csv_file
        self.df = None
        self.train_df = None
        self.test_df = None
        self.forecast_df = None
        self.model = None
        self.scaler = None
        
    def load_and_analyze_data(self, csv_file=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        if csv_file:
            self.csv_file = csv_file
            
        if not self.csv_file:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            
        print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.csv_file}...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        separators = [',', ';', '\t', '|']
        for sep in separators:
            try:
                self.df = pd.read_csv(self.csv_file, sep=sep)
                if len(self.df.columns) > 1:
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}': {len(self.df)} –∑–∞–ø–∏—Å–µ–π, {len(self.df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
                    break
            except:
                continue
        
        if self.df is None or len(self.df.columns) <= 1:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º")
            return None
        
        return self.df
    
    def clean_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüßπ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•:")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        for col in ['year', 'month']:
            if col in self.df.columns:
                self.df[col] = pd.to_numeric(self.df[col], errors='coerce')
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        initial_count = len(self.df)
        self.df = self.df.dropna(subset=['year', 'month'])
        print(f"  –£–¥–∞–ª–µ–Ω–æ {initial_count - len(self.df)} –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –û—á–∏—Å—Ç–∫–∞ revenue_total
        if 'revenue_total' in self.df.columns:
            self.df['revenue_total'] = self.df['revenue_total'].astype(str).str.replace(',', '').str.replace(' ', '')
            self.df['revenue_total'] = pd.to_numeric(self.df['revenue_total'], errors='coerce')
            self.df['revenue_total'] = self.df['revenue_total'].fillna(0)
        
        print(f"  –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(self.df)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        print(f"\nüìÖ –í–†–ï–ú–ï–ù–ù–û–ô –î–ò–ê–ü–ê–ó–û–ù:")
        print(f"  –° {self.df['year'].min()}.{self.df['month'].min():02d} –ø–æ {self.df['year'].max()}.{self.df['month'].max():02d}")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        if 'revenue_total' in self.df.columns:
            print(f"\nüìà –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ü–û –ü–ï–†–ò–û–î–ê–ú:")
            period_stats = self.df.groupby(['year', 'month'])['revenue_total'].agg(['count', 'sum', 'mean']).round(0)
            print(f"  –í—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {len(period_stats)}")
            print(f"  –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {period_stats['sum'].mean():,.0f} ‚ÇΩ")
            print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {period_stats['sum'].max():,.0f} ‚ÇΩ")
    
    def split_historical_data(self, train_end_year=2025, train_end_month=8):
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏"""
        print(f"\n‚úÇÔ∏è –†–ê–ó–î–ï–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•:")
        print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: –¥–æ {train_end_year}.{train_end_month:02d}")
        print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: —Å {train_end_year}.{train_end_month+1:02d}")
        
        # –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞ (–¥–æ –∞–≤–≥—É—Å—Ç–∞ 2025)
        train_mask = (
            (self.df['year'] < train_end_year) | 
            ((self.df['year'] == train_end_year) & (self.df['month'] <= train_end_month))
        )
        self.train_df = self.df[train_mask].copy()
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞ (—Å —Å–µ–Ω—Ç—è–±—Ä—è 2025)
        test_mask = (
            (self.df['year'] > train_end_year) | 
            ((self.df['year'] == train_end_year) & (self.df['month'] > train_end_month))
        )
        self.test_df = self.df[test_mask].copy()
        
        print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(self.train_df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(self.test_df)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        if 'revenue_total' in self.train_df.columns and 'revenue_total' in self.test_df.columns:
            train_revenue = self.train_df['revenue_total'].sum()
            test_revenue = self.test_df['revenue_total'].sum()
            print(f"  –í—ã—Ä—É—á–∫–∞ –≤ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ: {train_revenue:,.0f} ‚ÇΩ")
            print(f"  –í—ã—Ä—É—á–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: {test_revenue:,.0f} ‚ÇΩ")
    
    def prepare_time_features(self, df):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        df = df.copy()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å
        df['time_index'] = (df['year'] - df['year'].min()) * 12 + (df['month'] - 1)
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if 'month' in df.columns:
            df['month_sin'] = np.sin(2 * np.pi * df['month'] / 12)
            df['month_cos'] = np.cos(2 * np.pi * df['month'] / 12)
            
            # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ dummy –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            df['quarter'] = ((df['month'] - 1) // 3) + 1
            for q in range(1, 5):
                df[f'q{q}'] = (df['quarter'] == q).astype(int)
        
        # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        if 'month' in df.columns:
            df['holiday_period'] = (
                (df['month'] == 12) |  # –î–µ–∫–∞–±—Ä—å
                (df['month'] == 1) |   # –Ø–Ω–≤–∞—Ä—å
                (df['month'] == 2) |   # –§–µ–≤—Ä–∞–ª—å
                (df['month'] == 3) |   # –ú–∞—Ä—Ç
                (df['month'] == 5)     # –ú–∞–π
            ).astype(int)
        
        # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        df['time_squared'] = df['time_index'] ** 2
        df['time_cubed'] = df['time_index'] ** 3
        
        return df
    
    def train_models(self):
        """–û–±—É—á–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        print(f"\nü§ñ –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô:")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        train_data = self.prepare_time_features(self.train_df)
        train_data = train_data[train_data['revenue_total'] > 0].copy()
        
        if len(train_data) < 30:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ({len(train_data)} –∑–∞–ø–∏—Å–µ–π)")
            return None
        
        print(f"  –î–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(train_data)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ë–∞–∑–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = ['time_index', 'month_sin', 'month_cos', 'q1', 'q2', 'q3', 'q4', 
                   'holiday_period', 'time_squared', 'time_cubed']
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º X –∏ y
        X_train = train_data[features].fillna(0)
        y_train = train_data['revenue_total']
        
        print(f"  –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {features}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        self.scaler = StandardScaler()
        X_train_scaled = self.scaler.fit_transform(X_train)
        
        # –û–±—É—á–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        models = {
            'Linear': LinearRegression(),
            'Ridge': Ridge(alpha=1.0),
            'Lasso': Lasso(alpha=0.1),
            'RandomForest': RandomForestRegressor(n_estimators=100, random_state=42, max_depth=10)
        }
        
        best_model = None
        best_score = -np.inf
        best_model_name = None
        model_results = {}
        
        for model_name, model in models.items():
            try:
                # –û–±—É—á–µ–Ω–∏–µ
                model.fit(X_train_scaled, y_train)
                
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ
                y_pred_train = model.predict(X_train_scaled)
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ
                train_r2 = r2_score(y_train, y_pred_train)
                train_mae = mean_absolute_error(y_train, y_pred_train)
                train_rmse = np.sqrt(mean_squared_error(y_train, y_pred_train))
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
                if len(self.test_df) > 0:
                    test_data = self.prepare_time_features(self.test_df)
                    test_data = test_data[test_data['revenue_total'] > 0].copy()
                    
                    if len(test_data) > 0:
                        X_test = test_data[features].fillna(0)
                        y_test = test_data['revenue_total']
                        X_test_scaled = self.scaler.transform(X_test)
                        
                        y_pred_test = model.predict(X_test_scaled)
                        
                        test_r2 = r2_score(y_test, y_pred_test)
                        test_mae = mean_absolute_error(y_test, y_pred_test)
                        test_rmse = np.sqrt(mean_squared_error(y_test, y_pred_test))
                        
                        model_results[model_name] = {
                            'train_r2': train_r2,
                            'test_r2': test_r2,
                            'train_mae': train_mae,
                            'test_mae': test_mae,
                            'train_rmse': train_rmse,
                            'test_rmse': test_rmse
                        }
                        
                        print(f"\n  {model_name}:")
                        print(f"    Train R¬≤: {train_r2:.3f}, Test R¬≤: {test_r2:.3f}")
                        print(f"    Train MAE: {train_mae:,.0f}, Test MAE: {test_mae:,.0f}")
                        print(f"    Train RMSE: {train_rmse:,.0f}, Test RMSE: {test_rmse:,.0f}")
                        
                        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å —Å –ª—É—á—à–∏–º R¬≤ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
                        if test_r2 > best_score:
                            best_score = test_r2
                            best_model = model
                            best_model_name = model_name
                    else:
                        print(f"  {model_name}: –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                else:
                    print(f"  {model_name}: –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏")
                    
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ {model_name}: {e}")
                continue
        
        if best_model is not None:
            self.model = best_model
            print(f"\n  üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model_name} (Test R¬≤ = {best_score:.3f})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ª–∏–Ω–µ–π–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            if hasattr(best_model, 'coef_'):
                print(f"\n  üìä –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ –ú–û–î–ï–õ–ò:")
                for feature, coef in zip(features, best_model.coef_):
                    print(f"    {feature}: {coef:.2f}")
                print(f"    Intercept: {best_model.intercept_:.2f}")
            
            return {
                'model_name': best_model_name,
                'features': features,
                'test_r2': best_score,
                'train_size': len(train_data),
                'model_results': model_results
            }
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –Ω–∏ –æ–¥–Ω—É –º–æ–¥–µ–ª—å")
            return None
    
    def create_forecast(self, forecast_periods=4):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        print(f"\nüîÆ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ì–ù–û–ó–ê –ù–ê {forecast_periods} –ü–ï–†–ò–û–î–û–í:")
        
        if self.model is None:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ train_models()")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å
        last_time_index = self.train_df['time_index'].max() if 'time_index' in self.train_df.columns else 0
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≥—Ä—É–ø–ø
        group_cols = ['region_to', 'subdivision', 'category']
        available_group_cols = [col for col in group_cols if col in self.train_df.columns]
        
        if available_group_cols:
            unique_combinations = self.train_df[available_group_cols].drop_duplicates()
            print(f"  –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {len(unique_combinations)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≥—Ä—É–ø–ø")
        else:
            unique_combinations = pd.DataFrame({'dummy': [1]})
            print(f"  –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        forecast_periods_data = []
        for _, combo in unique_combinations.iterrows():
            for i in range(1, forecast_periods + 1):
                period_data = {
                    'time_index': last_time_index + i,
                    'month_sin': np.sin(2 * np.pi * ((last_time_index + i) % 12) / 12),
                    'month_cos': np.cos(2 * np.pi * ((last_time_index + i) % 12) / 12),
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                for col in available_group_cols:
                    period_data[col] = combo[col]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                month = ((last_time_index + i) % 12) + 1
                quarter = ((month - 1) // 3) + 1
                for q in range(1, 5):
                    period_data[f'q{q}'] = 1 if quarter == q else 0
                
                # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
                period_data['holiday_period'] = 1 if month in [12, 1, 2, 3, 5] else 0
                
                # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                period_data['time_squared'] = period_data['time_index'] ** 2
                period_data['time_cubed'] = period_data['time_index'] ** 3
                
                forecast_periods_data.append(period_data)
        
        self.forecast_df = pd.DataFrame(forecast_periods_data)
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º revenue_total
        features = ['time_index', 'month_sin', 'month_cos', 'q1', 'q2', 'q3', 'q4', 
                   'holiday_period', 'time_squared', 'time_cubed']
        forecast_features = self.forecast_df[features].fillna(0)
        forecast_scaled = self.scaler.transform(forecast_features)
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        predictions = self.model.predict(forecast_scaled)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        self.forecast_df['revenue_total'] = np.maximum(0, predictions)
        
        print(f"  –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–∑–¥–∞–Ω –¥–ª—è {len(forecast_periods_data)} –∑–∞–ø–∏—Å–µ–π")
        print(f"  –û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ revenue_total: {self.forecast_df['revenue_total'].sum():,.0f} ‚ÇΩ")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
        print(f"\n  üìä –ê–ù–ê–õ–ò–ó –ü–†–û–ì–ù–û–ó–ê:")
        print(f"    –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–ø–∏—Å—å: {self.forecast_df['revenue_total'].mean():,.0f} ‚ÇΩ")
        print(f"    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {self.forecast_df['revenue_total'].max():,.0f} ‚ÇΩ")
        print(f"    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {self.forecast_df['revenue_total'].min():,.0f} ‚ÇΩ")
    
    def save_forecast(self, output_file='Historical_Trend_Forecast_Results.csv'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        if self.forecast_df is None:
            raise ValueError("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ create_forecast()")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        self.forecast_df.to_csv(output_file, index=False)
        print(f"\nüíæ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
        
        return self.forecast_df
    
    def plot_forecast_analysis(self, save_plot=True):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        if self.forecast_df is None:
            print("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return
        
        plt.figure(figsize=(15, 10))
        
        # –ü–æ–¥–≥—Ä–∞—Ñ–∏–∫ 1: –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
        plt.subplot(2, 2, 1)
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–æ–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞)
        train_data = self.prepare_time_features(self.train_df)
        train_data = train_data[train_data['revenue_total'] > 0]
        if len(train_data) > 0:
            plt.plot(train_data['time_index'], train_data['revenue_total'], 
                    'b-', label='–û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ', linewidth=2, alpha=0.7)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if len(self.test_df) > 0:
            test_data = self.prepare_time_features(self.test_df)
            test_data = test_data[test_data['revenue_total'] > 0]
            if len(test_data) > 0:
                plt.plot(test_data['time_index'], test_data['revenue_total'], 
                        'g-', label='–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ', linewidth=2, alpha=0.7)
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        plt.plot(self.forecast_df['time_index'], self.forecast_df['revenue_total'], 
                'r--', label='–ü—Ä–æ–≥–Ω–æ–∑', linewidth=2, marker='o')
        
        plt.title('–ü—Ä–æ–≥–Ω–æ–∑ Revenue Total\n(–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)')
        plt.xlabel('–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å')
        plt.ylabel('Revenue Total')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        # –ü–æ–¥–≥—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
        plt.subplot(2, 2, 2)
        plt.hist(self.forecast_df['revenue_total'], bins=50, alpha=0.7, color='red')
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π')
        plt.xlabel('Revenue Total')
        plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        plt.grid(True, alpha=0.3)
        
        # –ü–æ–¥–≥—Ä–∞—Ñ–∏–∫ 3: –¢–æ–ø-10 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        plt.subplot(2, 2, 3)
        top_combinations = self.forecast_df.nlargest(10, 'revenue_total')
        if 'region_to' in top_combinations.columns and 'subdivision' in top_combinations.columns:
            labels = [f"{row['region_to']}\n{row['subdivision']}" for _, row in top_combinations.iterrows()]
            plt.bar(range(len(labels)), top_combinations['revenue_total'])
            plt.title('–¢–æ–ø-10 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–æ –≤—ã—Ä—É—á–∫–µ')
            plt.xlabel('–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏')
            plt.ylabel('Revenue Total')
            plt.xticks(range(len(labels)), labels, rotation=45, ha='right')
            plt.grid(True, alpha=0.3)
        
        # –ü–æ–¥–≥—Ä–∞—Ñ–∏–∫ 4: –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        plt.subplot(2, 2, 4)
        if 'month_sin' in self.forecast_df.columns and 'month_cos' in self.forecast_df.columns:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Å—è—Ü –∏–∑ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            months = np.arctan2(self.forecast_df['month_sin'], self.forecast_df['month_cos']) * 6 / np.pi + 6
            months = np.where(months < 0, months + 12, months)
            monthly_revenue = self.forecast_df.groupby(months)['revenue_total'].sum()
            plt.bar(monthly_revenue.index, monthly_revenue.values)
            plt.title('–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞')
            plt.xlabel('–ú–µ—Å—è—Ü')
            plt.ylabel('Revenue Total')
            plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        if save_plot:
            plt.savefig('historical_trend_forecast_analysis.png', dpi=300, bbox_inches='tight')
            print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'historical_trend_forecast_analysis.png'")
        
        plt.show()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ –ü–†–û–ì–†–ê–ú–ú–ê –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –° –û–ë–£–ß–ï–ù–ò–ï–ú –ù–ê –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•")
    print("="*70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    forecaster = HistoricalTrendForecaster('Marketing Budjet Emulation - raw2.csv')
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    forecaster.load_and_analyze_data()
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    forecaster.clean_data()
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
    forecaster.split_historical_data(train_end_year=2025, train_end_month=8)
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    forecaster.train_models()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
    forecaster.create_forecast(forecast_periods=4)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    forecaster.save_forecast()
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    forecaster.plot_forecast_analysis()
    
    print(f"\nüéâ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()
